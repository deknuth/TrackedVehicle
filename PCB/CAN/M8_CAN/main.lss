
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000672  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000022  00800100  00800100  000006e6  2**0
                  ALLOC
  2 .stab         000016ec  00000000  00000000  000006e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ccc  00000000  00000000  00001dd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	43 c0       	rjmp	.+134    	; 0x88 <__ctors_end>
   2:	52 c0       	rjmp	.+164    	; 0xa8 <__bad_interrupt>
   4:	51 c0       	rjmp	.+162    	; 0xa8 <__bad_interrupt>
   6:	50 c0       	rjmp	.+160    	; 0xa8 <__bad_interrupt>
   8:	4f c0       	rjmp	.+158    	; 0xa8 <__bad_interrupt>
   a:	4e c0       	rjmp	.+156    	; 0xa8 <__bad_interrupt>
   c:	4d c0       	rjmp	.+154    	; 0xa8 <__bad_interrupt>
   e:	4c c0       	rjmp	.+152    	; 0xa8 <__bad_interrupt>
  10:	4b c0       	rjmp	.+150    	; 0xa8 <__bad_interrupt>
  12:	4a c0       	rjmp	.+148    	; 0xa8 <__bad_interrupt>
  14:	49 c0       	rjmp	.+146    	; 0xa8 <__bad_interrupt>
  16:	48 c0       	rjmp	.+144    	; 0xa8 <__bad_interrupt>
  18:	47 c0       	rjmp	.+142    	; 0xa8 <__bad_interrupt>
  1a:	46 c0       	rjmp	.+140    	; 0xa8 <__bad_interrupt>
  1c:	45 c0       	rjmp	.+138    	; 0xa8 <__bad_interrupt>
  1e:	44 c0       	rjmp	.+136    	; 0xa8 <__bad_interrupt>
  20:	43 c0       	rjmp	.+134    	; 0xa8 <__bad_interrupt>
  22:	42 c0       	rjmp	.+132    	; 0xa8 <__bad_interrupt>
  24:	d8 c2       	rjmp	.+1456   	; 0x5d6 <__vector_18>
  26:	40 c0       	rjmp	.+128    	; 0xa8 <__bad_interrupt>
  28:	e4 c2       	rjmp	.+1480   	; 0x5f2 <__vector_20>
  2a:	3e c0       	rjmp	.+124    	; 0xa8 <__bad_interrupt>
  2c:	3d c0       	rjmp	.+122    	; 0xa8 <__bad_interrupt>
  2e:	3c c0       	rjmp	.+120    	; 0xa8 <__bad_interrupt>
  30:	3b c0       	rjmp	.+118    	; 0xa8 <__bad_interrupt>
  32:	3a c0       	rjmp	.+116    	; 0xa8 <__bad_interrupt>

00000034 <__c.1384>:
  34:	20 3a 20 00                                          : .

00000038 <__c.1382>:
  38:	44 42 79 74 65 20 00                                DByte .

0000003f <__c.1379>:
  3f:	52 65 6d 6f 74 65 20 54 72 61 6e 73 6d 69 74 20     Remote Transmit 
  4f:	52 65 71 75 65 73 74 0a 00                          Request..

00000058 <__c.1377>:
  58:	53 74 61 6e 64 61 72 64 20 49 64 65 6e 74 69 66     Standard Identif
  68:	69 65 72 20 3a 20 00                                ier : .

0000006f <__c.1375>:
  6f:	52 65 6d 6f 74 65 20 54 72 61 6e 73 6d 69 74 20     Remote Transmit 
  7f:	52 65 71 75 65 73 74 0a 00                          Request..

00000088 <__ctors_end>:
  88:	11 24       	eor	r1, r1
  8a:	1f be       	out	0x3f, r1	; 63
  8c:	cf ef       	ldi	r28, 0xFF	; 255
  8e:	d2 e0       	ldi	r29, 0x02	; 2
  90:	de bf       	out	0x3e, r29	; 62
  92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_clear_bss>:
  94:	11 e0       	ldi	r17, 0x01	; 1
  96:	a0 e0       	ldi	r26, 0x00	; 0
  98:	b1 e0       	ldi	r27, 0x01	; 1
  9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
  9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
  9e:	a2 32       	cpi	r26, 0x22	; 34
  a0:	b1 07       	cpc	r27, r17
  a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>
  a4:	0d d0       	rcall	.+26     	; 0xc0 <main>
  a6:	e3 c2       	rjmp	.+1478   	; 0x66e <_exit>

000000a8 <__bad_interrupt>:
  a8:	ab cf       	rjmp	.-170    	; 0x0 <__vectors>

000000aa <delay>:
    }
    return 0;
}

void delay(unsigned int ms)
{
  aa:	07 c0       	rjmp	.+14     	; 0xba <delay+0x10>
    unsigned int zaehler;
    while (ms)
  ac:	22 ec       	ldi	r18, 0xC2	; 194
  ae:	35 e0       	ldi	r19, 0x05	; 5
    {
        zaehler = F_CPU / 5000;
        while (zaehler)
        {
            asm volatile ("nop");
  b0:	00 00       	nop
            zaehler--;
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	30 40       	sbci	r19, 0x00	; 0
{
    unsigned int zaehler;
    while (ms)
    {
        zaehler = F_CPU / 5000;
        while (zaehler)
  b6:	e1 f7       	brne	.-8      	; 0xb0 <delay+0x6>
        {
            asm volatile ("nop");
            zaehler--;
        }
        ms--;
  b8:	01 97       	sbiw	r24, 0x01	; 1
}

void delay(unsigned int ms)
{
    unsigned int zaehler;
    while (ms)
  ba:	00 97       	sbiw	r24, 0x00	; 0
  bc:	b9 f7       	brne	.-18     	; 0xac <delay+0x2>
            asm volatile ("nop");
            zaehler--;
        }
        ms--;
    }
}
  be:	08 95       	ret

000000c0 <main>:
void delay(unsigned int ms);

#define	UART	0

int main(void)
{
  c0:	ef 92       	push	r14
  c2:	ff 92       	push	r15
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
    mcp2515_init();
  c8:	ee d0       	rcall	.+476    	; 0x2a6 <mcp2515_init>
        delay(1000);
    }*/
    while(1)
    {
        unsigned char temp, rtr = 0;
        temp = mcp2515_read_register( CANINTF );
  ca:	8c e2       	ldi	r24, 0x2C	; 44
  cc:	8e d0       	rcall	.+284    	; 0x1ea <mcp2515_read_register>

        // Ñ­»·¶Ácan
        if ( temp & ((1<<RX0IF)|(1<<RX1IF)) )
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	83 70       	andi	r24, 0x03	; 3
  d2:	90 70       	andi	r25, 0x00	; 0
  d4:	89 2b       	or	r24, r25
  d6:	c9 f3       	breq	.-14     	; 0xca <main+0xa>
        {
            unsigned char i;
            unsigned int iTemp = 0;

//            uart_puts_P("eine neue Nachricht wurde empfangen : \n");
            temp = mcp2515_read_register( RXB0SIDL );       
  d8:	82 e6       	ldi	r24, 0x62	; 98
  da:	87 d0       	rcall	.+270    	; 0x1ea <mcp2515_read_register>
            if ( temp & (1<<IDE) )
  dc:	e8 2e       	mov	r14, r24
  de:	f8 2e       	mov	r15, r24
  e0:	f2 94       	swap	r15
  e2:	f6 94       	lsr	r15
  e4:	47 e0       	ldi	r20, 0x07	; 7
  e6:	f4 22       	and	r15, r20
  e8:	83 ff       	sbrs	r24, 3
  ea:	1b c0       	rjmp	.+54     	; 0x122 <main+0x62>
//                uart_put_hex(mcp2515_read_register( RXB0SIDL) & 0x03 );
//                uart_put_hex(mcp2515_read_register( RXB0EID8) );
 //               uart_put_hex(mcp2515_read_register( RXB0EID0) );
//                uart_putc('\n');
//                uart_puts_P("Standard Identifier : ");
                iTemp = ( (unsigned int) mcp2515_read_register( RXB0SIDH ))<<3;
  ec:	81 e6       	ldi	r24, 0x61	; 97
  ee:	7d d0       	rcall	.+250    	; 0x1ea <mcp2515_read_register>
  f0:	08 2f       	mov	r16, r24
  f2:	10 e0       	ldi	r17, 0x00	; 0
  f4:	33 e0       	ldi	r19, 0x03	; 3
  f6:	00 0f       	add	r16, r16
  f8:	11 1f       	adc	r17, r17
  fa:	3a 95       	dec	r19
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x36>
                iTemp |= (temp>>5) & 0x07;
  fe:	8f 2d       	mov	r24, r15
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	08 2b       	or	r16, r24
 104:	19 2b       	or	r17, r25

                uart_put_hex((unsigned char) (iTemp>>8));
 106:	81 2f       	mov	r24, r17
 108:	50 d2       	rcall	.+1184   	; 0x5aa <uart_put_hex>
                uart_put_hex((unsigned char) iTemp & 0x00ff);
 10a:	80 2f       	mov	r24, r16
 10c:	4e d2       	rcall	.+1180   	; 0x5aa <uart_put_hex>
                uart_putc('\n');
 10e:	8a e0       	ldi	r24, 0x0A	; 10
 110:	c7 d1       	rcall	.+910    	; 0x4a0 <uart_putc>

                if ( mcp2515_read_register( RXB0DLC ) & (1<<RTR))
 112:	85 e6       	ldi	r24, 0x65	; 101
 114:	6a d0       	rcall	.+212    	; 0x1ea <mcp2515_read_register>
 116:	86 ff       	sbrs	r24, 6
 118:	21 c0       	rjmp	.+66     	; 0x15c <main+0x9c>
                    uart_puts_P("Remote Transmit Request\n");
 11a:	8f e6       	ldi	r24, 0x6F	; 111
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	dc d1       	rcall	.+952    	; 0x4d8 <uart_puts_p>
 120:	1d c0       	rjmp	.+58     	; 0x15c <main+0x9c>
            }
            else
            {
                uart_puts_P("Standard Identifier : ");
 122:	88 e5       	ldi	r24, 0x58	; 88
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	d8 d1       	rcall	.+944    	; 0x4d8 <uart_puts_p>
                iTemp = ( (unsigned int) mcp2515_read_register( RXB0SIDH ))<<3;
 128:	81 e6       	ldi	r24, 0x61	; 97
 12a:	5f d0       	rcall	.+190    	; 0x1ea <mcp2515_read_register>
 12c:	08 2f       	mov	r16, r24
 12e:	10 e0       	ldi	r17, 0x00	; 0
 130:	23 e0       	ldi	r18, 0x03	; 3
 132:	00 0f       	add	r16, r16
 134:	11 1f       	adc	r17, r17
 136:	2a 95       	dec	r18
 138:	e1 f7       	brne	.-8      	; 0x132 <main+0x72>
                iTemp |= (temp>>5) & 0x07;
 13a:	8f 2d       	mov	r24, r15
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	08 2b       	or	r16, r24
 140:	19 2b       	or	r17, r25

                /* Identifier ausgeben */
                uart_put_hex((unsigned char) (iTemp>>8));
 142:	81 2f       	mov	r24, r17
 144:	32 d2       	rcall	.+1124   	; 0x5aa <uart_put_hex>
                uart_put_hex((unsigned char) iTemp & 0x00ff);
 146:	80 2f       	mov	r24, r16
 148:	30 d2       	rcall	.+1120   	; 0x5aa <uart_put_hex>

                uart_putc('\n');
 14a:	8a e0       	ldi	r24, 0x0A	; 10
 14c:	a9 d1       	rcall	.+850    	; 0x4a0 <uart_putc>

                /* Überprüfen ob es ein Standard Remote Transmit Request Frame ist */
                if ( temp & (1<<SRR))
 14e:	e4 fe       	sbrs	r14, 4
 150:	05 c0       	rjmp	.+10     	; 0x15c <main+0x9c>
                {
                    uart_puts_P("Remote Transmit Request\n");
 152:	8f e3       	ldi	r24, 0x3F	; 63
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	c0 d1       	rcall	.+896    	; 0x4d8 <uart_puts_p>
 158:	11 e0       	ldi	r17, 0x01	; 1
 15a:	01 c0       	rjmp	.+2      	; 0x15e <main+0x9e>
 15c:	10 e0       	ldi	r17, 0x00	; 0
                {
                    ;
                }
            }
            /* Datenlänge usw. einlesen */
            temp = mcp2515_read_register( RXB0DLC ) & 0x0F;
 15e:	85 e6       	ldi	r24, 0x65	; 101
 160:	44 d0       	rcall	.+136    	; 0x1ea <mcp2515_read_register>
 162:	9f e0       	ldi	r25, 0x0F	; 15
 164:	f9 2e       	mov	r15, r25
 166:	f8 22       	and	r15, r24
            if (rtr == 0)
 168:	11 23       	and	r17, r17
 16a:	b1 f4       	brne	.+44     	; 0x198 <main+0xd8>
 16c:	00 e0       	ldi	r16, 0x00	; 0
 16e:	12 c0       	rjmp	.+36     	; 0x194 <main+0xd4>
            {
                /* Datenbytes ausgeben */
                for (i = 0;i < temp; i++ )
                {
                    unsigned char daten = mcp2515_read_register( RXB0D0 + i );
 170:	80 2f       	mov	r24, r16
 172:	8a 59       	subi	r24, 0x9A	; 154
 174:	3a d0       	rcall	.+116    	; 0x1ea <mcp2515_read_register>
 176:	18 2f       	mov	r17, r24
                    uart_puts_P("DByte ");
 178:	88 e3       	ldi	r24, 0x38	; 56
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	ad d1       	rcall	.+858    	; 0x4d8 <uart_puts_p>
                    uart_putc(i + '0');
 17e:	80 2f       	mov	r24, r16
 180:	80 5d       	subi	r24, 0xD0	; 208
 182:	8e d1       	rcall	.+796    	; 0x4a0 <uart_putc>
                    uart_puts_P(" : ");
 184:	84 e3       	ldi	r24, 0x34	; 52
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	a7 d1       	rcall	.+846    	; 0x4d8 <uart_puts_p>
                    uart_put_hex( daten );
 18a:	81 2f       	mov	r24, r17
 18c:	0e d2       	rcall	.+1052   	; 0x5aa <uart_put_hex>
                    uart_putc('\n');
 18e:	8a e0       	ldi	r24, 0x0A	; 10
 190:	87 d1       	rcall	.+782    	; 0x4a0 <uart_putc>
            /* Datenlänge usw. einlesen */
            temp = mcp2515_read_register( RXB0DLC ) & 0x0F;
            if (rtr == 0)
            {
                /* Datenbytes ausgeben */
                for (i = 0;i < temp; i++ )
 192:	0f 5f       	subi	r16, 0xFF	; 255
 194:	0f 15       	cp	r16, r15
 196:	60 f3       	brcs	.-40     	; 0x170 <main+0xb0>
                    uart_put_hex( daten );
                    uart_putc('\n');

                }
            }
            uart_putc('\n');
 198:	8a e0       	ldi	r24, 0x0A	; 10
 19a:	82 d1       	rcall	.+772    	; 0x4a0 <uart_putc>
            /* Interrupt Flag löschen */
            mcp2515_bit_modify( CANINTF, 0x01, 0x00 );
 19c:	8c e2       	ldi	r24, 0x2C	; 44
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	40 e0       	ldi	r20, 0x00	; 0
 1a2:	4c d0       	rcall	.+152    	; 0x23c <mcp2515_bit_modify>
 1a4:	92 cf       	rjmp	.-220    	; 0xca <main+0xa>

000001a6 <spi_init>:
void mcp2515_bit_modify(unsigned char data, unsigned char mask, unsigned char adress);
void mcp2515_write_register_p( unsigned char adress, unsigned char *data, unsigned char length );

void spi_init(void)
{
    DDRB |= (1<<SPI_CS)|(1<<SPI_SCK)|(1<<SPI_MOSI);
 1a6:	84 b1       	in	r24, 0x04	; 4
 1a8:	8c 62       	ori	r24, 0x2C	; 44
 1aa:	84 b9       	out	0x04, r24	; 4
    PORTB |= (1<<SPI_CS);
 1ac:	2a 9a       	sbi	0x05, 2	; 5
    PORTB &= ~(1<<SPI_SCK)|(1<<SPI_MOSI)|(1<<SPI_MISO);
 1ae:	2d 98       	cbi	0x05, 5	; 5
    /* set SPI master interfaces, fosc = fclk / 4 */
    SPCR = (1<<SPE)|(1<<MSTR)/*|(1<<SPIE)*/;
 1b0:	80 e5       	ldi	r24, 0x50	; 80
 1b2:	8c bd       	out	0x2c, r24	; 44
    //SPSR = (1<<SPI2X);
}
 1b4:	08 95       	ret

000001b6 <spi_putc>:
    mcp2515_bit_modify( CANCTRL, 0xE0, 0 );		// set to normal mode		
}

unsigned char spi_putc( unsigned char data )
{
    SPDR = data;
 1b6:	8e bd       	out	0x2e, r24	; 46
    while( !( SPSR & (1<<SPIF) ) );
 1b8:	0d b4       	in	r0, 0x2d	; 45
 1ba:	07 fe       	sbrs	r0, 7
 1bc:	fd cf       	rjmp	.-6      	; 0x1b8 <spi_putc+0x2>
    return SPDR;
 1be:	8e b5       	in	r24, 0x2e	; 46
}
 1c0:	08 95       	ret

000001c2 <mcp2515_write_register>:


void mcp2515_write_register( unsigned char adress, unsigned char data )
{
 1c2:	98 2f       	mov	r25, r24
    SPI_CS_L;
 1c4:	2a 98       	cbi	0x05, 2	; 5
    mcp2515_bit_modify( CANCTRL, 0xE0, 0 );		// set to normal mode		
}

unsigned char spi_putc( unsigned char data )
{
    SPDR = data;
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	8e bd       	out	0x2e, r24	; 46
    while( !( SPSR & (1<<SPIF) ) );
 1ca:	0d b4       	in	r0, 0x2d	; 45
 1cc:	07 fe       	sbrs	r0, 7
 1ce:	fd cf       	rjmp	.-6      	; 0x1ca <mcp2515_write_register+0x8>
    return SPDR;
 1d0:	8e b5       	in	r24, 0x2e	; 46
    mcp2515_bit_modify( CANCTRL, 0xE0, 0 );		// set to normal mode		
}

unsigned char spi_putc( unsigned char data )
{
    SPDR = data;
 1d2:	9e bd       	out	0x2e, r25	; 46
    while( !( SPSR & (1<<SPIF) ) );
 1d4:	0d b4       	in	r0, 0x2d	; 45
 1d6:	07 fe       	sbrs	r0, 7
 1d8:	fd cf       	rjmp	.-6      	; 0x1d4 <mcp2515_write_register+0x12>
    return SPDR;
 1da:	8e b5       	in	r24, 0x2e	; 46
    mcp2515_bit_modify( CANCTRL, 0xE0, 0 );		// set to normal mode		
}

unsigned char spi_putc( unsigned char data )
{
    SPDR = data;
 1dc:	6e bd       	out	0x2e, r22	; 46
    while( !( SPSR & (1<<SPIF) ) );
 1de:	0d b4       	in	r0, 0x2d	; 45
 1e0:	07 fe       	sbrs	r0, 7
 1e2:	fd cf       	rjmp	.-6      	; 0x1de <mcp2515_write_register+0x1c>
    return SPDR;
 1e4:	8e b5       	in	r24, 0x2e	; 46
{
    SPI_CS_L;
    spi_putc(SPI_WRITE);
    spi_putc(adress);
    spi_putc(data);
    SPI_CS_H;
 1e6:	2a 9a       	sbi	0x05, 2	; 5
}
 1e8:	08 95       	ret

000001ea <mcp2515_read_register>:


unsigned char mcp2515_read_register(unsigned char adress)
{
 1ea:	98 2f       	mov	r25, r24
    unsigned char data;
    SPI_CS_L;
 1ec:	2a 98       	cbi	0x05, 2	; 5
    mcp2515_bit_modify( CANCTRL, 0xE0, 0 );		// set to normal mode		
}

unsigned char spi_putc( unsigned char data )
{
    SPDR = data;
 1ee:	83 e0       	ldi	r24, 0x03	; 3
 1f0:	8e bd       	out	0x2e, r24	; 46
    while( !( SPSR & (1<<SPIF) ) );
 1f2:	0d b4       	in	r0, 0x2d	; 45
 1f4:	07 fe       	sbrs	r0, 7
 1f6:	fd cf       	rjmp	.-6      	; 0x1f2 <mcp2515_read_register+0x8>
    return SPDR;
 1f8:	8e b5       	in	r24, 0x2e	; 46
    mcp2515_bit_modify( CANCTRL, 0xE0, 0 );		// set to normal mode		
}

unsigned char spi_putc( unsigned char data )
{
    SPDR = data;
 1fa:	9e bd       	out	0x2e, r25	; 46
    while( !( SPSR & (1<<SPIF) ) );
 1fc:	0d b4       	in	r0, 0x2d	; 45
 1fe:	07 fe       	sbrs	r0, 7
 200:	fd cf       	rjmp	.-6      	; 0x1fc <mcp2515_read_register+0x12>
    return SPDR;
 202:	8e b5       	in	r24, 0x2e	; 46
    mcp2515_bit_modify( CANCTRL, 0xE0, 0 );		// set to normal mode		
}

unsigned char spi_putc( unsigned char data )
{
    SPDR = data;
 204:	8f ef       	ldi	r24, 0xFF	; 255
 206:	8e bd       	out	0x2e, r24	; 46
    while( !( SPSR & (1<<SPIF) ) );
 208:	0d b4       	in	r0, 0x2d	; 45
 20a:	07 fe       	sbrs	r0, 7
 20c:	fd cf       	rjmp	.-6      	; 0x208 <mcp2515_read_register+0x1e>
    return SPDR;
 20e:	8e b5       	in	r24, 0x2e	; 46
    unsigned char data;
    SPI_CS_L;
    spi_putc(SPI_READ);
    spi_putc(adress);
    data = spi_putc(0xff);
    SPI_CS_H;
 210:	2a 9a       	sbi	0x05, 2	; 5
    return data;
}
 212:	08 95       	ret

00000214 <mcp2515_read_rx_buffer>:


unsigned char mcp2515_read_rx_buffer(unsigned char adress)
{
 214:	98 2f       	mov	r25, r24
    unsigned char data;
    /* Überprüfen ob die Adresse richtig ist */
    if (adress & 0xF9)
 216:	89 7f       	andi	r24, 0xF9	; 249
 218:	11 f0       	breq	.+4      	; 0x21e <mcp2515_read_rx_buffer+0xa>
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	08 95       	ret
        return 0;
    SPI_CS_L;
 21e:	2a 98       	cbi	0x05, 2	; 5
    spi_putc(SPI_READ_RX | adress);
 220:	90 69       	ori	r25, 0x90	; 144
    mcp2515_bit_modify( CANCTRL, 0xE0, 0 );		// set to normal mode		
}

unsigned char spi_putc( unsigned char data )
{
    SPDR = data;
 222:	9e bd       	out	0x2e, r25	; 46
    while( !( SPSR & (1<<SPIF) ) );
 224:	0d b4       	in	r0, 0x2d	; 45
 226:	07 fe       	sbrs	r0, 7
 228:	fd cf       	rjmp	.-6      	; 0x224 <mcp2515_read_rx_buffer+0x10>
    return SPDR;
 22a:	8e b5       	in	r24, 0x2e	; 46
    mcp2515_bit_modify( CANCTRL, 0xE0, 0 );		// set to normal mode		
}

unsigned char spi_putc( unsigned char data )
{
    SPDR = data;
 22c:	8f ef       	ldi	r24, 0xFF	; 255
 22e:	8e bd       	out	0x2e, r24	; 46
    while( !( SPSR & (1<<SPIF) ) );
 230:	0d b4       	in	r0, 0x2d	; 45
 232:	07 fe       	sbrs	r0, 7
 234:	fd cf       	rjmp	.-6      	; 0x230 <mcp2515_read_rx_buffer+0x1c>
    return SPDR;
 236:	8e b5       	in	r24, 0x2e	; 46
    if (adress & 0xF9)
        return 0;
    SPI_CS_L;
    spi_putc(SPI_READ_RX | adress);
    data = spi_putc(0xff);
    SPI_CS_H;
 238:	2a 9a       	sbi	0x05, 2	; 5
    return data;
}
 23a:	08 95       	ret

0000023c <mcp2515_bit_modify>:


void mcp2515_bit_modify(unsigned char adress, unsigned char mask, unsigned char data)
{
 23c:	98 2f       	mov	r25, r24
    SPI_CS_L;
 23e:	2a 98       	cbi	0x05, 2	; 5
    mcp2515_bit_modify( CANCTRL, 0xE0, 0 );		// set to normal mode		
}

unsigned char spi_putc( unsigned char data )
{
    SPDR = data;
 240:	85 e0       	ldi	r24, 0x05	; 5
 242:	8e bd       	out	0x2e, r24	; 46
    while( !( SPSR & (1<<SPIF) ) );
 244:	0d b4       	in	r0, 0x2d	; 45
 246:	07 fe       	sbrs	r0, 7
 248:	fd cf       	rjmp	.-6      	; 0x244 <mcp2515_bit_modify+0x8>
    return SPDR;
 24a:	8e b5       	in	r24, 0x2e	; 46
    mcp2515_bit_modify( CANCTRL, 0xE0, 0 );		// set to normal mode		
}

unsigned char spi_putc( unsigned char data )
{
    SPDR = data;
 24c:	9e bd       	out	0x2e, r25	; 46
    while( !( SPSR & (1<<SPIF) ) );
 24e:	0d b4       	in	r0, 0x2d	; 45
 250:	07 fe       	sbrs	r0, 7
 252:	fd cf       	rjmp	.-6      	; 0x24e <mcp2515_bit_modify+0x12>
    return SPDR;
 254:	8e b5       	in	r24, 0x2e	; 46
    mcp2515_bit_modify( CANCTRL, 0xE0, 0 );		// set to normal mode		
}

unsigned char spi_putc( unsigned char data )
{
    SPDR = data;
 256:	6e bd       	out	0x2e, r22	; 46
    while( !( SPSR & (1<<SPIF) ) );
 258:	0d b4       	in	r0, 0x2d	; 45
 25a:	07 fe       	sbrs	r0, 7
 25c:	fd cf       	rjmp	.-6      	; 0x258 <mcp2515_bit_modify+0x1c>
    return SPDR;
 25e:	8e b5       	in	r24, 0x2e	; 46
    mcp2515_bit_modify( CANCTRL, 0xE0, 0 );		// set to normal mode		
}

unsigned char spi_putc( unsigned char data )
{
    SPDR = data;
 260:	4e bd       	out	0x2e, r20	; 46
    while( !( SPSR & (1<<SPIF) ) );
 262:	0d b4       	in	r0, 0x2d	; 45
 264:	07 fe       	sbrs	r0, 7
 266:	fd cf       	rjmp	.-6      	; 0x262 <mcp2515_bit_modify+0x26>
    return SPDR;
 268:	8e b5       	in	r24, 0x2e	; 46
    SPI_CS_L;
    spi_putc(SPI_BIT_MODIFY);
    spi_putc(adress);
    spi_putc(mask);
    spi_putc(data);
    SPI_CS_H;
 26a:	2a 9a       	sbi	0x05, 2	; 5
}
 26c:	08 95       	ret

0000026e <mcp2515_write_register_p>:

/*
 *	Beschreibt mehrere Register auf einmal
 */
void mcp2515_write_register_p( unsigned char adress, unsigned char *data, unsigned char length )
{
 26e:	98 2f       	mov	r25, r24
    unsigned char i;
    SPI_CS_L;
 270:	2a 98       	cbi	0x05, 2	; 5
    mcp2515_bit_modify( CANCTRL, 0xE0, 0 );		// set to normal mode		
}

unsigned char spi_putc( unsigned char data )
{
    SPDR = data;
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	8e bd       	out	0x2e, r24	; 46
    while( !( SPSR & (1<<SPIF) ) );
 276:	0d b4       	in	r0, 0x2d	; 45
 278:	07 fe       	sbrs	r0, 7
 27a:	fd cf       	rjmp	.-6      	; 0x276 <mcp2515_write_register_p+0x8>
    return SPDR;
 27c:	8e b5       	in	r24, 0x2e	; 46
    mcp2515_bit_modify( CANCTRL, 0xE0, 0 );		// set to normal mode		
}

unsigned char spi_putc( unsigned char data )
{
    SPDR = data;
 27e:	9e bd       	out	0x2e, r25	; 46
    while( !( SPSR & (1<<SPIF) ) );
 280:	0d b4       	in	r0, 0x2d	; 45
 282:	07 fe       	sbrs	r0, 7
 284:	fd cf       	rjmp	.-6      	; 0x280 <mcp2515_write_register_p+0x12>
    return SPDR;
 286:	8e b5       	in	r24, 0x2e	; 46
 288:	fb 01       	movw	r30, r22
 28a:	07 c0       	rjmp	.+14     	; 0x29a <mcp2515_write_register_p+0x2c>
    unsigned char i;
    SPI_CS_L;
    spi_putc(SPI_WRITE);
    spi_putc(adress);
    for (i=0; i<length ;i++ )
        spi_putc(*data++);
 28c:	80 81       	ld	r24, Z
    mcp2515_bit_modify( CANCTRL, 0xE0, 0 );		// set to normal mode		
}

unsigned char spi_putc( unsigned char data )
{
    SPDR = data;
 28e:	8e bd       	out	0x2e, r24	; 46
    while( !( SPSR & (1<<SPIF) ) );
 290:	0d b4       	in	r0, 0x2d	; 45
 292:	07 fe       	sbrs	r0, 7
 294:	fd cf       	rjmp	.-6      	; 0x290 <mcp2515_write_register_p+0x22>
    unsigned char i;
    SPI_CS_L;
    spi_putc(SPI_WRITE);
    spi_putc(adress);
    for (i=0; i<length ;i++ )
        spi_putc(*data++);
 296:	31 96       	adiw	r30, 0x01	; 1

unsigned char spi_putc( unsigned char data )
{
    SPDR = data;
    while( !( SPSR & (1<<SPIF) ) );
    return SPDR;
 298:	8e b5       	in	r24, 0x2e	; 46
{
    unsigned char i;
    SPI_CS_L;
    spi_putc(SPI_WRITE);
    spi_putc(adress);
    for (i=0; i<length ;i++ )
 29a:	8e 2f       	mov	r24, r30
 29c:	86 1b       	sub	r24, r22
 29e:	84 17       	cp	r24, r20
 2a0:	a8 f3       	brcs	.-22     	; 0x28c <mcp2515_write_register_p+0x1e>
        spi_putc(*data++);
    SPI_CS_H;
 2a2:	2a 9a       	sbi	0x05, 2	; 5
}
 2a4:	08 95       	ret

000002a6 <mcp2515_init>:
    SPCR = (1<<SPE)|(1<<MSTR)/*|(1<<SPIE)*/;
    //SPSR = (1<<SPI2X);
}

void mcp2515_init(void)
{
 2a6:	0f 93       	push	r16
 2a8:	1f 93       	push	r17
 2aa:	df 93       	push	r29
 2ac:	cf 93       	push	r28
 2ae:	00 d0       	rcall	.+0      	; 0x2b0 <mcp2515_init+0xa>
 2b0:	00 d0       	rcall	.+0      	; 0x2b2 <mcp2515_init+0xc>
 2b2:	cd b7       	in	r28, 0x3d	; 61
 2b4:	de b7       	in	r29, 0x3e	; 62
    spi_init();
 2b6:	77 df       	rcall	.-274    	; 0x1a6 <spi_init>
    SPI_CS_L;
 2b8:	2a 98       	cbi	0x05, 2	; 5
    mcp2515_bit_modify( CANCTRL, 0xE0, 0 );		// set to normal mode		
}

unsigned char spi_putc( unsigned char data )
{
    SPDR = data;
 2ba:	80 ec       	ldi	r24, 0xC0	; 192
 2bc:	8e bd       	out	0x2e, r24	; 46
    while( !( SPSR & (1<<SPIF) ) );
 2be:	0d b4       	in	r0, 0x2d	; 45
 2c0:	07 fe       	sbrs	r0, 7
 2c2:	fd cf       	rjmp	.-6      	; 0x2be <mcp2515_init+0x18>
    return SPDR;
 2c4:	8e b5       	in	r24, 0x2e	; 46
void mcp2515_init(void)
{
    spi_init();
    SPI_CS_L;
    spi_putc( SPI_RESET );
    SPI_CS_H;
 2c6:	2a 9a       	sbi	0x05, 2	; 5

    mcp2515_bit_modify( CANCTRL, 0xE0, (1<<REQOP2) );
 2c8:	8f e0       	ldi	r24, 0x0F	; 15
 2ca:	60 ee       	ldi	r22, 0xE0	; 224
 2cc:	40 e8       	ldi	r20, 0x80	; 128
 2ce:	b6 df       	rcall	.-148    	; 0x23c <mcp2515_bit_modify>

    mcp2515_write_register( CNF1, (1<<BRP0)|(1<<BRP1) );		   		// SJW = 1*TO; BRP=3  TQ = 2*(BRP+1)/FOSC  
 2d0:	8a e2       	ldi	r24, 0x2A	; 42
 2d2:	63 e0       	ldi	r22, 0x03	; 3
 2d4:	76 df       	rcall	.-276    	; 0x1c2 <mcp2515_write_register>
    mcp2515_write_register( CNF2, (1<<BTLMODE)|(1<<PHSEG11)|PHSEG0 );	// PS1 = 3*TQ; RSEG= 2*T  
 2d6:	89 e2       	ldi	r24, 0x29	; 41
 2d8:	60 e9       	ldi	r22, 0x90	; 144
 2da:	73 df       	rcall	.-282    	; 0x1c2 <mcp2515_write_register>
    mcp2515_write_register( CNF3, (1<<PHSEG21)|(1<<PHSEG20) );			// PS2 = 4*TQ;   
 2dc:	88 e2       	ldi	r24, 0x28	; 40
 2de:	63 e0       	ldi	r22, 0x03	; 3
 2e0:	70 df       	rcall	.-288    	; 0x1c2 <mcp2515_write_register>
    mcp2515_write_register( CANINTE, (1<<RX1IE)|(1<<RX0IE) );				
 2e2:	8b e2       	ldi	r24, 0x2B	; 43
 2e4:	63 e0       	ldi	r22, 0x03	; 3
 2e6:	6d df       	rcall	.-294    	; 0x1c2 <mcp2515_write_register>
    mcp2515_write_register( RXB0CTRL, (1<<RXM1)|(1<<RXM0) );
 2e8:	80 e6       	ldi	r24, 0x60	; 96
 2ea:	60 e6       	ldi	r22, 0x60	; 96
 2ec:	6a df       	rcall	.-300    	; 0x1c2 <mcp2515_write_register>
    mcp2515_write_register( RXB1CTRL, (1<<RXM1)|(1<<RXM0) );
 2ee:	80 e7       	ldi	r24, 0x70	; 112
 2f0:	60 e6       	ldi	r22, 0x60	; 96
 2f2:	67 df       	rcall	.-306    	; 0x1c2 <mcp2515_write_register>
    
    unsigned char temp[4] = { 0, 0, 0, 0 };
 2f4:	19 82       	std	Y+1, r1	; 0x01
 2f6:	1a 82       	std	Y+2, r1	; 0x02
 2f8:	1b 82       	std	Y+3, r1	; 0x03
 2fa:	1c 82       	std	Y+4, r1	; 0x04
    
    mcp2515_write_register_p( RXF0SIDH, temp, 4 );
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	8e 01       	movw	r16, r28
 300:	0f 5f       	subi	r16, 0xFF	; 255
 302:	1f 4f       	sbci	r17, 0xFF	; 255
 304:	b8 01       	movw	r22, r16
 306:	44 e0       	ldi	r20, 0x04	; 4
 308:	b2 df       	rcall	.-156    	; 0x26e <mcp2515_write_register_p>
    mcp2515_write_register_p( RXF1SIDH, temp, 4 );
 30a:	84 e0       	ldi	r24, 0x04	; 4
 30c:	b8 01       	movw	r22, r16
 30e:	44 e0       	ldi	r20, 0x04	; 4
 310:	ae df       	rcall	.-164    	; 0x26e <mcp2515_write_register_p>
    
    /* empty  Buffer 1 */
    mcp2515_write_register_p( RXF2SIDH, temp, 4 );
 312:	88 e0       	ldi	r24, 0x08	; 8
 314:	b8 01       	movw	r22, r16
 316:	44 e0       	ldi	r20, 0x04	; 4
 318:	aa df       	rcall	.-172    	; 0x26e <mcp2515_write_register_p>
    mcp2515_write_register_p( RXF3SIDH, temp, 4 );
 31a:	80 e1       	ldi	r24, 0x10	; 16
 31c:	b8 01       	movw	r22, r16
 31e:	44 e0       	ldi	r20, 0x04	; 4
 320:	a6 df       	rcall	.-180    	; 0x26e <mcp2515_write_register_p>
    mcp2515_write_register_p( RXF4SIDH, temp, 4 );
 322:	84 e1       	ldi	r24, 0x14	; 20
 324:	b8 01       	movw	r22, r16
 326:	44 e0       	ldi	r20, 0x04	; 4
 328:	a2 df       	rcall	.-188    	; 0x26e <mcp2515_write_register_p>
    mcp2515_write_register_p( RXF5SIDH, temp, 4 );
 32a:	88 e1       	ldi	r24, 0x18	; 24
 32c:	b8 01       	movw	r22, r16
 32e:	44 e0       	ldi	r20, 0x04	; 4
 330:	9e df       	rcall	.-196    	; 0x26e <mcp2515_write_register_p>
    mcp2515_write_register_p( RXM0SIDH, temp, 4 );
 332:	80 e2       	ldi	r24, 0x20	; 32
 334:	b8 01       	movw	r22, r16
 336:	44 e0       	ldi	r20, 0x04	; 4
 338:	9a df       	rcall	.-204    	; 0x26e <mcp2515_write_register_p>
    mcp2515_write_register_p( RXM1SIDH, temp, 4 );
 33a:	84 e2       	ldi	r24, 0x24	; 36
 33c:	b8 01       	movw	r22, r16
 33e:	44 e0       	ldi	r20, 0x04	; 4
 340:	96 df       	rcall	.-212    	; 0x26e <mcp2515_write_register_p>
    
    /* Deaktivieren der Pins RXnBF Pins ( High Impedance State ) */
    mcp2515_write_register( BFPCTRL, 0 );
 342:	8c e0       	ldi	r24, 0x0C	; 12
 344:	60 e0       	ldi	r22, 0x00	; 0
 346:	3d df       	rcall	.-390    	; 0x1c2 <mcp2515_write_register>
    /* TXnRTS Bits als Inputs schalten */
    mcp2515_write_register( TXRTSCTRL, 0 );
 348:	8d e0       	ldi	r24, 0x0D	; 13
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	3a df       	rcall	.-396    	; 0x1c2 <mcp2515_write_register>
    mcp2515_bit_modify( CANCTRL, 0xE0, 0 );		// set to normal mode		
 34e:	8f e0       	ldi	r24, 0x0F	; 15
 350:	60 ee       	ldi	r22, 0xE0	; 224
 352:	40 e0       	ldi	r20, 0x00	; 0
 354:	73 df       	rcall	.-282    	; 0x23c <mcp2515_bit_modify>
}
 356:	0f 90       	pop	r0
 358:	0f 90       	pop	r0
 35a:	0f 90       	pop	r0
 35c:	0f 90       	pop	r0
 35e:	cf 91       	pop	r28
 360:	df 91       	pop	r29
 362:	1f 91       	pop	r17
 364:	0f 91       	pop	r16
 366:	08 95       	ret

00000368 <mcp2515_read_register_p>:
    SPI_CS_H;
}


void mcp2515_read_register_p( unsigned char adress, unsigned char *data, unsigned char length )
{
 368:	98 2f       	mov	r25, r24
    unsigned char i;
    SPI_CS_L;
 36a:	2a 98       	cbi	0x05, 2	; 5
    mcp2515_bit_modify( CANCTRL, 0xE0, 0 );		// set to normal mode		
}

unsigned char spi_putc( unsigned char data )
{
    SPDR = data;
 36c:	83 e0       	ldi	r24, 0x03	; 3
 36e:	8e bd       	out	0x2e, r24	; 46
    while( !( SPSR & (1<<SPIF) ) );
 370:	0d b4       	in	r0, 0x2d	; 45
 372:	07 fe       	sbrs	r0, 7
 374:	fd cf       	rjmp	.-6      	; 0x370 <mcp2515_read_register_p+0x8>
    return SPDR;
 376:	8e b5       	in	r24, 0x2e	; 46
    mcp2515_bit_modify( CANCTRL, 0xE0, 0 );		// set to normal mode		
}

unsigned char spi_putc( unsigned char data )
{
    SPDR = data;
 378:	9e bd       	out	0x2e, r25	; 46
    while( !( SPSR & (1<<SPIF) ) );
 37a:	0d b4       	in	r0, 0x2d	; 45
 37c:	07 fe       	sbrs	r0, 7
 37e:	fd cf       	rjmp	.-6      	; 0x37a <mcp2515_read_register_p+0x12>
    return SPDR;
 380:	8e b5       	in	r24, 0x2e	; 46
 382:	fb 01       	movw	r30, r22
    mcp2515_bit_modify( CANCTRL, 0xE0, 0 );		// set to normal mode		
}

unsigned char spi_putc( unsigned char data )
{
    SPDR = data;
 384:	9f ef       	ldi	r25, 0xFF	; 255
 386:	06 c0       	rjmp	.+12     	; 0x394 <mcp2515_read_register_p+0x2c>
 388:	9e bd       	out	0x2e, r25	; 46
    while( !( SPSR & (1<<SPIF) ) );
 38a:	0d b4       	in	r0, 0x2d	; 45
 38c:	07 fe       	sbrs	r0, 7
 38e:	fd cf       	rjmp	.-6      	; 0x38a <mcp2515_read_register_p+0x22>
    return SPDR;
 390:	8e b5       	in	r24, 0x2e	; 46
    unsigned char i;
    SPI_CS_L;
    spi_putc(SPI_READ);
    spi_putc(adress);
    for (i=0; i<length ;i++ )
        *data++ = spi_putc(0xff);
 392:	81 93       	st	Z+, r24
{
    unsigned char i;
    SPI_CS_L;
    spi_putc(SPI_READ);
    spi_putc(adress);
    for (i=0; i<length ;i++ )
 394:	8e 2f       	mov	r24, r30
 396:	86 1b       	sub	r24, r22
 398:	84 17       	cp	r24, r20
 39a:	b0 f3       	brcs	.-20     	; 0x388 <mcp2515_read_register_p+0x20>
        *data++ = spi_putc(0xff);
    SPI_CS_H;
 39c:	2a 9a       	sbi	0x05, 2	; 5
}
 39e:	08 95       	ret

000003a0 <can_send_message>:
#include "can.h"
void can_send_message( uint32_t id, uint8_t *data, uint8_t length, uint8_t flags);

void can_send_message( uint32_t id, uint8_t *data, uint8_t length, uint8_t flags)
{
 3a0:	af 92       	push	r10
 3a2:	bf 92       	push	r11
 3a4:	cf 92       	push	r12
 3a6:	df 92       	push	r13
 3a8:	ef 92       	push	r14
 3aa:	ff 92       	push	r15
 3ac:	0f 93       	push	r16
 3ae:	1f 93       	push	r17
 3b0:	df 93       	push	r29
 3b2:	cf 93       	push	r28
 3b4:	00 d0       	rcall	.+0      	; 0x3b6 <can_send_message+0x16>
 3b6:	00 d0       	rcall	.+0      	; 0x3b8 <can_send_message+0x18>
 3b8:	cd b7       	in	r28, 0x3d	; 61
 3ba:	de b7       	in	r29, 0x3e	; 62
 3bc:	6b 01       	movw	r12, r22
 3be:	7c 01       	movw	r14, r24
 3c0:	5a 01       	movw	r10, r20
 3c2:	12 2f       	mov	r17, r18
    uint8_t temp[4];

    if (length > 8)
 3c4:	29 30       	cpi	r18, 0x09	; 9
 3c6:	08 f0       	brcs	.+2      	; 0x3ca <can_send_message+0x2a>
 3c8:	10 e0       	ldi	r17, 0x00	; 0
        length = 0;

    /* Nachrichten Buffer auf Höchste Priorität einstellen */
    mcp2515_bit_modify( TXB0CTRL, (1<<TXP1)|(1<<TXP0), (1<<TXP1)|(1<<TXP0) );
 3ca:	80 e3       	ldi	r24, 0x30	; 48
 3cc:	63 e0       	ldi	r22, 0x03	; 3
 3ce:	43 e0       	ldi	r20, 0x03	; 3
 3d0:	35 df       	rcall	.-406    	; 0x23c <mcp2515_bit_modify>

    /* Identifier einstellen */
    if (flags & CAN_EID)
 3d2:	06 ff       	sbrs	r16, 6
 3d4:	22 c0       	rjmp	.+68     	; 0x41a <can_send_message+0x7a>
    {
        temp[0] = (uint8_t) (id>>21);
 3d6:	d7 01       	movw	r26, r14
 3d8:	c6 01       	movw	r24, r12
 3da:	e5 e1       	ldi	r30, 0x15	; 21
 3dc:	b6 95       	lsr	r27
 3de:	a7 95       	ror	r26
 3e0:	97 95       	ror	r25
 3e2:	87 95       	ror	r24
 3e4:	ea 95       	dec	r30
 3e6:	d1 f7       	brne	.-12     	; 0x3dc <can_send_message+0x3c>
 3e8:	89 83       	std	Y+1, r24	; 0x01
        temp[1] = (((uint8_t) (id>>16)) & 0x03) | (((uint8_t) (id>>13)) & 0xE0) | (1<<EXIDE);
 3ea:	c7 01       	movw	r24, r14
 3ec:	aa 27       	eor	r26, r26
 3ee:	bb 27       	eor	r27, r27
 3f0:	83 70       	andi	r24, 0x03	; 3
 3f2:	a7 01       	movw	r20, r14
 3f4:	96 01       	movw	r18, r12
 3f6:	6d e0       	ldi	r22, 0x0D	; 13
 3f8:	56 95       	lsr	r21
 3fa:	47 95       	ror	r20
 3fc:	37 95       	ror	r19
 3fe:	27 95       	ror	r18
 400:	6a 95       	dec	r22
 402:	d1 f7       	brne	.-12     	; 0x3f8 <can_send_message+0x58>
 404:	20 7e       	andi	r18, 0xE0	; 224
 406:	82 2b       	or	r24, r18
 408:	88 60       	ori	r24, 0x08	; 8
 40a:	8a 83       	std	Y+2, r24	; 0x02
        temp[2] = (uint8_t) (id>>8);
 40c:	bb 27       	eor	r27, r27
 40e:	af 2d       	mov	r26, r15
 410:	9e 2d       	mov	r25, r14
 412:	8d 2d       	mov	r24, r13
 414:	8b 83       	std	Y+3, r24	; 0x03
        temp[3] = (uint8_t) id;
 416:	cc 82       	std	Y+4, r12	; 0x04
 418:	11 c0       	rjmp	.+34     	; 0x43c <can_send_message+0x9c>
    }
    else
    {
        temp[0] = (uint8_t) (id>>3);
 41a:	d7 01       	movw	r26, r14
 41c:	c6 01       	movw	r24, r12
 41e:	23 e0       	ldi	r18, 0x03	; 3
 420:	b6 95       	lsr	r27
 422:	a7 95       	ror	r26
 424:	97 95       	ror	r25
 426:	87 95       	ror	r24
 428:	2a 95       	dec	r18
 42a:	d1 f7       	brne	.-12     	; 0x420 <can_send_message+0x80>
 42c:	89 83       	std	Y+1, r24	; 0x01
        temp[1] = (uint8_t) (id<<5);
 42e:	8c 2d       	mov	r24, r12
 430:	82 95       	swap	r24
 432:	88 0f       	add	r24, r24
 434:	80 7e       	andi	r24, 0xE0	; 224
 436:	8a 83       	std	Y+2, r24	; 0x02
        temp[2] = 0;
 438:	1b 82       	std	Y+3, r1	; 0x03
        temp[3] = 0;
 43a:	1c 82       	std	Y+4, r1	; 0x04
    }
    mcp2515_write_register_p( TXB0SIDH, temp, 4 );
 43c:	81 e3       	ldi	r24, 0x31	; 49
 43e:	be 01       	movw	r22, r28
 440:	6f 5f       	subi	r22, 0xFF	; 255
 442:	7f 4f       	sbci	r23, 0xFF	; 255
 444:	44 e0       	ldi	r20, 0x04	; 4
 446:	13 df       	rcall	.-474    	; 0x26e <mcp2515_write_register_p>


    if (flags & CAN_RTR)
 448:	07 ff       	sbrs	r16, 7
 44a:	04 c0       	rjmp	.+8      	; 0x454 <can_send_message+0xb4>
        mcp2515_write_register( TXB0DLC, length | (1<<RTR) );
 44c:	61 2f       	mov	r22, r17
 44e:	60 64       	ori	r22, 0x40	; 64
 450:	85 e3       	ldi	r24, 0x35	; 53
 452:	02 c0       	rjmp	.+4      	; 0x458 <can_send_message+0xb8>
    else
        mcp2515_write_register( TXB0DLC, length );
 454:	85 e3       	ldi	r24, 0x35	; 53
 456:	61 2f       	mov	r22, r17
 458:	b4 de       	rcall	.-664    	; 0x1c2 <mcp2515_write_register>

    mcp2515_write_register_p( TXB0D0, data, length );
 45a:	86 e3       	ldi	r24, 0x36	; 54
 45c:	b5 01       	movw	r22, r10
 45e:	41 2f       	mov	r20, r17
 460:	06 df       	rcall	.-500    	; 0x26e <mcp2515_write_register_p>

    PORTB &= ~(1<<SPI_CS);
 462:	2a 98       	cbi	0x05, 2	; 5
    spi_putc(SPI_RTS | 0x01);
 464:	81 e8       	ldi	r24, 0x81	; 129
 466:	a7 de       	rcall	.-690    	; 0x1b6 <spi_putc>
    PORTB |= (1<<SPI_CS);
 468:	2a 9a       	sbi	0x05, 2	; 5
}
 46a:	0f 90       	pop	r0
 46c:	0f 90       	pop	r0
 46e:	0f 90       	pop	r0
 470:	0f 90       	pop	r0
 472:	cf 91       	pop	r28
 474:	df 91       	pop	r29
 476:	1f 91       	pop	r17
 478:	0f 91       	pop	r16
 47a:	ff 90       	pop	r15
 47c:	ef 90       	pop	r14
 47e:	df 90       	pop	r13
 480:	cf 90       	pop	r12
 482:	bf 90       	pop	r11
 484:	af 90       	pop	r10
 486:	08 95       	ret

00000488 <uart_init>:
void uart_put_hex(unsigned char wert);

void uart_init(void)
{
	
	UBRR0H = (unsigned char) (UBRR_BAUD>>8);
 488:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = (unsigned char) UBRR_BAUD & 0x00FF;
 48c:	8b e0       	ldi	r24, 0x0B	; 11
 48e:	80 93 c4 00 	sts	0x00C4, r24
    UCSR0B = 1<<RXEN0 | 1<<TXEN0 | 1<<RXCIE0;
 492:	88 e9       	ldi	r24, 0x98	; 152
 494:	80 93 c1 00 	sts	0x00C1, r24
    UCSR0C = 1<<UCSZ00 | 1<<UCSZ01;
 498:	86 e0       	ldi	r24, 0x06	; 6
 49a:	80 93 c2 00 	sts	0x00C2, r24
}
 49e:	08 95       	ret

000004a0 <uart_putc>:


void uart_putc(unsigned char data)
{
 4a0:	1f 93       	push	r17
 4a2:	18 2f       	mov	r17, r24
    unsigned char tmphead;
    if (data == '\n')
 4a4:	8a 30       	cpi	r24, 0x0A	; 10
 4a6:	11 f4       	brne	.+4      	; 0x4ac <uart_putc+0xc>
        uart_putc('\r');
 4a8:	8d e0       	ldi	r24, 0x0D	; 13
 4aa:	fa df       	rcall	.-12     	; 0x4a0 <uart_putc>
    tmphead  = (tx_head + 1) & TX_BUF_MASK;
 4ac:	90 91 00 01 	lds	r25, 0x0100
 4b0:	9f 5f       	subi	r25, 0xFF	; 255
 4b2:	9f 71       	andi	r25, 0x1F	; 31
    while ( tmphead == tx_tail );
 4b4:	80 91 01 01 	lds	r24, 0x0101
 4b8:	98 17       	cp	r25, r24
 4ba:	e1 f3       	breq	.-8      	; 0x4b4 <uart_putc+0x14>
    tx_buf[tmphead] = data;
 4bc:	e9 2f       	mov	r30, r25
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	ee 5f       	subi	r30, 0xFE	; 254
 4c2:	fe 4f       	sbci	r31, 0xFE	; 254
 4c4:	10 83       	st	Z, r17
    tx_head = tmphead;
 4c6:	90 93 00 01 	sts	0x0100, r25
    UCSR0B |= (1<<UDRIE0);
 4ca:	80 91 c1 00 	lds	r24, 0x00C1
 4ce:	80 62       	ori	r24, 0x20	; 32
 4d0:	80 93 c1 00 	sts	0x00C1, r24
}
 4d4:	1f 91       	pop	r17
 4d6:	08 95       	ret

000004d8 <uart_puts_p>:


void uart_puts_p(const char *progmem_s)
{
 4d8:	cf 93       	push	r28
 4da:	df 93       	push	r29
 4dc:	ec 01       	movw	r28, r24
 4de:	01 c0       	rjmp	.+2      	; 0x4e2 <uart_puts_p+0xa>
    char c;
    while ( (c = pgm_read_byte(progmem_s++)) )
        uart_putc(c);
 4e0:	df df       	rcall	.-66     	; 0x4a0 <uart_putc>
 4e2:	fe 01       	movw	r30, r28


void uart_puts_p(const char *progmem_s)
{
    char c;
    while ( (c = pgm_read_byte(progmem_s++)) )
 4e4:	21 96       	adiw	r28, 0x01	; 1
 4e6:	84 91       	lpm	r24, Z+
 4e8:	88 23       	and	r24, r24
 4ea:	d1 f7       	brne	.-12     	; 0x4e0 <uart_puts_p+0x8>
        uart_putc(c);
}
 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
 4f0:	08 95       	ret

000004f2 <uart_put_dec>:


void uart_put_dec(uint16_t wert, unsigned char anzahl, unsigned char fuell)
{
 4f2:	df 92       	push	r13
 4f4:	ef 92       	push	r14
 4f6:	ff 92       	push	r15
 4f8:	0f 93       	push	r16
 4fa:	1f 93       	push	r17
 4fc:	df 93       	push	r29
 4fe:	cf 93       	push	r28
 500:	cd b7       	in	r28, 0x3d	; 61
 502:	de b7       	in	r29, 0x3e	; 62
 504:	2a 97       	sbiw	r28, 0x0a	; 10
 506:	0f b6       	in	r0, 0x3f	; 63
 508:	f8 94       	cli
 50a:	de bf       	out	0x3e, r29	; 62
 50c:	0f be       	out	0x3f, r0	; 63
 50e:	cd bf       	out	0x3d, r28	; 61
 510:	38 2f       	mov	r19, r24
 512:	29 2f       	mov	r18, r25
 514:	d6 2e       	mov	r13, r22
 516:	06 2f       	mov	r16, r22
 518:	10 e0       	ldi	r17, 0x00	; 0
 51a:	fe 01       	movw	r30, r28
 51c:	31 96       	adiw	r30, 0x01	; 1
 51e:	e0 0f       	add	r30, r16
 520:	f1 1f       	adc	r31, r17
 522:	0e c0       	rjmp	.+28     	; 0x540 <uart_put_dec+0x4e>
    unsigned char i, s[10];
    for (i = 0; i < anzahl; i++)
    {
        s[anzahl - i - 1] = '0' + (wert % 10);
 524:	83 2f       	mov	r24, r19
 526:	92 2f       	mov	r25, r18
 528:	6a e0       	ldi	r22, 0x0A	; 10
 52a:	70 e0       	ldi	r23, 0x00	; 0
 52c:	8c d0       	rcall	.+280    	; 0x646 <__udivmodhi4>
 52e:	80 5d       	subi	r24, 0xD0	; 208
 530:	80 83       	st	Z, r24
        wert /= 10;
 532:	83 2f       	mov	r24, r19
 534:	92 2f       	mov	r25, r18
 536:	6a e0       	ldi	r22, 0x0A	; 10
 538:	70 e0       	ldi	r23, 0x00	; 0
 53a:	85 d0       	rcall	.+266    	; 0x646 <__udivmodhi4>
 53c:	36 2f       	mov	r19, r22
 53e:	27 2f       	mov	r18, r23
 540:	31 97       	sbiw	r30, 0x01	; 1


void uart_put_dec(uint16_t wert, unsigned char anzahl, unsigned char fuell)
{
    unsigned char i, s[10];
    for (i = 0; i < anzahl; i++)
 542:	ec 17       	cp	r30, r28
 544:	fd 07       	cpc	r31, r29
 546:	71 f7       	brne	.-36     	; 0x524 <uart_put_dec+0x32>
 548:	20 e0       	ldi	r18, 0x00	; 0
    {
        s[anzahl - i - 1] = '0' + (wert % 10);
        wert /= 10;
    }

    for (i=0; i<(anzahl - 1); i++)
 54a:	b8 01       	movw	r22, r16
 54c:	61 50       	subi	r22, 0x01	; 1
 54e:	70 40       	sbci	r23, 0x00	; 0
    {
        if (s[i] == '0')
 550:	de 01       	movw	r26, r28
 552:	11 96       	adiw	r26, 0x01	; 1
 554:	0e c0       	rjmp	.+28     	; 0x572 <uart_put_dec+0x80>
 556:	fd 01       	movw	r30, r26
 558:	e8 0f       	add	r30, r24
 55a:	f9 1f       	adc	r31, r25
 55c:	80 81       	ld	r24, Z
 55e:	80 33       	cpi	r24, 0x30	; 48
 560:	31 f0       	breq	.+12     	; 0x56e <uart_put_dec+0x7c>
 562:	7e 01       	movw	r14, r28
 564:	08 94       	sec
 566:	e1 1c       	adc	r14, r1
 568:	f1 1c       	adc	r15, r1
 56a:	87 01       	movw	r16, r14
 56c:	0c c0       	rjmp	.+24     	; 0x586 <uart_put_dec+0x94>
            s[i] = fuell;
 56e:	40 83       	st	Z, r20
    {
        s[anzahl - i - 1] = '0' + (wert % 10);
        wert /= 10;
    }

    for (i=0; i<(anzahl - 1); i++)
 570:	2f 5f       	subi	r18, 0xFF	; 255
 572:	82 2f       	mov	r24, r18
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	86 17       	cp	r24, r22
 578:	97 07       	cpc	r25, r23
 57a:	6c f3       	brlt	.-38     	; 0x556 <uart_put_dec+0x64>
 57c:	f2 cf       	rjmp	.-28     	; 0x562 <uart_put_dec+0x70>
        else
            break;
    }

    for (i=0; i<anzahl; i++)
        uart_putc(s[i]);
 57e:	f8 01       	movw	r30, r16
 580:	81 91       	ld	r24, Z+
 582:	8f 01       	movw	r16, r30
 584:	8d df       	rcall	.-230    	; 0x4a0 <uart_putc>
            s[i] = fuell;
        else
            break;
    }

    for (i=0; i<anzahl; i++)
 586:	80 2f       	mov	r24, r16
 588:	8e 19       	sub	r24, r14
 58a:	8d 15       	cp	r24, r13
 58c:	c0 f3       	brcs	.-16     	; 0x57e <uart_put_dec+0x8c>
        uart_putc(s[i]);
}
 58e:	2a 96       	adiw	r28, 0x0a	; 10
 590:	0f b6       	in	r0, 0x3f	; 63
 592:	f8 94       	cli
 594:	de bf       	out	0x3e, r29	; 62
 596:	0f be       	out	0x3f, r0	; 63
 598:	cd bf       	out	0x3d, r28	; 61
 59a:	cf 91       	pop	r28
 59c:	df 91       	pop	r29
 59e:	1f 91       	pop	r17
 5a0:	0f 91       	pop	r16
 5a2:	ff 90       	pop	r15
 5a4:	ef 90       	pop	r14
 5a6:	df 90       	pop	r13
 5a8:	08 95       	ret

000005aa <uart_put_hex>:


void uart_put_hex(unsigned char wert)
{
 5aa:	1f 93       	push	r17
 5ac:	28 2f       	mov	r18, r24
    unsigned char hi,low;

    /* Obere 4-bit */
    hi = wert & 0xf0;
    hi >>= 4;
 5ae:	98 2f       	mov	r25, r24
 5b0:	92 95       	swap	r25
 5b2:	9f 70       	andi	r25, 0x0F	; 15
    hi += '0';
 5b4:	89 2f       	mov	r24, r25
 5b6:	80 5d       	subi	r24, 0xD0	; 208
    if ( hi > '9')
 5b8:	8a 33       	cpi	r24, 0x3A	; 58
 5ba:	08 f0       	brcs	.+2      	; 0x5be <uart_put_hex+0x14>
        hi += 7;				// A..F
 5bc:	89 5f       	subi	r24, 0xF9	; 249

    /* Untere 4-bit */
    low = ( wert & 0x0f ) + '0';
 5be:	92 2f       	mov	r25, r18
 5c0:	9f 70       	andi	r25, 0x0F	; 15
 5c2:	19 2f       	mov	r17, r25
 5c4:	10 5d       	subi	r17, 0xD0	; 208
    if (low > '9')
 5c6:	1a 33       	cpi	r17, 0x3A	; 58
 5c8:	08 f0       	brcs	.+2      	; 0x5cc <uart_put_hex+0x22>
        low += 7;				// A..F
 5ca:	19 5f       	subi	r17, 0xF9	; 249
    uart_putc(hi);
 5cc:	69 df       	rcall	.-302    	; 0x4a0 <uart_putc>
    uart_putc(low);
 5ce:	81 2f       	mov	r24, r17
 5d0:	67 df       	rcall	.-306    	; 0x4a0 <uart_putc>
}
 5d2:	1f 91       	pop	r17
 5d4:	08 95       	ret

000005d6 <__vector_18>:

SIGNAL(USART_RX_vect)          // ´®¿ÚÖÐ¶Ï½ÓÊÕ
{
 5d6:	1f 92       	push	r1
 5d8:	0f 92       	push	r0
 5da:	0f b6       	in	r0, 0x3f	; 63
 5dc:	0f 92       	push	r0
 5de:	11 24       	eor	r1, r1
 5e0:	8f 93       	push	r24
    unsigned char buffer;
    buffer = UDR0;
 5e2:	80 91 c6 00 	lds	r24, 0x00C6
}
 5e6:	8f 91       	pop	r24
 5e8:	0f 90       	pop	r0
 5ea:	0f be       	out	0x3f, r0	; 63
 5ec:	0f 90       	pop	r0
 5ee:	1f 90       	pop	r1
 5f0:	18 95       	reti

000005f2 <__vector_20>:

SIGNAL(USART_TX_vect)           // ÖÐ¶Ï·¢ËÍ
{
 5f2:	1f 92       	push	r1
 5f4:	0f 92       	push	r0
 5f6:	0f b6       	in	r0, 0x3f	; 63
 5f8:	0f 92       	push	r0
 5fa:	11 24       	eor	r1, r1
 5fc:	8f 93       	push	r24
 5fe:	9f 93       	push	r25
 600:	ef 93       	push	r30
 602:	ff 93       	push	r31
    unsigned char tmptail;
    if ( tx_head != tx_tail )
 604:	90 91 00 01 	lds	r25, 0x0100
 608:	80 91 01 01 	lds	r24, 0x0101
 60c:	98 17       	cp	r25, r24
 60e:	69 f0       	breq	.+26     	; 0x62a <__vector_20+0x38>
    {
        tmptail = (tx_tail + 1) & TX_BUF_MASK;
 610:	e0 91 01 01 	lds	r30, 0x0101
 614:	ef 5f       	subi	r30, 0xFF	; 255
 616:	ef 71       	andi	r30, 0x1F	; 31
        tx_tail = tmptail;
 618:	e0 93 01 01 	sts	0x0101, r30
        UDR0 = tx_buf[tmptail];  /* Starte Übertragung */
 61c:	f0 e0       	ldi	r31, 0x00	; 0
 61e:	ee 5f       	subi	r30, 0xFE	; 254
 620:	fe 4f       	sbci	r31, 0xFE	; 254
 622:	80 81       	ld	r24, Z
 624:	80 93 c6 00 	sts	0x00C6, r24
 628:	05 c0       	rjmp	.+10     	; 0x634 <__vector_20+0x42>
    }
    else
        UCSR0B &= ~(1<<UDRIE0);
 62a:	80 91 c1 00 	lds	r24, 0x00C1
 62e:	8f 7d       	andi	r24, 0xDF	; 223
 630:	80 93 c1 00 	sts	0x00C1, r24
}
 634:	ff 91       	pop	r31
 636:	ef 91       	pop	r30
 638:	9f 91       	pop	r25
 63a:	8f 91       	pop	r24
 63c:	0f 90       	pop	r0
 63e:	0f be       	out	0x3f, r0	; 63
 640:	0f 90       	pop	r0
 642:	1f 90       	pop	r1
 644:	18 95       	reti

00000646 <__udivmodhi4>:
 646:	aa 1b       	sub	r26, r26
 648:	bb 1b       	sub	r27, r27
 64a:	51 e1       	ldi	r21, 0x11	; 17
 64c:	07 c0       	rjmp	.+14     	; 0x65c <__udivmodhi4_ep>

0000064e <__udivmodhi4_loop>:
 64e:	aa 1f       	adc	r26, r26
 650:	bb 1f       	adc	r27, r27
 652:	a6 17       	cp	r26, r22
 654:	b7 07       	cpc	r27, r23
 656:	10 f0       	brcs	.+4      	; 0x65c <__udivmodhi4_ep>
 658:	a6 1b       	sub	r26, r22
 65a:	b7 0b       	sbc	r27, r23

0000065c <__udivmodhi4_ep>:
 65c:	88 1f       	adc	r24, r24
 65e:	99 1f       	adc	r25, r25
 660:	5a 95       	dec	r21
 662:	a9 f7       	brne	.-22     	; 0x64e <__udivmodhi4_loop>
 664:	80 95       	com	r24
 666:	90 95       	com	r25
 668:	bc 01       	movw	r22, r24
 66a:	cd 01       	movw	r24, r26
 66c:	08 95       	ret

0000066e <_exit>:
 66e:	f8 94       	cli

00000670 <__stop_program>:
 670:	ff cf       	rjmp	.-2      	; 0x670 <__stop_program>
