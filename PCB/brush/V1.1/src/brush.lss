
brush.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800100  00000870  00000904  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000870  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800208  00800208  00000a0c  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000144  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ae  00000000  00000000  00000b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000024e  00000000  00000000  0000121e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008df  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001f5  00000000  00000000  00001e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000028f  00000000  00000000  00002021  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  000022b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	f1 c0       	rjmp	.+482    	; 0x1e6 <__vector_1>
   4:	76 c1       	rjmp	.+748    	; 0x2f2 <__vector_2>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	ca c0       	rjmp	.+404    	; 0x1b6 <__vector_16>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	12 e0       	ldi	r17, 0x02	; 2
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e0 e7       	ldi	r30, 0x70	; 112
  48:	f8 e0       	ldi	r31, 0x08	; 8
  4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
  50:	a8 30       	cpi	r26, 0x08	; 8
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>

00000056 <__do_clear_bss>:
  56:	12 e0       	ldi	r17, 0x02	; 2
  58:	a8 e0       	ldi	r26, 0x08	; 8
  5a:	b2 e0       	ldi	r27, 0x02	; 2
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a4 31       	cpi	r26, 0x14	; 20
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	1c d2       	rcall	.+1080   	; 0x4a0 <main>
  68:	01 c4       	rjmp	.+2050   	; 0x86c <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <PortInit>:
	DOG = 0x40,
};

void PortInit(void)
{
	DDRB =  0B00111110;		// PB1(PWMB),PB2(PWBA),PB3(D3),PB4(D4),PB5(D5)
  6c:	8e e3       	ldi	r24, 0x3E	; 62
  6e:	84 b9       	out	0x04, r24	; 4
	PORTB = 0B00000000;		
  70:	15 b8       	out	0x05, r1	; 5
	PINB =	0x00;
  72:	13 b8       	out	0x03, r1	; 3

	DDRC =  0B00001111;		// PC0(AD2H),PC1(AD1H),PC2(BD2H),PC3(BD1H),PC5(TEMP),PC6(VSA),PC7(CSA)
  74:	8f e0       	ldi	r24, 0x0F	; 15
  76:	87 b9       	out	0x07, r24	; 7
	PORTC = 0B00010000;
  78:	80 e1       	ldi	r24, 0x10	; 16
  7a:	88 b9       	out	0x08, r24	; 8
	PINC =	0x00;
  7c:	16 b8       	out	0x06, r1	; 6

	DDRD =  0B11100011;		// PD0(DRA),PD1(DRB),PD5(BEEP),PD6(DOG),PD7(FAN);
  7e:	83 ee       	ldi	r24, 0xE3	; 227
  80:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0B00000000;			
  82:	1b b8       	out	0x0b, r1	; 11
	PIND =	0x00;
  84:	19 b8       	out	0x09, r1	; 9
}
  86:	08 95       	ret

00000088 <T2Int>:

void T2Int(void)			// Bootstraps pwm
{
	TCCR2A |= 1<<COM2A1 | 1<<WGM20 | 1<<WGM21; 		// fast pwm mode
  88:	e0 eb       	ldi	r30, 0xB0	; 176
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	83 68       	ori	r24, 0x83	; 131
  90:	80 83       	st	Z, r24
	TCCR2B |= 1<<CS20;		// 8 divide
  92:	e1 eb       	ldi	r30, 0xB1	; 177
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	81 60       	ori	r24, 0x01	; 1
  9a:	80 83       	st	Z, r24
	OCR2A = 0x80;
  9c:	80 e8       	ldi	r24, 0x80	; 128
  9e:	80 93 b3 00 	sts	0x00B3, r24
}
  a2:	08 95       	ret

000000a4 <T1Int>:

void T1Int(void)					
{	
	OCR1A = OCR1B = 0x00;
  a4:	ea e8       	ldi	r30, 0x8A	; 138
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	11 82       	std	Z+1, r1	; 0x01
  aa:	10 82       	st	Z, r1
  ac:	80 81       	ld	r24, Z
  ae:	91 81       	ldd	r25, Z+1	; 0x01
  b0:	90 93 89 00 	sts	0x0089, r25
  b4:	80 93 88 00 	sts	0x0088, r24
	TCCR1A = 1<<COM1A1 | 1<<COM1B1 | 1<<WGM10;	// 8 bit  phase correction PWM (CS31 CS21 CS11 divid bit) 15.68K
  b8:	81 ea       	ldi	r24, 0xA1	; 161
  ba:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = 1<<CS10;							// 0 divid
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	80 93 81 00 	sts	0x0081, r24
}
  c4:	08 95       	ret

000000c6 <EiInit>:

void EiInit(void)
{
	EICRA = 1<<ISC10 | 1<<ISC11 | 1<<ISC00 | 1<<ISC01;
  c6:	8f e0       	ldi	r24, 0x0F	; 15
  c8:	80 93 69 00 	sts	0x0069, r24
	EIMSK = 1<<INT1 | 1<<INT0;
  cc:	83 e0       	ldi	r24, 0x03	; 3
  ce:	8d bb       	out	0x1d, r24	; 29
}
  d0:	08 95       	ret

000000d2 <ADCInit>:
* Aref voltage: 2.5V
* sampling frequency 64 divide: 172.8KHz
**************************************/
void ADCInit(void)
{
	ADMUX =  1<<REFS0 | 1<<ADLAR;	// Avcc Ref  ×ó¶ÔÆë
  d2:	80 e6       	ldi	r24, 0x60	; 96
  d4:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = 1<<ADPS2 | 1<<ADPS0 | 1<<ADEN;	//| 1<<ADATE ;		// 32·ÖÆµ
  d8:	85 e8       	ldi	r24, 0x85	; 133
  da:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB = 0x00;						
  de:	10 92 7b 00 	sts	0x007B, r1
	DIDR0 = 0xE0;			// ADC5.6.7
  e2:	80 ee       	ldi	r24, 0xE0	; 224
  e4:	80 93 7e 00 	sts	0x007E, r24
}
  e8:	08 95       	ret

000000ea <AdConvert>:

unsigned int AdConvert(unsigned char channal)
{
	ADMUX |= channal;
  ea:	90 91 7c 00 	lds	r25, 0x007C
  ee:	98 2b       	or	r25, r24
  f0:	90 93 7c 00 	sts	0x007C, r25
	ADCSRA |= 1<<ADSC;					// start converter
  f4:	80 91 7a 00 	lds	r24, 0x007A
  f8:	80 64       	ori	r24, 0x40	; 64
  fa:	80 93 7a 00 	sts	0x007A, r24
	while ((ADCSRA & 0x40));			// wait converter over  ADSC==0 on converter over
  fe:	80 91 7a 00 	lds	r24, 0x007A
 102:	86 fd       	sbrc	r24, 6
 104:	fc cf       	rjmp	.-8      	; 0xfe <AdConvert+0x14>
	ADMUX &= 0xF0;
 106:	80 91 7c 00 	lds	r24, 0x007C
 10a:	80 7f       	andi	r24, 0xF0	; 240
 10c:	80 93 7c 00 	sts	0x007C, r24
	return(ADCH);
 110:	80 91 79 00 	lds	r24, 0x0079
}
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	08 95       	ret

00000118 <display>:

void display(void)
{
	D4_ON;
 118:	2c 9a       	sbi	0x05, 4	; 5
	D5_OFF;
 11a:	2d 98       	cbi	0x05, 5	; 5
	BEEP;
 11c:	8b b1       	in	r24, 0x0b	; 11
 11e:	90 e2       	ldi	r25, 0x20	; 32
 120:	89 27       	eor	r24, r25
 122:	8b b9       	out	0x0b, r24	; 11
 124:	80 ed       	ldi	r24, 0xD0	; 208
 126:	97 e0       	ldi	r25, 0x07	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 128:	28 ec       	ldi	r18, 0xC8	; 200
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	f9 01       	movw	r30, r18
 12e:	31 97       	sbiw	r30, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <display+0x16>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 132:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 134:	d9 f7       	brne	.-10     	; 0x12c <display+0x14>
	_delay_ms(200);
	FEED_DOG;
 136:	8b b1       	in	r24, 0x0b	; 11
 138:	90 e4       	ldi	r25, 0x40	; 64
 13a:	89 27       	eor	r24, r25
 13c:	8b b9       	out	0x0b, r24	; 11
	D5_ON;
 13e:	2d 9a       	sbi	0x05, 5	; 5
	D4_OFF;
 140:	2c 98       	cbi	0x05, 4	; 5
	BEEP;
 142:	8b b1       	in	r24, 0x0b	; 11
 144:	90 e2       	ldi	r25, 0x20	; 32
 146:	89 27       	eor	r24, r25
 148:	8b b9       	out	0x0b, r24	; 11
 14a:	80 ed       	ldi	r24, 0xD0	; 208
 14c:	97 e0       	ldi	r25, 0x07	; 7
 14e:	28 ec       	ldi	r18, 0xC8	; 200
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	f9 01       	movw	r30, r18
 154:	31 97       	sbiw	r30, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <display+0x3c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 158:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 15a:	d9 f7       	brne	.-10     	; 0x152 <display+0x3a>
	_delay_ms(200);
	FEED_DOG;
 15c:	8b b1       	in	r24, 0x0b	; 11
 15e:	90 e4       	ldi	r25, 0x40	; 64
 160:	89 27       	eor	r24, r25
 162:	8b b9       	out	0x0b, r24	; 11
	D4_ON;
 164:	2c 9a       	sbi	0x05, 4	; 5
	D5_OFF;
 166:	2d 98       	cbi	0x05, 5	; 5
	BEEP;
 168:	8b b1       	in	r24, 0x0b	; 11
 16a:	90 e2       	ldi	r25, 0x20	; 32
 16c:	89 27       	eor	r24, r25
 16e:	8b b9       	out	0x0b, r24	; 11
 170:	80 ed       	ldi	r24, 0xD0	; 208
 172:	97 e0       	ldi	r25, 0x07	; 7
 174:	28 ec       	ldi	r18, 0xC8	; 200
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	f9 01       	movw	r30, r18
 17a:	31 97       	sbiw	r30, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <display+0x62>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 17e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 180:	d9 f7       	brne	.-10     	; 0x178 <display+0x60>
	_delay_ms(200);
	FEED_DOG;
 182:	8b b1       	in	r24, 0x0b	; 11
 184:	90 e4       	ldi	r25, 0x40	; 64
 186:	89 27       	eor	r24, r25
 188:	8b b9       	out	0x0b, r24	; 11
	D5_ON;
 18a:	2d 9a       	sbi	0x05, 5	; 5
	D4_OFF;
 18c:	2c 98       	cbi	0x05, 4	; 5
	BEEP;
 18e:	8b b1       	in	r24, 0x0b	; 11
 190:	90 e2       	ldi	r25, 0x20	; 32
 192:	89 27       	eor	r24, r25
 194:	8b b9       	out	0x0b, r24	; 11
 196:	80 ed       	ldi	r24, 0xD0	; 208
 198:	97 e0       	ldi	r25, 0x07	; 7
 19a:	28 ec       	ldi	r18, 0xC8	; 200
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	f9 01       	movw	r30, r18
 1a0:	31 97       	sbiw	r30, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <display+0x88>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1a6:	d9 f7       	brne	.-10     	; 0x19e <display+0x86>
	_delay_ms(200);
	FEED_DOG;
 1a8:	8b b1       	in	r24, 0x0b	; 11
 1aa:	90 e4       	ldi	r25, 0x40	; 64
 1ac:	89 27       	eor	r24, r25
 1ae:	8b b9       	out	0x0b, r24	; 11
	D5_OFF;
 1b0:	2d 98       	cbi	0x05, 5	; 5
	BEEP_OFF;
 1b2:	5d 98       	cbi	0x0b, 5	; 11
}
 1b4:	08 95       	ret

000001b6 <__vector_16>:

volatile unsigned char  t0Count = 0;
volatile unsigned char t0Start = 0;

ISR(TIMER0_OVF_vect)
{
 1b6:	1f 92       	push	r1
 1b8:	0f 92       	push	r0
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
 1c0:	8f 93       	push	r24
	TCNT0 = 0;
 1c2:	16 bc       	out	0x26, r1	; 38
	t0Count++;
 1c4:	80 91 08 02 	lds	r24, 0x0208
 1c8:	8f 5f       	subi	r24, 0xFF	; 255
 1ca:	80 93 08 02 	sts	0x0208, r24
	if(t0Count > 100)
 1ce:	80 91 08 02 	lds	r24, 0x0208
 1d2:	85 36       	cpi	r24, 0x65	; 101
 1d4:	10 f0       	brcs	.+4      	; 0x1da <__vector_16+0x24>
		t0Count = 0;
 1d6:	10 92 08 02 	sts	0x0208, r1
}
 1da:	8f 91       	pop	r24
 1dc:	0f 90       	pop	r0
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

000001e6 <__vector_1>:
volatile unsigned char s0Ready = 0;
volatile unsigned char s1Ready = 0;
volatile unsigned char lost = 1;

ISR(INT0_vect)
{
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	2f 93       	push	r18
 1f2:	4f 93       	push	r20
 1f4:	5f 93       	push	r21
 1f6:	8f 93       	push	r24
 1f8:	9f 93       	push	r25
	if(i0Flag)		// rising 
 1fa:	80 91 00 02 	lds	r24, 0x0200
 1fe:	88 23       	and	r24, r24
 200:	91 f1       	breq	.+100    	; 0x266 <__vector_1+0x80>
	{
		if(t0Start == 0)
 202:	80 91 09 02 	lds	r24, 0x0209
 206:	88 23       	and	r24, r24
 208:	71 f4       	brne	.+28     	; 0x226 <__vector_1+0x40>
		{
			T0_ON;
 20a:	16 bc       	out	0x26, r1	; 38
 20c:	85 b5       	in	r24, 0x25	; 37
 20e:	81 60       	ori	r24, 0x01	; 1
 210:	85 bd       	out	0x25, r24	; 37
 212:	80 91 6e 00 	lds	r24, 0x006E
 216:	81 60       	ori	r24, 0x01	; 1
 218:	80 93 6e 00 	sts	0x006E, r24
			i0Start = 0;
 21c:	10 92 0f 02 	sts	0x020F, r1
 220:	10 92 0e 02 	sts	0x020E, r1
 224:	13 c0       	rjmp	.+38     	; 0x24c <__vector_1+0x66>
		}
		else
			i0Start = (((t0Count+2)<<5)+(TCNT0>>3));
 226:	80 91 08 02 	lds	r24, 0x0208
 22a:	26 b5       	in	r18, 0x26	; 38
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 96       	adiw	r24, 0x02	; 2
 230:	45 e0       	ldi	r20, 0x05	; 5
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	4a 95       	dec	r20
 238:	e1 f7       	brne	.-8      	; 0x232 <__vector_1+0x4c>
 23a:	26 95       	lsr	r18
 23c:	26 95       	lsr	r18
 23e:	26 95       	lsr	r18
 240:	82 0f       	add	r24, r18
 242:	91 1d       	adc	r25, r1
 244:	90 93 0f 02 	sts	0x020F, r25
 248:	80 93 0e 02 	sts	0x020E, r24
		t0Start++;
 24c:	80 91 09 02 	lds	r24, 0x0209
 250:	8f 5f       	subi	r24, 0xFF	; 255
 252:	80 93 09 02 	sts	0x0209, r24
		EICRA &= ~(1<<ISC00);		// change to falling
 256:	80 91 69 00 	lds	r24, 0x0069
 25a:	8e 7f       	andi	r24, 0xFE	; 254
 25c:	80 93 69 00 	sts	0x0069, r24
		i0Flag = 0;
 260:	10 92 00 02 	sts	0x0200, r1
 264:	3c c0       	rjmp	.+120    	; 0x2de <__vector_1+0xf8>
	}
	else 
	{	
		s0Count = ((((t0Count+2)<<5)+(TCNT0>>3)) - i0Start);			// get ppm count time 
 266:	80 91 08 02 	lds	r24, 0x0208
 26a:	26 b5       	in	r18, 0x26	; 38
 26c:	40 91 0e 02 	lds	r20, 0x020E
 270:	50 91 0f 02 	lds	r21, 0x020F
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	02 96       	adiw	r24, 0x02	; 2
 278:	68 94       	set
 27a:	14 f8       	bld	r1, 4
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	16 94       	lsr	r1
 282:	e1 f7       	brne	.-8      	; 0x27c <__vector_1+0x96>
 284:	26 95       	lsr	r18
 286:	26 95       	lsr	r18
 288:	26 95       	lsr	r18
 28a:	82 0f       	add	r24, r18
 28c:	91 1d       	adc	r25, r1
 28e:	84 1b       	sub	r24, r20
 290:	95 0b       	sbc	r25, r21
 292:	90 93 0b 02 	sts	0x020B, r25
 296:	80 93 0a 02 	sts	0x020A, r24
		t0Start--;
 29a:	80 91 09 02 	lds	r24, 0x0209
 29e:	81 50       	subi	r24, 0x01	; 1
 2a0:	80 93 09 02 	sts	0x0209, r24
		if(t0Start == 0)
 2a4:	80 91 09 02 	lds	r24, 0x0209
 2a8:	88 23       	and	r24, r24
 2aa:	51 f4       	brne	.+20     	; 0x2c0 <__vector_1+0xda>
		{
			t0Count = 0;
 2ac:	10 92 08 02 	sts	0x0208, r1
			T0_OFF;
 2b0:	85 b5       	in	r24, 0x25	; 37
 2b2:	8d 7f       	andi	r24, 0xFD	; 253
 2b4:	85 bd       	out	0x25, r24	; 37
 2b6:	80 91 6e 00 	lds	r24, 0x006E
 2ba:	8e 7f       	andi	r24, 0xFE	; 254
 2bc:	80 93 6e 00 	sts	0x006E, r24
		}
		s0Ready=1;
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	80 93 12 02 	sts	0x0212, r24
		lost |= 0x1;
 2c6:	90 91 02 02 	lds	r25, 0x0202
 2ca:	91 60       	ori	r25, 0x01	; 1
 2cc:	90 93 02 02 	sts	0x0202, r25
		EICRA |= (1<<ISC00);	 // change to rising request
 2d0:	90 91 69 00 	lds	r25, 0x0069
 2d4:	91 60       	ori	r25, 0x01	; 1
 2d6:	90 93 69 00 	sts	0x0069, r25
		i0Flag = 1;
 2da:	80 93 00 02 	sts	0x0200, r24
	}

}	
 2de:	9f 91       	pop	r25
 2e0:	8f 91       	pop	r24
 2e2:	5f 91       	pop	r21
 2e4:	4f 91       	pop	r20
 2e6:	2f 91       	pop	r18
 2e8:	0f 90       	pop	r0
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	0f 90       	pop	r0
 2ee:	1f 90       	pop	r1
 2f0:	18 95       	reti

000002f2 <__vector_2>:

ISR(INT1_vect)
{
 2f2:	1f 92       	push	r1
 2f4:	0f 92       	push	r0
 2f6:	0f b6       	in	r0, 0x3f	; 63
 2f8:	0f 92       	push	r0
 2fa:	11 24       	eor	r1, r1
 2fc:	2f 93       	push	r18
 2fe:	4f 93       	push	r20
 300:	5f 93       	push	r21
 302:	8f 93       	push	r24
 304:	9f 93       	push	r25
	if(i1Flag)		// rising 
 306:	80 91 01 02 	lds	r24, 0x0201
 30a:	88 23       	and	r24, r24
 30c:	91 f1       	breq	.+100    	; 0x372 <__stack+0x73>
	{
		if(t0Start == 0)
 30e:	80 91 09 02 	lds	r24, 0x0209
 312:	88 23       	and	r24, r24
 314:	71 f4       	brne	.+28     	; 0x332 <__stack+0x33>
		{
			T0_ON;
 316:	16 bc       	out	0x26, r1	; 38
 318:	85 b5       	in	r24, 0x25	; 37
 31a:	81 60       	ori	r24, 0x01	; 1
 31c:	85 bd       	out	0x25, r24	; 37
 31e:	80 91 6e 00 	lds	r24, 0x006E
 322:	81 60       	ori	r24, 0x01	; 1
 324:	80 93 6e 00 	sts	0x006E, r24
			i1Start = 0;
 328:	10 92 11 02 	sts	0x0211, r1
 32c:	10 92 10 02 	sts	0x0210, r1
 330:	13 c0       	rjmp	.+38     	; 0x358 <__stack+0x59>
		}
		else
			i1Start = (((t0Count+2)<<5)+(TCNT0>>3));
 332:	80 91 08 02 	lds	r24, 0x0208
 336:	26 b5       	in	r18, 0x26	; 38
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	02 96       	adiw	r24, 0x02	; 2
 33c:	45 e0       	ldi	r20, 0x05	; 5
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	4a 95       	dec	r20
 344:	e1 f7       	brne	.-8      	; 0x33e <__stack+0x3f>
 346:	26 95       	lsr	r18
 348:	26 95       	lsr	r18
 34a:	26 95       	lsr	r18
 34c:	82 0f       	add	r24, r18
 34e:	91 1d       	adc	r25, r1
 350:	90 93 11 02 	sts	0x0211, r25
 354:	80 93 10 02 	sts	0x0210, r24
		t0Start++;
 358:	80 91 09 02 	lds	r24, 0x0209
 35c:	8f 5f       	subi	r24, 0xFF	; 255
 35e:	80 93 09 02 	sts	0x0209, r24
		EICRA &= ~(1<<ISC10);		// change to falling
 362:	80 91 69 00 	lds	r24, 0x0069
 366:	8b 7f       	andi	r24, 0xFB	; 251
 368:	80 93 69 00 	sts	0x0069, r24
		i1Flag = 0;
 36c:	10 92 01 02 	sts	0x0201, r1
 370:	3c c0       	rjmp	.+120    	; 0x3ea <__stack+0xeb>
	}
	else 
	{	
		s1Count = ((((t0Count+2)<<5)+(TCNT0>>3)) - i1Start);			// get ppm count time 
 372:	80 91 08 02 	lds	r24, 0x0208
 376:	26 b5       	in	r18, 0x26	; 38
 378:	40 91 10 02 	lds	r20, 0x0210
 37c:	50 91 11 02 	lds	r21, 0x0211
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	02 96       	adiw	r24, 0x02	; 2
 384:	68 94       	set
 386:	14 f8       	bld	r1, 4
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	16 94       	lsr	r1
 38e:	e1 f7       	brne	.-8      	; 0x388 <__stack+0x89>
 390:	26 95       	lsr	r18
 392:	26 95       	lsr	r18
 394:	26 95       	lsr	r18
 396:	82 0f       	add	r24, r18
 398:	91 1d       	adc	r25, r1
 39a:	84 1b       	sub	r24, r20
 39c:	95 0b       	sbc	r25, r21
 39e:	90 93 0d 02 	sts	0x020D, r25
 3a2:	80 93 0c 02 	sts	0x020C, r24
		t0Start--;
 3a6:	80 91 09 02 	lds	r24, 0x0209
 3aa:	81 50       	subi	r24, 0x01	; 1
 3ac:	80 93 09 02 	sts	0x0209, r24
		if(t0Start == 0)
 3b0:	80 91 09 02 	lds	r24, 0x0209
 3b4:	88 23       	and	r24, r24
 3b6:	51 f4       	brne	.+20     	; 0x3cc <__stack+0xcd>
		{
			t0Count = 0;
 3b8:	10 92 08 02 	sts	0x0208, r1
			T0_OFF;
 3bc:	85 b5       	in	r24, 0x25	; 37
 3be:	8d 7f       	andi	r24, 0xFD	; 253
 3c0:	85 bd       	out	0x25, r24	; 37
 3c2:	80 91 6e 00 	lds	r24, 0x006E
 3c6:	8e 7f       	andi	r24, 0xFE	; 254
 3c8:	80 93 6e 00 	sts	0x006E, r24
		}
		s1Ready = 1;
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	80 93 13 02 	sts	0x0213, r24
		lost |= 0x2;
 3d2:	90 91 02 02 	lds	r25, 0x0202
 3d6:	92 60       	ori	r25, 0x02	; 2
 3d8:	90 93 02 02 	sts	0x0202, r25
		EICRA |= (1<<ISC10);	 // change to rising request
 3dc:	90 91 69 00 	lds	r25, 0x0069
 3e0:	94 60       	ori	r25, 0x04	; 4
 3e2:	90 93 69 00 	sts	0x0069, r25
		i1Flag = 1;
 3e6:	80 93 01 02 	sts	0x0201, r24
	}
	
}
 3ea:	9f 91       	pop	r25
 3ec:	8f 91       	pop	r24
 3ee:	5f 91       	pop	r21
 3f0:	4f 91       	pop	r20
 3f2:	2f 91       	pop	r18
 3f4:	0f 90       	pop	r0
 3f6:	0f be       	out	0x3f, r0	; 63
 3f8:	0f 90       	pop	r0
 3fa:	1f 90       	pop	r1
 3fc:	18 95       	reti

000003fe <move>:

void move(int LV,int RV)
{
	//if((LV&0x8000) != (history[0]&0x8000))		// 
	{
		if(LV > 0)
 3fe:	18 16       	cp	r1, r24
 400:	19 06       	cpc	r1, r25
 402:	24 f4       	brge	.+8      	; 0x40c <move+0xe>
		{
			PORTD &= ~DRA;
 404:	58 98       	cbi	0x0b, 0	; 11
			PORTC |= AD1H;		// AD1H close
 406:	41 9a       	sbi	0x08, 1	; 8
			PORTC &= ~AD2H;		// AD2H open
 408:	40 98       	cbi	0x08, 0	; 8
 40a:	03 c0       	rjmp	.+6      	; 0x412 <move+0x14>
		}
		else
		{
			PORTD |= DRA;
 40c:	58 9a       	sbi	0x0b, 0	; 11
			PORTC |= AD2H;
 40e:	40 9a       	sbi	0x08, 0	; 8
			PORTC &= ~AD1H;
 410:	41 98       	cbi	0x08, 1	; 8
		}
		history[0] = LV;
 412:	90 93 04 02 	sts	0x0204, r25
 416:	80 93 03 02 	sts	0x0203, r24
	}
	
	//if((RV&0x8000) != (history[1]&0x8000))
	{
		if(RV > 0)
 41a:	16 16       	cp	r1, r22
 41c:	17 06       	cpc	r1, r23
 41e:	24 f4       	brge	.+8      	; 0x428 <move+0x2a>
		{
			PORTD &= ~DRB;
 420:	59 98       	cbi	0x0b, 1	; 11
			PORTC |= BD1H;
 422:	43 9a       	sbi	0x08, 3	; 8
			PORTC &= ~BD2H;
 424:	42 98       	cbi	0x08, 2	; 8
 426:	03 c0       	rjmp	.+6      	; 0x42e <move+0x30>
		}
		else
		{
			PORTD |= DRB;
 428:	59 9a       	sbi	0x0b, 1	; 11
			PORTC |= BD2H;
 42a:	42 9a       	sbi	0x08, 2	; 8
			PORTC &= ~BD1H;
 42c:	43 98       	cbi	0x08, 3	; 8
		}
		history[1] = RV;
 42e:	70 93 06 02 	sts	0x0206, r23
 432:	60 93 05 02 	sts	0x0205, r22
	}
	
	LV = abs(LV);
 436:	97 ff       	sbrs	r25, 7
 438:	03 c0       	rjmp	.+6      	; 0x440 <move+0x42>
 43a:	90 95       	com	r25
 43c:	81 95       	neg	r24
 43e:	9f 4f       	sbci	r25, 0xFF	; 255
	RV = abs(RV);
 440:	77 ff       	sbrs	r23, 7
 442:	03 c0       	rjmp	.+6      	; 0x44a <move+0x4c>
 444:	70 95       	com	r23
 446:	61 95       	neg	r22
 448:	7f 4f       	sbci	r23, 0xFF	; 255
	if(LV > 508)
		LV = 508;
	if(RV > 508)
		RV = 508;

	OCR1A = LV>>1;
 44a:	21 e0       	ldi	r18, 0x01	; 1
 44c:	8d 3f       	cpi	r24, 0xFD	; 253
 44e:	92 07       	cpc	r25, r18
 450:	14 f0       	brlt	.+4      	; 0x456 <move+0x58>
 452:	8c ef       	ldi	r24, 0xFC	; 252
 454:	91 e0       	ldi	r25, 0x01	; 1
 456:	95 95       	asr	r25
 458:	87 95       	ror	r24
 45a:	90 93 89 00 	sts	0x0089, r25
 45e:	80 93 88 00 	sts	0x0088, r24
	OCR1B = RV>>1;
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	6d 3f       	cpi	r22, 0xFD	; 253
 466:	78 07       	cpc	r23, r24
 468:	14 f0       	brlt	.+4      	; 0x46e <move+0x70>
 46a:	6c ef       	ldi	r22, 0xFC	; 252
 46c:	71 e0       	ldi	r23, 0x01	; 1
 46e:	75 95       	asr	r23
 470:	67 95       	ror	r22
 472:	70 93 8b 00 	sts	0x008B, r23
 476:	60 93 8a 00 	sts	0x008A, r22
}
 47a:	08 95       	ret

0000047c <CloseHB>:

void CloseHB(void)		// close H bridge and break
{
	OCR1A = OCR1B = 0x00;
 47c:	ea e8       	ldi	r30, 0x8A	; 138
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	11 82       	std	Z+1, r1	; 0x01
 482:	10 82       	st	Z, r1
 484:	80 81       	ld	r24, Z
 486:	91 81       	ldd	r25, Z+1	; 0x01
 488:	90 93 89 00 	sts	0x0089, r25
 48c:	80 93 88 00 	sts	0x0088, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 490:	8d e0       	ldi	r24, 0x0D	; 13
 492:	8a 95       	dec	r24
 494:	f1 f7       	brne	.-4      	; 0x492 <CloseHB+0x16>
	_delay_us(5);
	PORTC &= ~AD1H;		// AD1H open
 496:	41 98       	cbi	0x08, 1	; 8
	PORTC &= ~AD2H;		// AD2H open
 498:	40 98       	cbi	0x08, 0	; 8
	PORTC &= ~BD1H;		// BD1H open
 49a:	43 98       	cbi	0x08, 3	; 8
	PORTC &= ~BD2H;		// BD2H open
 49c:	42 98       	cbi	0x08, 2	; 8
}
 49e:	08 95       	ret

000004a0 <main>:

int main(void)
{
 4a0:	2f 92       	push	r2
 4a2:	3f 92       	push	r3
 4a4:	4f 92       	push	r4
 4a6:	5f 92       	push	r5
 4a8:	6f 92       	push	r6
 4aa:	7f 92       	push	r7
 4ac:	8f 92       	push	r8
 4ae:	9f 92       	push	r9
 4b0:	af 92       	push	r10
 4b2:	bf 92       	push	r11
 4b4:	cf 92       	push	r12
 4b6:	df 92       	push	r13
 4b8:	ef 92       	push	r14
 4ba:	ff 92       	push	r15
 4bc:	0f 93       	push	r16
 4be:	1f 93       	push	r17
 4c0:	cf 93       	push	r28
 4c2:	df 93       	push	r29
	cli();
 4c4:	f8 94       	cli
	int tCount = 0;
	unsigned char overCurr = 1;
	unsigned int temp = 0;
	int cCount = 0;
	
	PortInit();
 4c6:	d2 dd       	rcall	.-1116   	; 0x6c <PortInit>
	display();
 4c8:	27 de       	rcall	.-946    	; 0x118 <display>
	OCR2A = 0x80;
}

void T1Int(void)					
{	
	OCR1A = OCR1B = 0x00;
 4ca:	10 92 8b 00 	sts	0x008B, r1
 4ce:	10 92 8a 00 	sts	0x008A, r1
 4d2:	80 91 8a 00 	lds	r24, 0x008A
 4d6:	90 91 8b 00 	lds	r25, 0x008B
 4da:	90 93 89 00 	sts	0x0089, r25
 4de:	80 93 88 00 	sts	0x0088, r24
	TCCR1A = 1<<COM1A1 | 1<<COM1B1 | 1<<WGM10;	// 8 bit  phase correction PWM (CS31 CS21 CS11 divid bit) 15.68K
 4e2:	81 ea       	ldi	r24, 0xA1	; 161
 4e4:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = 1<<CS10;							// 0 divid
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	80 93 81 00 	sts	0x0081, r24
	PIND =	0x00;
}

void T2Int(void)			// Bootstraps pwm
{
	TCCR2A |= 1<<COM2A1 | 1<<WGM20 | 1<<WGM21; 		// fast pwm mode
 4ee:	80 91 b0 00 	lds	r24, 0x00B0
 4f2:	83 68       	ori	r24, 0x83	; 131
 4f4:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= 1<<CS20;		// 8 divide
 4f8:	80 91 b1 00 	lds	r24, 0x00B1
 4fc:	81 60       	ori	r24, 0x01	; 1
 4fe:	80 93 b1 00 	sts	0x00B1, r24
	OCR2A = 0x80;
 502:	80 e8       	ldi	r24, 0x80	; 128
 504:	80 93 b3 00 	sts	0x00B3, r24
* Aref voltage: 2.5V
* sampling frequency 64 divide: 172.8KHz
**************************************/
void ADCInit(void)
{
	ADMUX =  1<<REFS0 | 1<<ADLAR;	// Avcc Ref  ×ó¶ÔÆë
 508:	80 e6       	ldi	r24, 0x60	; 96
 50a:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = 1<<ADPS2 | 1<<ADPS0 | 1<<ADEN;	//| 1<<ADATE ;		// 32·ÖÆµ
 50e:	85 e8       	ldi	r24, 0x85	; 133
 510:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB = 0x00;						
 514:	10 92 7b 00 	sts	0x007B, r1
	DIDR0 = 0xE0;			// ADC5.6.7
 518:	80 ee       	ldi	r24, 0xE0	; 224
 51a:	80 93 7e 00 	sts	0x007E, r24
	PortInit();
	display();
	T1Int();
	T2Int();
	ADCInit();
	SREG |= BIT(7);
 51e:	8f b7       	in	r24, 0x3f	; 63
 520:	80 68       	ori	r24, 0x80	; 128
 522:	8f bf       	out	0x3f, r24	; 63
	TCCR1B = 1<<CS10;							// 0 divid
}

void EiInit(void)
{
	EICRA = 1<<ISC10 | 1<<ISC11 | 1<<ISC00 | 1<<ISC01;
 524:	8f e0       	ldi	r24, 0x0F	; 15
 526:	80 93 69 00 	sts	0x0069, r24
	EIMSK = 1<<INT1 | 1<<INT0;
 52a:	83 e0       	ldi	r24, 0x03	; 3
 52c:	8d bb       	out	0x1d, r24	; 29
 52e:	40 e0       	ldi	r20, 0x00	; 0
 530:	50 e0       	ldi	r21, 0x00	; 0
 532:	20 e0       	ldi	r18, 0x00	; 0
 534:	30 e0       	ldi	r19, 0x00	; 0
	EiInit();
	
//	move(0,0);		// init hitory
	while(1)		// drop six time signal
	{
		FEED_DOG;
 536:	e0 e4       	ldi	r30, 0x40	; 64
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 538:	68 ee       	ldi	r22, 0xE8	; 232
 53a:	73 e0       	ldi	r23, 0x03	; 3
 53c:	8b b1       	in	r24, 0x0b	; 11
 53e:	8e 27       	eor	r24, r30
 540:	8b b9       	out	0x0b, r24	; 11
		if(lost==3)
 542:	80 91 02 02 	lds	r24, 0x0202
 546:	83 30       	cpi	r24, 0x03	; 3
 548:	c9 f4       	brne	.+50     	; 0x57c <main+0xdc>
		{
			lost = 0;
 54a:	10 92 02 02 	sts	0x0202, r1
			if(volt++ > 6)
 54e:	47 30       	cpi	r20, 0x07	; 7
 550:	51 05       	cpc	r21, r1
 552:	18 f4       	brcc	.+6      	; 0x55a <main+0xba>
 554:	4f 5f       	subi	r20, 0xFF	; 255
 556:	5f 4f       	sbci	r21, 0xFF	; 255
 558:	11 c0       	rjmp	.+34     	; 0x57c <main+0xdc>
 55a:	88 24       	eor	r8, r8
 55c:	99 24       	eor	r9, r9
 55e:	66 24       	eor	r6, r6
 560:	77 24       	eor	r7, r7
 562:	aa 24       	eor	r10, r10
 564:	bb 24       	eor	r11, r11
 566:	55 24       	eor	r5, r5
 568:	53 94       	inc	r5
 56a:	cc 24       	eor	r12, r12
 56c:	dd 24       	eor	r13, r13
				if(s0Count > 511)
				{
					if(s0Count > 530)	
						s0Count = 0;
					else
						s0Count = 511;
 56e:	9f ef       	ldi	r25, 0xFF	; 255
 570:	29 2e       	mov	r2, r25
 572:	91 e0       	ldi	r25, 0x01	; 1
 574:	39 2e       	mov	r3, r25
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 576:	8d e0       	ldi	r24, 0x0D	; 13
 578:	48 2e       	mov	r4, r24
 57a:	0e c0       	rjmp	.+28     	; 0x598 <main+0xf8>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 57c:	cb 01       	movw	r24, r22
 57e:	01 97       	sbiw	r24, 0x01	; 1
 580:	f1 f7       	brne	.-4      	; 0x57e <main+0xde>
			lost = 0;
			if(volt++ > 6)
				break;
		}
		_delay_us(500);
		if(curr++ > 15000)
 582:	8a e3       	ldi	r24, 0x3A	; 58
 584:	29 39       	cpi	r18, 0x99	; 153
 586:	38 07       	cpc	r19, r24
 588:	41 f3       	breq	.-48     	; 0x55a <main+0xba>
 58a:	2f 5f       	subi	r18, 0xFF	; 255
 58c:	3f 4f       	sbci	r19, 0xFF	; 255
 58e:	d6 cf       	rjmp	.-84     	; 0x53c <main+0x9c>
		{
			tCount = 0;
			FAN_OFF;
		}

		if(lCount++ > 1400)
 590:	08 94       	sec
 592:	a1 1c       	adc	r10, r1
 594:	b1 1c       	adc	r11, r1
 596:	3e 01       	movw	r6, r28
			break;
	}
	volt = curr = 0;
	while(1)
	{
		FEED_DOG;
 598:	8b b1       	in	r24, 0x0b	; 11
 59a:	90 e4       	ldi	r25, 0x40	; 64
 59c:	89 27       	eor	r24, r25
 59e:	8b b9       	out	0x0b, r24	; 11
		if(lost==3 && overCurr)
 5a0:	80 91 02 02 	lds	r24, 0x0202
 5a4:	83 30       	cpi	r24, 0x03	; 3
 5a6:	09 f0       	breq	.+2      	; 0x5aa <main+0x10a>
 5a8:	e3 c0       	rjmp	.+454    	; 0x770 <main+0x2d0>
 5aa:	55 20       	and	r5, r5
 5ac:	09 f4       	brne	.+2      	; 0x5b0 <main+0x110>
 5ae:	e0 c0       	rjmp	.+448    	; 0x770 <main+0x2d0>
		{
			D4_BLINK;
 5b0:	85 b1       	in	r24, 0x05	; 5
 5b2:	20 e1       	ldi	r18, 0x10	; 16
 5b4:	82 27       	eor	r24, r18
 5b6:	85 b9       	out	0x05, r24	; 5
			lCount = 0;
	//		if(s1Ready)
			{
				s1Ready = 0;		
 5b8:	10 92 13 02 	sts	0x0213, r1
				s1Count -= 1500;
 5bc:	80 91 0c 02 	lds	r24, 0x020C
 5c0:	90 91 0d 02 	lds	r25, 0x020D
 5c4:	8c 5d       	subi	r24, 0xDC	; 220
 5c6:	95 40       	sbci	r25, 0x05	; 5
 5c8:	90 93 0d 02 	sts	0x020D, r25
 5cc:	80 93 0c 02 	sts	0x020C, r24
				if(s1Count > 22)
 5d0:	80 91 0c 02 	lds	r24, 0x020C
 5d4:	90 91 0d 02 	lds	r25, 0x020D
 5d8:	47 97       	sbiw	r24, 0x17	; 23
 5da:	24 f0       	brlt	.+8      	; 0x5e4 <main+0x144>
				{
					PORTD &= ~DRB;
 5dc:	59 98       	cbi	0x0b, 1	; 11
					PORTC |= BD1H;
 5de:	43 9a       	sbi	0x08, 3	; 8
					PORTC &= ~BD2H;
 5e0:	42 98       	cbi	0x08, 2	; 8
 5e2:	17 c0       	rjmp	.+46     	; 0x612 <main+0x172>
					s1Count >>= 1;
				}
				else if(s1Count < -22)
 5e4:	80 91 0c 02 	lds	r24, 0x020C
 5e8:	90 91 0d 02 	lds	r25, 0x020D
 5ec:	8a 5e       	subi	r24, 0xEA	; 234
 5ee:	9f 4f       	sbci	r25, 0xFF	; 255
 5f0:	dc f4       	brge	.+54     	; 0x628 <main+0x188>
				{
					s1Count = abs(s1Count);
 5f2:	80 91 0c 02 	lds	r24, 0x020C
 5f6:	90 91 0d 02 	lds	r25, 0x020D
 5fa:	97 ff       	sbrs	r25, 7
 5fc:	03 c0       	rjmp	.+6      	; 0x604 <main+0x164>
 5fe:	90 95       	com	r25
 600:	81 95       	neg	r24
 602:	9f 4f       	sbci	r25, 0xFF	; 255
 604:	90 93 0d 02 	sts	0x020D, r25
 608:	80 93 0c 02 	sts	0x020C, r24
					PORTD |= DRB;
 60c:	59 9a       	sbi	0x0b, 1	; 11
					PORTC |= BD2H;
 60e:	42 9a       	sbi	0x08, 2	; 8
					PORTC &= ~BD1H;
 610:	43 98       	cbi	0x08, 3	; 8
					s1Count >>= 1;
 612:	80 91 0c 02 	lds	r24, 0x020C
 616:	90 91 0d 02 	lds	r25, 0x020D
 61a:	95 95       	asr	r25
 61c:	87 95       	ror	r24
 61e:	90 93 0d 02 	sts	0x020D, r25
 622:	80 93 0c 02 	sts	0x020C, r24
 626:	0d c0       	rjmp	.+26     	; 0x642 <main+0x1a2>
				}
				else		// break;
				{
					OCR1A = 0;
 628:	10 92 89 00 	sts	0x0089, r1
 62c:	10 92 88 00 	sts	0x0088, r1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 630:	84 2d       	mov	r24, r4
 632:	8a 95       	dec	r24
 634:	f1 f7       	brne	.-4      	; 0x632 <main+0x192>
					_delay_us(5);
					PORTC &= ~BD1H;
 636:	43 98       	cbi	0x08, 3	; 8
					PORTC &= ~BD2H;
 638:	42 98       	cbi	0x08, 2	; 8
					s1Count = 0;
 63a:	10 92 0d 02 	sts	0x020D, r1
 63e:	10 92 0c 02 	sts	0x020C, r1
				}
				if(s1Count>511)
 642:	80 91 0c 02 	lds	r24, 0x020C
 646:	90 91 0d 02 	lds	r25, 0x020D
 64a:	80 50       	subi	r24, 0x00	; 0
 64c:	92 40       	sbci	r25, 0x02	; 2
 64e:	84 f0       	brlt	.+32     	; 0x670 <main+0x1d0>
				{
					if(s1Count>530)
 650:	80 91 0c 02 	lds	r24, 0x020C
 654:	90 91 0d 02 	lds	r25, 0x020D
 658:	83 51       	subi	r24, 0x13	; 19
 65a:	92 40       	sbci	r25, 0x02	; 2
 65c:	2c f0       	brlt	.+10     	; 0x668 <main+0x1c8>
						s1Count = 0;
 65e:	10 92 0d 02 	sts	0x020D, r1
 662:	10 92 0c 02 	sts	0x020C, r1
 666:	04 c0       	rjmp	.+8      	; 0x670 <main+0x1d0>
					else	
						s1Count = 511;
 668:	30 92 0d 02 	sts	0x020D, r3
 66c:	20 92 0c 02 	sts	0x020C, r2
				}
				OCR1A = porp[s1Count];
 670:	e0 91 0c 02 	lds	r30, 0x020C
 674:	f0 91 0d 02 	lds	r31, 0x020D
 678:	e0 50       	subi	r30, 0x00	; 0
 67a:	ff 4f       	sbci	r31, 0xFF	; 255
 67c:	80 81       	ld	r24, Z
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	90 93 89 00 	sts	0x0089, r25
 684:	80 93 88 00 	sts	0x0088, r24
				lost &= ~(0x2);
 688:	80 91 02 02 	lds	r24, 0x0202
 68c:	8d 7f       	andi	r24, 0xFD	; 253
 68e:	80 93 02 02 	sts	0x0202, r24
			}
		
	//		if(s0Ready)
			{
				s0Ready = 0;
 692:	10 92 12 02 	sts	0x0212, r1
				s0Count -= 1500;
 696:	80 91 0a 02 	lds	r24, 0x020A
 69a:	90 91 0b 02 	lds	r25, 0x020B
 69e:	8c 5d       	subi	r24, 0xDC	; 220
 6a0:	95 40       	sbci	r25, 0x05	; 5
 6a2:	90 93 0b 02 	sts	0x020B, r25
 6a6:	80 93 0a 02 	sts	0x020A, r24
				if(s0Count > 22)
 6aa:	80 91 0a 02 	lds	r24, 0x020A
 6ae:	90 91 0b 02 	lds	r25, 0x020B
 6b2:	47 97       	sbiw	r24, 0x17	; 23
 6b4:	24 f0       	brlt	.+8      	; 0x6be <main+0x21e>
				{
					PORTD &= ~DRA;
 6b6:	58 98       	cbi	0x0b, 0	; 11
					PORTC |= AD1H;		// AD1H close
 6b8:	41 9a       	sbi	0x08, 1	; 8
					PORTC &= ~AD2H;		// AD2H open
 6ba:	40 98       	cbi	0x08, 0	; 8
 6bc:	17 c0       	rjmp	.+46     	; 0x6ec <main+0x24c>
					s0Count >>= 1;
				}
				else if(s0Count < -22)
 6be:	80 91 0a 02 	lds	r24, 0x020A
 6c2:	90 91 0b 02 	lds	r25, 0x020B
 6c6:	8a 5e       	subi	r24, 0xEA	; 234
 6c8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ca:	dc f4       	brge	.+54     	; 0x702 <main+0x262>
				{
					s0Count = abs(s0Count);
 6cc:	80 91 0a 02 	lds	r24, 0x020A
 6d0:	90 91 0b 02 	lds	r25, 0x020B
 6d4:	97 ff       	sbrs	r25, 7
 6d6:	03 c0       	rjmp	.+6      	; 0x6de <main+0x23e>
 6d8:	90 95       	com	r25
 6da:	81 95       	neg	r24
 6dc:	9f 4f       	sbci	r25, 0xFF	; 255
 6de:	90 93 0b 02 	sts	0x020B, r25
 6e2:	80 93 0a 02 	sts	0x020A, r24
					PORTD |= DRA;
 6e6:	58 9a       	sbi	0x0b, 0	; 11
					PORTC |= AD2H;
 6e8:	40 9a       	sbi	0x08, 0	; 8
					PORTC &= ~AD1H;
 6ea:	41 98       	cbi	0x08, 1	; 8
					s0Count >>= 1;
 6ec:	80 91 0a 02 	lds	r24, 0x020A
 6f0:	90 91 0b 02 	lds	r25, 0x020B
 6f4:	95 95       	asr	r25
 6f6:	87 95       	ror	r24
 6f8:	90 93 0b 02 	sts	0x020B, r25
 6fc:	80 93 0a 02 	sts	0x020A, r24
 700:	0d c0       	rjmp	.+26     	; 0x71c <main+0x27c>
				}
				else
				{
					OCR1B = 0;
 702:	10 92 8b 00 	sts	0x008B, r1
 706:	10 92 8a 00 	sts	0x008A, r1
 70a:	84 2d       	mov	r24, r4
 70c:	8a 95       	dec	r24
 70e:	f1 f7       	brne	.-4      	; 0x70c <main+0x26c>
					_delay_us(5);
					PORTC &= ~AD1H;
 710:	41 98       	cbi	0x08, 1	; 8
					PORTC &= ~AD2H;
 712:	40 98       	cbi	0x08, 0	; 8
					s0Count = 0;
 714:	10 92 0b 02 	sts	0x020B, r1
 718:	10 92 0a 02 	sts	0x020A, r1
				}
				if(s0Count > 511)
 71c:	80 91 0a 02 	lds	r24, 0x020A
 720:	90 91 0b 02 	lds	r25, 0x020B
 724:	80 50       	subi	r24, 0x00	; 0
 726:	92 40       	sbci	r25, 0x02	; 2
 728:	84 f0       	brlt	.+32     	; 0x74a <main+0x2aa>
				{
					if(s0Count > 530)	
 72a:	80 91 0a 02 	lds	r24, 0x020A
 72e:	90 91 0b 02 	lds	r25, 0x020B
 732:	83 51       	subi	r24, 0x13	; 19
 734:	92 40       	sbci	r25, 0x02	; 2
 736:	2c f0       	brlt	.+10     	; 0x742 <main+0x2a2>
						s0Count = 0;
 738:	10 92 0b 02 	sts	0x020B, r1
 73c:	10 92 0a 02 	sts	0x020A, r1
 740:	04 c0       	rjmp	.+8      	; 0x74a <main+0x2aa>
					else
						s0Count = 511;
 742:	30 92 0b 02 	sts	0x020B, r3
 746:	20 92 0a 02 	sts	0x020A, r2
				}
				OCR1B = porp[s0Count];
 74a:	e0 91 0a 02 	lds	r30, 0x020A
 74e:	f0 91 0b 02 	lds	r31, 0x020B
 752:	e0 50       	subi	r30, 0x00	; 0
 754:	ff 4f       	sbci	r31, 0xFF	; 255
 756:	80 81       	ld	r24, Z
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	90 93 8b 00 	sts	0x008B, r25
 75e:	80 93 8a 00 	sts	0x008A, r24
				lost &= ~(0x1);
 762:	80 91 02 02 	lds	r24, 0x0202
 766:	8e 7f       	andi	r24, 0xFE	; 254
 768:	80 93 02 02 	sts	0x0202, r24
 76c:	aa 24       	eor	r10, r10
 76e:	bb 24       	eor	r11, r11
			}
		}
		
		temp = (AdConvert(5)<<2);
 770:	85 e0       	ldi	r24, 0x05	; 5
 772:	bb dc       	rcall	.-1674   	; 0xea <AdConvert>
 774:	7c 01       	movw	r14, r24
		volt = (AdConvert(6)<<2);
 776:	86 e0       	ldi	r24, 0x06	; 6
 778:	b8 dc       	rcall	.-1680   	; 0xea <AdConvert>
 77a:	8c 01       	movw	r16, r24
		curr = (AdConvert(7)<<2);
 77c:	87 e0       	ldi	r24, 0x07	; 7
 77e:	b5 dc       	rcall	.-1686   	; 0xea <AdConvert>
		
		if(volt < 240)
 780:	00 0f       	add	r16, r16
 782:	11 1f       	adc	r17, r17
 784:	00 0f       	add	r16, r16
 786:	11 1f       	adc	r17, r17
 788:	00 3f       	cpi	r16, 0xF0	; 240
 78a:	11 05       	cpc	r17, r1
 78c:	68 f4       	brcc	.+26     	; 0x7a8 <main+0x308>
		{
			
			if(vCount++>6000)
 78e:	e3 01       	movw	r28, r6
 790:	21 96       	adiw	r28, 0x01	; 1
 792:	21 e7       	ldi	r18, 0x71	; 113
 794:	62 16       	cp	r6, r18
 796:	27 e1       	ldi	r18, 0x17	; 23
 798:	72 06       	cpc	r7, r18
 79a:	48 f0       	brcs	.+18     	; 0x7ae <main+0x30e>
			{
				if(vCount < 7200)	
 79c:	2c e1       	ldi	r18, 0x1C	; 28
 79e:	c0 32       	cpi	r28, 0x20	; 32
 7a0:	d2 07       	cpc	r29, r18
 7a2:	10 f4       	brcc	.+4      	; 0x7a8 <main+0x308>
					BEEP_ON;
 7a4:	5d 9a       	sbi	0x0b, 5	; 11
 7a6:	03 c0       	rjmp	.+6      	; 0x7ae <main+0x30e>
			}
		}
		else
		{
			vCount = 0;
			BEEP_OFF;
 7a8:	5d 98       	cbi	0x0b, 5	; 11
 7aa:	c0 e0       	ldi	r28, 0x00	; 0
 7ac:	d0 e0       	ldi	r29, 0x00	; 0
		}
		

		if(curr > 600)
 7ae:	88 0f       	add	r24, r24
 7b0:	99 1f       	adc	r25, r25
 7b2:	88 0f       	add	r24, r24
 7b4:	99 1f       	adc	r25, r25
 7b6:	89 55       	subi	r24, 0x59	; 89
 7b8:	92 40       	sbci	r25, 0x02	; 2
 7ba:	c8 f0       	brcs	.+50     	; 0x7ee <main+0x34e>
		{
			if(cCount++>650)		// 130ms
 7bc:	8b e8       	ldi	r24, 0x8B	; 139
 7be:	c8 16       	cp	r12, r24
 7c0:	82 e0       	ldi	r24, 0x02	; 2
 7c2:	d8 06       	cpc	r13, r24
 7c4:	24 f4       	brge	.+8      	; 0x7ce <main+0x32e>
 7c6:	08 94       	sec
 7c8:	c1 1c       	adc	r12, r1
 7ca:	d1 1c       	adc	r13, r1
 7cc:	1f c0       	rjmp	.+62     	; 0x80c <main+0x36c>
			{
				D5_ON;
 7ce:	2d 9a       	sbi	0x05, 5	; 5
				BEEP_ON;
 7d0:	5d 9a       	sbi	0x0b, 5	; 11
				overCurr = 0;
				OCR1A = OCR1B = 0;
 7d2:	10 92 8b 00 	sts	0x008B, r1
 7d6:	10 92 8a 00 	sts	0x008A, r1
 7da:	80 91 8a 00 	lds	r24, 0x008A
 7de:	90 91 8b 00 	lds	r25, 0x008B
 7e2:	90 93 89 00 	sts	0x0089, r25
 7e6:	80 93 88 00 	sts	0x0088, r24
 7ea:	55 24       	eor	r5, r5
 7ec:	0d c0       	rjmp	.+26     	; 0x808 <main+0x368>
				cCount = 0;
			}
		}
		else
		{
			if(cCount-- < -10000)		// wait for two second
 7ee:	90 ef       	ldi	r25, 0xF0	; 240
 7f0:	c9 16       	cp	r12, r25
 7f2:	98 ed       	ldi	r25, 0xD8	; 216
 7f4:	d9 06       	cpc	r13, r25
 7f6:	24 f0       	brlt	.+8      	; 0x800 <main+0x360>
 7f8:	08 94       	sec
 7fa:	c1 08       	sbc	r12, r1
 7fc:	d1 08       	sbc	r13, r1
 7fe:	06 c0       	rjmp	.+12     	; 0x80c <main+0x36c>
			{
				D5_OFF;
 800:	2d 98       	cbi	0x05, 5	; 5
				BEEP_OFF;
 802:	5d 98       	cbi	0x0b, 5	; 11
 804:	55 24       	eor	r5, r5
 806:	53 94       	inc	r5
 808:	cc 24       	eor	r12, r12
 80a:	dd 24       	eor	r13, r13
				overCurr = 1;
				cCount = 0;
			}
		}
		
		if(temp < 362)
 80c:	ee 0c       	add	r14, r14
 80e:	ff 1c       	adc	r15, r15
 810:	ee 0c       	add	r14, r14
 812:	ff 1c       	adc	r15, r15
 814:	2a e6       	ldi	r18, 0x6A	; 106
 816:	e2 16       	cp	r14, r18
 818:	21 e0       	ldi	r18, 0x01	; 1
 81a:	f2 06       	cpc	r15, r18
 81c:	58 f4       	brcc	.+22     	; 0x834 <main+0x394>
		{
			if(tCount++ > 2000)
 81e:	81 ed       	ldi	r24, 0xD1	; 209
 820:	88 16       	cp	r8, r24
 822:	87 e0       	ldi	r24, 0x07	; 7
 824:	98 06       	cpc	r9, r24
 826:	24 f4       	brge	.+8      	; 0x830 <main+0x390>
 828:	08 94       	sec
 82a:	81 1c       	adc	r8, r1
 82c:	91 1c       	adc	r9, r1
 82e:	0e c0       	rjmp	.+28     	; 0x84c <main+0x3ac>
			{
				tCount = 0;
				FAN_ON;
 830:	5f 9a       	sbi	0x0b, 7	; 11
 832:	0a c0       	rjmp	.+20     	; 0x848 <main+0x3a8>
			}
		}
		else if(tCount-- < -2000)
 834:	90 e3       	ldi	r25, 0x30	; 48
 836:	89 16       	cp	r8, r25
 838:	98 ef       	ldi	r25, 0xF8	; 248
 83a:	99 06       	cpc	r9, r25
 83c:	24 f0       	brlt	.+8      	; 0x846 <main+0x3a6>
 83e:	08 94       	sec
 840:	81 08       	sbc	r8, r1
 842:	91 08       	sbc	r9, r1
 844:	03 c0       	rjmp	.+6      	; 0x84c <main+0x3ac>
		{
			tCount = 0;
			FAN_OFF;
 846:	5f 98       	cbi	0x0b, 7	; 11
 848:	88 24       	eor	r8, r8
 84a:	99 24       	eor	r9, r9
		}

		if(lCount++ > 1400)
 84c:	29 e7       	ldi	r18, 0x79	; 121
 84e:	a2 16       	cp	r10, r18
 850:	25 e0       	ldi	r18, 0x05	; 5
 852:	b2 06       	cpc	r11, r18
 854:	08 f4       	brcc	.+2      	; 0x858 <main+0x3b8>
 856:	9c ce       	rjmp	.-712    	; 0x590 <main+0xf0>
		{
			D4_BLINK;
 858:	85 b1       	in	r24, 0x05	; 5
 85a:	90 e1       	ldi	r25, 0x10	; 16
 85c:	89 27       	eor	r24, r25
 85e:	85 b9       	out	0x05, r24	; 5
			lost = 0;			// lost control
 860:	10 92 02 02 	sts	0x0202, r1
			lCount = 0;
			CloseHB();
 864:	0b de       	rcall	.-1002   	; 0x47c <CloseHB>
 866:	aa 24       	eor	r10, r10
 868:	bb 24       	eor	r11, r11
 86a:	95 ce       	rjmp	.-726    	; 0x596 <main+0xf6>

0000086c <_exit>:
 86c:	f8 94       	cli

0000086e <__stop_program>:
 86e:	ff cf       	rjmp	.-2      	; 0x86e <__stop_program>
