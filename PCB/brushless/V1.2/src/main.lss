
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000102  00800100  000007d4  00000868  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800202  00800202  0000096a  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000096a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000121  00000000  00000000  0000098a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005cc  00000000  00000000  00000aab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000226  00000000  00000000  00001077  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006ec  00000000  00000000  0000129d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  0000198c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001db  00000000  00000000  00001a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000165  00000000  00000000  00001c47  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00001dac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	40 c2       	rjmp	.+1152   	; 0x48a <__vector_4>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	88 c0       	rjmp	.+272    	; 0x126 <__vector_10>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	12 e0       	ldi	r17, 0x02	; 2
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e4 ed       	ldi	r30, 0xD4	; 212
  48:	f7 e0       	ldi	r31, 0x07	; 7
  4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
  50:	a2 30       	cpi	r26, 0x02	; 2
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>

00000056 <__do_clear_bss>:
  56:	12 e0       	ldi	r17, 0x02	; 2
  58:	a2 e0       	ldi	r26, 0x02	; 2
  5a:	b2 e0       	ldi	r27, 0x02	; 2
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	ad 31       	cpi	r26, 0x1D	; 29
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	3f d2       	rcall	.+1150   	; 0x4e6 <main>
  68:	b3 c3       	rjmp	.+1894   	; 0x7d0 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <PortInit>:

static void commut(unsigned char phase);        //  commutation

void PortInit(void)
{
    DDRB = 0B00001110;
  6c:	8e e0       	ldi	r24, 0x0E	; 14
  6e:	84 b9       	out	0x04, r24	; 4
    PORTB= 0B00001000;
  70:	88 e0       	ldi	r24, 0x08	; 8
  72:	85 b9       	out	0x05, r24	; 5
    PINB = 0x00;
  74:	13 b8       	out	0x03, r1	; 3

    DDRD = 0B11100101;
  76:	85 ee       	ldi	r24, 0xE5	; 229
  78:	8a b9       	out	0x0a, r24	; 10
    PORTD= 0B01100001;
  7a:	81 e6       	ldi	r24, 0x61	; 97
  7c:	8b b9       	out	0x0b, r24	; 11
    PIND = 0x00;
  7e:	19 b8       	out	0x09, r1	; 9

    DDRC = 0B00110000;
  80:	80 e3       	ldi	r24, 0x30	; 48
  82:	87 b9       	out	0x07, r24	; 7
    PORTC= 0B00110000;
  84:	88 b9       	out	0x08, r24	; 8
    PINC = 0x00;
  86:	16 b8       	out	0x06, r1	; 6
}
  88:	08 95       	ret

0000008a <ADCInit>:
* Aref voltage: 2.5V
* sampling frequency 64 divide: 172.8KHz
**************************************/
void ADCInit(void)
{
	ADMUX =  1<<REFS0 | 1<<ADLAR;	// Avcc Ref  左对齐
  8a:	80 e6       	ldi	r24, 0x60	; 96
  8c:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = 1<<ADPS2 | 1<<ADPS0 | 1<<ADEN;	//| 1<<ADATE ;		// 32分频
  90:	85 e8       	ldi	r24, 0x85	; 133
  92:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB = 0x00;						
  96:	10 92 7b 00 	sts	0x007B, r1
	DIDR0 = 0xC8;			// ADC3.6.7
  9a:	88 ec       	ldi	r24, 0xC8	; 200
  9c:	80 93 7e 00 	sts	0x007E, r24
}
  a0:	08 95       	ret

000000a2 <AdConvert>:

unsigned int AdConvert(unsigned char channal)
{
	ADMUX |= channal;
  a2:	90 91 7c 00 	lds	r25, 0x007C
  a6:	98 2b       	or	r25, r24
  a8:	90 93 7c 00 	sts	0x007C, r25
	ADCSRA |= 1<<ADSC;					// start converter
  ac:	80 91 7a 00 	lds	r24, 0x007A
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	80 93 7a 00 	sts	0x007A, r24
	while ((ADCSRA & 0x40));			// wait converter over  ADSC==0 on converter over
  b6:	80 91 7a 00 	lds	r24, 0x007A
  ba:	86 fd       	sbrc	r24, 6
  bc:	fc cf       	rjmp	.-8      	; 0xb6 <AdConvert+0x14>
	ADMUX &= 0xF0;
  be:	80 91 7c 00 	lds	r24, 0x007C
  c2:	80 7f       	andi	r24, 0xF0	; 240
  c4:	80 93 7c 00 	sts	0x007C, r24
	return(ADCH);
  c8:	80 91 79 00 	lds	r24, 0x0079
}
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	08 95       	ret

000000d0 <T1Init>:

void T1Init(void)
{
	TCCR1B = 1<<ICNC1 | 1<<ICES1 | 1<<CS11;			// rising trigger
  d0:	82 ec       	ldi	r24, 0xC2	; 194
  d2:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = 1<<ICIE1;
  d6:	80 e2       	ldi	r24, 0x20	; 32
  d8:	80 93 6f 00 	sts	0x006F, r24
	TCNT1 = 0;
  dc:	10 92 85 00 	sts	0x0085, r1
  e0:	10 92 84 00 	sts	0x0084, r1
}
  e4:	08 95       	ret

000000e6 <I1Init>:

void I1Init(void)
{
    EICRA = 1<<ISC10 | 1<<ISC11;		// rising init
  e6:	8c e0       	ldi	r24, 0x0C	; 12
  e8:	80 93 69 00 	sts	0x0069, r24
}
  ec:	08 95       	ret

000000ee <PCInit>:

void PCInit(void)
{
    PCICR |= 1<<PCIE1;			// PCINT[14:8] 
  ee:	e8 e6       	ldi	r30, 0x68	; 104
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	82 60       	ori	r24, 0x02	; 2
  f6:	80 83       	st	Z, r24
    PCMSK1 |= 0x07;				//
  f8:	ec e6       	ldi	r30, 0x6C	; 108
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	87 60       	ori	r24, 0x07	; 7
 100:	80 83       	st	Z, r24
}
 102:	08 95       	ret

00000104 <T0Init>:

void T0Init(void)
{
    TCCR0A = 1<<COM0A1 | 1<<COM0B1 | 1<<WGM00;		// 8bit phase
 104:	81 ea       	ldi	r24, 0xA1	; 161
 106:	84 bd       	out	0x24, r24	; 36
    TCCR0B = 1<<CS00;			// 0 divide
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	85 bd       	out	0x25, r24	; 37
    OCR0A = OCR0B = 0x00;
 10c:	18 bc       	out	0x28, r1	; 40
 10e:	88 b5       	in	r24, 0x28	; 40
 110:	87 bd       	out	0x27, r24	; 39
}
 112:	08 95       	ret

00000114 <T2Init>:

void T2Init(void)
{
    TCCR2A = 1<<COM2A1 | 1<<WGM20;
 114:	81 e8       	ldi	r24, 0x81	; 129
 116:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = 1<<CS20;
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	80 93 b1 00 	sts	0x00B1, r24
    OCR2A = 0x00;
 120:	10 92 b3 00 	sts	0x00B3, r1
}
 124:	08 95       	ret

00000126 <__vector_10>:

volatile unsigned char update = 0;
unsigned char times = 0;

ISR(TIMER1_CAPT_vect)
{
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	2f 93       	push	r18
 132:	3f 93       	push	r19
 134:	4f 93       	push	r20
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
	if(CaptStat)
 13a:	80 91 01 01 	lds	r24, 0x0101
 13e:	88 23       	and	r24, r24
 140:	71 f0       	breq	.+28     	; 0x15e <__vector_10+0x38>
	{
		CaptStat = 0;
 142:	10 92 01 01 	sts	0x0101, r1
		CAPT_T_FALL;
 146:	82 e8       	ldi	r24, 0x82	; 130
 148:	80 93 81 00 	sts	0x0081, r24
 14c:	10 92 85 00 	sts	0x0085, r1
 150:	10 92 84 00 	sts	0x0084, r1
 154:	10 92 87 00 	sts	0x0087, r1
 158:	10 92 86 00 	sts	0x0086, r1
 15c:	3b c0       	rjmp	.+118    	; 0x1d4 <__vector_10+0xae>
	}
	else			// falling tigger
	{
		CaptStat=1;
 15e:	41 e0       	ldi	r20, 0x01	; 1
 160:	40 93 01 01 	sts	0x0101, r20
		CAPT_T_RIS;
 164:	82 ec       	ldi	r24, 0xC2	; 194
 166:	80 93 81 00 	sts	0x0081, r24
 16a:	10 92 85 00 	sts	0x0085, r1
 16e:	10 92 84 00 	sts	0x0084, r1
		D14_BLINK;
 172:	85 b1       	in	r24, 0x05	; 5
 174:	94 e0       	ldi	r25, 0x04	; 4
 176:	89 27       	eor	r24, r25
 178:	85 b9       	out	0x05, r24	; 5
		speed = ICR1;
 17a:	80 91 86 00 	lds	r24, 0x0086
 17e:	90 91 87 00 	lds	r25, 0x0087
 182:	90 93 17 02 	sts	0x0217, r25
 186:	80 93 16 02 	sts	0x0216, r24
		if(times++ > 2)
 18a:	80 91 1c 02 	lds	r24, 0x021C
 18e:	8f 5f       	subi	r24, 0xFF	; 255
 190:	80 93 1c 02 	sts	0x021C, r24
 194:	81 50       	subi	r24, 0x01	; 1
 196:	83 30       	cpi	r24, 0x03	; 3
 198:	d0 f0       	brcs	.+52     	; 0x1ce <__vector_10+0xa8>
		{
			if(LastValue == VelInte)
 19a:	20 91 14 02 	lds	r18, 0x0214
 19e:	30 91 15 02 	lds	r19, 0x0215
 1a2:	80 91 12 02 	lds	r24, 0x0212
 1a6:	90 91 13 02 	lds	r25, 0x0213
 1aa:	28 17       	cp	r18, r24
 1ac:	39 07       	cpc	r19, r25
 1ae:	19 f4       	brne	.+6      	; 0x1b6 <__vector_10+0x90>
				stall = 1;
 1b0:	40 93 00 01 	sts	0x0100, r20
 1b4:	0a c0       	rjmp	.+20     	; 0x1ca <__vector_10+0xa4>
			else
			{
				LastValue = VelInte;
 1b6:	80 91 12 02 	lds	r24, 0x0212
 1ba:	90 91 13 02 	lds	r25, 0x0213
 1be:	90 93 15 02 	sts	0x0215, r25
 1c2:	80 93 14 02 	sts	0x0214, r24
				stall = 0;
 1c6:	10 92 00 01 	sts	0x0100, r1
			}
			times = 0;
 1ca:	10 92 1c 02 	sts	0x021C, r1
		}
		update = 1;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	80 93 1b 02 	sts	0x021B, r24
	}
}
 1d4:	9f 91       	pop	r25
 1d6:	8f 91       	pop	r24
 1d8:	4f 91       	pop	r20
 1da:	3f 91       	pop	r19
 1dc:	2f 91       	pop	r18
 1de:	0f 90       	pop	r0
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	0f 90       	pop	r0
 1e4:	1f 90       	pop	r1
 1e6:	18 95       	reti

000001e8 <commut>:
over:
    return 1;
}

void commut(unsigned char phase)        //  commutation
{
 1e8:	98 2f       	mov	r25, r24
    if(dir)
 1ea:	80 91 18 02 	lds	r24, 0x0218
 1ee:	88 23       	and	r24, r24
 1f0:	09 f4       	brne	.+2      	; 0x1f4 <commut+0xc>
 1f2:	6c c0       	rjmp	.+216    	; 0x2cc <commut+0xe4>
    {
        switch(phase)
 1f4:	93 30       	cpi	r25, 0x03	; 3
 1f6:	09 f4       	brne	.+2      	; 0x1fa <commut+0x12>
 1f8:	4a c0       	rjmp	.+148    	; 0x28e <commut+0xa6>
 1fa:	94 30       	cpi	r25, 0x04	; 4
 1fc:	38 f4       	brcc	.+14     	; 0x20c <commut+0x24>
 1fe:	91 30       	cpi	r25, 0x01	; 1
 200:	09 f4       	brne	.+2      	; 0x204 <commut+0x1c>
 202:	53 c0       	rjmp	.+166    	; 0x2aa <commut+0xc2>
 204:	92 30       	cpi	r25, 0x02	; 2
 206:	09 f0       	breq	.+2      	; 0x20a <commut+0x22>
 208:	da c0       	rjmp	.+436    	; 0x3be <__stack+0xbf>
 20a:	33 c0       	rjmp	.+102    	; 0x272 <commut+0x8a>
 20c:	95 30       	cpi	r25, 0x05	; 5
 20e:	31 f0       	breq	.+12     	; 0x21c <commut+0x34>
 210:	95 30       	cpi	r25, 0x05	; 5
 212:	90 f0       	brcs	.+36     	; 0x238 <commut+0x50>
 214:	96 30       	cpi	r25, 0x06	; 6
 216:	09 f0       	breq	.+2      	; 0x21a <commut+0x32>
 218:	d2 c0       	rjmp	.+420    	; 0x3be <__stack+0xbf>
 21a:	1c c0       	rjmp	.+56     	; 0x254 <commut+0x6c>
        {
        case 5:
            CHBL;
 21c:	84 b5       	in	r24, 0x24	; 36
 21e:	8f 70       	andi	r24, 0x0F	; 15
 220:	84 bd       	out	0x24, r24	; 36
 222:	80 91 b0 00 	lds	r24, 0x00B0
 226:	8f 73       	andi	r24, 0x3F	; 63
 228:	80 93 b0 00 	sts	0x00B0, r24
 22c:	58 9a       	sbi	0x0b, 0	; 11
 22e:	88 b1       	in	r24, 0x08	; 8
 230:	80 63       	ori	r24, 0x30	; 48
 232:	88 b9       	out	0x08, r24	; 8
 234:	00 00       	nop
 236:	9c c0       	rjmp	.+312    	; 0x370 <__stack+0x71>
            break;
        case 4:
            AHBL;
 238:	84 b5       	in	r24, 0x24	; 36
 23a:	8f 70       	andi	r24, 0x0F	; 15
 23c:	84 bd       	out	0x24, r24	; 36
 23e:	80 91 b0 00 	lds	r24, 0x00B0
 242:	8f 73       	andi	r24, 0x3F	; 63
 244:	80 93 b0 00 	sts	0x00B0, r24
 248:	58 9a       	sbi	0x0b, 0	; 11
 24a:	88 b1       	in	r24, 0x08	; 8
 24c:	80 63       	ori	r24, 0x30	; 48
 24e:	88 b9       	out	0x08, r24	; 8
 250:	00 00       	nop
 252:	9d c0       	rjmp	.+314    	; 0x38e <__stack+0x8f>
            break;
        case 6:
            AHCL;
 254:	84 b5       	in	r24, 0x24	; 36
 256:	8f 70       	andi	r24, 0x0F	; 15
 258:	84 bd       	out	0x24, r24	; 36
 25a:	80 91 b0 00 	lds	r24, 0x00B0
 25e:	8f 73       	andi	r24, 0x3F	; 63
 260:	80 93 b0 00 	sts	0x00B0, r24
 264:	58 9a       	sbi	0x0b, 0	; 11
 266:	88 b1       	in	r24, 0x08	; 8
 268:	80 63       	ori	r24, 0x30	; 48
 26a:	88 b9       	out	0x08, r24	; 8
 26c:	00 00       	nop
 26e:	58 98       	cbi	0x0b, 0	; 11
 270:	4f c0       	rjmp	.+158    	; 0x310 <__stack+0x11>
            break;
        case 2:
            BHCL;
 272:	84 b5       	in	r24, 0x24	; 36
 274:	8f 70       	andi	r24, 0x0F	; 15
 276:	84 bd       	out	0x24, r24	; 36
 278:	80 91 b0 00 	lds	r24, 0x00B0
 27c:	8f 73       	andi	r24, 0x3F	; 63
 27e:	80 93 b0 00 	sts	0x00B0, r24
 282:	58 9a       	sbi	0x0b, 0	; 11
 284:	88 b1       	in	r24, 0x08	; 8
 286:	80 63       	ori	r24, 0x30	; 48
 288:	88 b9       	out	0x08, r24	; 8
 28a:	00 00       	nop
 28c:	40 c0       	rjmp	.+128    	; 0x30e <__stack+0xf>
            break;
        case 3:
            BHAL;
 28e:	84 b5       	in	r24, 0x24	; 36
 290:	8f 70       	andi	r24, 0x0F	; 15
 292:	84 bd       	out	0x24, r24	; 36
 294:	80 91 b0 00 	lds	r24, 0x00B0
 298:	8f 73       	andi	r24, 0x3F	; 63
 29a:	80 93 b0 00 	sts	0x00B0, r24
 29e:	58 9a       	sbi	0x0b, 0	; 11
 2a0:	88 b1       	in	r24, 0x08	; 8
 2a2:	80 63       	ori	r24, 0x30	; 48
 2a4:	88 b9       	out	0x08, r24	; 8
 2a6:	00 00       	nop
 2a8:	46 c0       	rjmp	.+140    	; 0x336 <__stack+0x37>
            break;
        case 1:
            CHAL;
 2aa:	84 b5       	in	r24, 0x24	; 36
 2ac:	8f 70       	andi	r24, 0x0F	; 15
 2ae:	84 bd       	out	0x24, r24	; 36
 2b0:	80 91 b0 00 	lds	r24, 0x00B0
 2b4:	8f 73       	andi	r24, 0x3F	; 63
 2b6:	80 93 b0 00 	sts	0x00B0, r24
 2ba:	58 9a       	sbi	0x0b, 0	; 11
 2bc:	88 b1       	in	r24, 0x08	; 8
 2be:	80 63       	ori	r24, 0x30	; 48
 2c0:	88 b9       	out	0x08, r24	; 8
 2c2:	00 00       	nop
 2c4:	44 98       	cbi	0x08, 4	; 8
 2c6:	84 b5       	in	r24, 0x24	; 36
 2c8:	80 68       	ori	r24, 0x80	; 128
 2ca:	64 c0       	rjmp	.+200    	; 0x394 <__stack+0x95>
            break;
        }
    }
    else
    {
        switch(phase)
 2cc:	93 30       	cpi	r25, 0x03	; 3
 2ce:	09 f4       	brne	.+2      	; 0x2d2 <commut+0xea>
 2d0:	51 c0       	rjmp	.+162    	; 0x374 <__stack+0x75>
 2d2:	94 30       	cpi	r25, 0x04	; 4
 2d4:	38 f4       	brcc	.+14     	; 0x2e4 <commut+0xfc>
 2d6:	91 30       	cpi	r25, 0x01	; 1
 2d8:	09 f4       	brne	.+2      	; 0x2dc <commut+0xf4>
 2da:	5e c0       	rjmp	.+188    	; 0x398 <__stack+0x99>
 2dc:	92 30       	cpi	r25, 0x02	; 2
 2de:	09 f0       	breq	.+2      	; 0x2e2 <commut+0xfa>
 2e0:	6e c0       	rjmp	.+220    	; 0x3be <__stack+0xbf>
 2e2:	39 c0       	rjmp	.+114    	; 0x356 <__stack+0x57>
 2e4:	95 30       	cpi	r25, 0x05	; 5
 2e6:	31 f0       	breq	.+12     	; 0x2f4 <commut+0x10c>
 2e8:	95 30       	cpi	r25, 0x05	; 5
 2ea:	c0 f0       	brcs	.+48     	; 0x31c <__stack+0x1d>
 2ec:	96 30       	cpi	r25, 0x06	; 6
 2ee:	09 f0       	breq	.+2      	; 0x2f2 <commut+0x10a>
 2f0:	66 c0       	rjmp	.+204    	; 0x3be <__stack+0xbf>
 2f2:	23 c0       	rjmp	.+70     	; 0x33a <__stack+0x3b>
        {
        case 5:
            BHCL;
 2f4:	84 b5       	in	r24, 0x24	; 36
 2f6:	8f 70       	andi	r24, 0x0F	; 15
 2f8:	84 bd       	out	0x24, r24	; 36
 2fa:	80 91 b0 00 	lds	r24, 0x00B0
 2fe:	8f 73       	andi	r24, 0x3F	; 63
 300:	80 93 b0 00 	sts	0x00B0, r24
 304:	58 9a       	sbi	0x0b, 0	; 11
 306:	88 b1       	in	r24, 0x08	; 8
 308:	80 63       	ori	r24, 0x30	; 48
 30a:	88 b9       	out	0x08, r24	; 8
 30c:	00 00       	nop
 30e:	45 98       	cbi	0x08, 5	; 8
 310:	80 91 b0 00 	lds	r24, 0x00B0
 314:	80 68       	ori	r24, 0x80	; 128
 316:	80 93 b0 00 	sts	0x00B0, r24
 31a:	08 95       	ret
            break;
        case 4:
            BHAL;
 31c:	84 b5       	in	r24, 0x24	; 36
 31e:	8f 70       	andi	r24, 0x0F	; 15
 320:	84 bd       	out	0x24, r24	; 36
 322:	80 91 b0 00 	lds	r24, 0x00B0
 326:	8f 73       	andi	r24, 0x3F	; 63
 328:	80 93 b0 00 	sts	0x00B0, r24
 32c:	58 9a       	sbi	0x0b, 0	; 11
 32e:	88 b1       	in	r24, 0x08	; 8
 330:	80 63       	ori	r24, 0x30	; 48
 332:	88 b9       	out	0x08, r24	; 8
 334:	00 00       	nop
 336:	45 98       	cbi	0x08, 5	; 8
 338:	c6 cf       	rjmp	.-116    	; 0x2c6 <commut+0xde>
            break;
        case 6:
            CHAL;
 33a:	84 b5       	in	r24, 0x24	; 36
 33c:	8f 70       	andi	r24, 0x0F	; 15
 33e:	84 bd       	out	0x24, r24	; 36
 340:	80 91 b0 00 	lds	r24, 0x00B0
 344:	8f 73       	andi	r24, 0x3F	; 63
 346:	80 93 b0 00 	sts	0x00B0, r24
 34a:	58 9a       	sbi	0x0b, 0	; 11
 34c:	88 b1       	in	r24, 0x08	; 8
 34e:	80 63       	ori	r24, 0x30	; 48
 350:	88 b9       	out	0x08, r24	; 8
 352:	00 00       	nop
 354:	b7 cf       	rjmp	.-146    	; 0x2c4 <commut+0xdc>
            break;
        case 2:
            CHBL;
 356:	84 b5       	in	r24, 0x24	; 36
 358:	8f 70       	andi	r24, 0x0F	; 15
 35a:	84 bd       	out	0x24, r24	; 36
 35c:	80 91 b0 00 	lds	r24, 0x00B0
 360:	8f 73       	andi	r24, 0x3F	; 63
 362:	80 93 b0 00 	sts	0x00B0, r24
 366:	58 9a       	sbi	0x0b, 0	; 11
 368:	88 b1       	in	r24, 0x08	; 8
 36a:	80 63       	ori	r24, 0x30	; 48
 36c:	88 b9       	out	0x08, r24	; 8
 36e:	00 00       	nop
 370:	44 98       	cbi	0x08, 4	; 8
 372:	0e c0       	rjmp	.+28     	; 0x390 <__stack+0x91>
            break;
        case 3:
            AHBL;
 374:	84 b5       	in	r24, 0x24	; 36
 376:	8f 70       	andi	r24, 0x0F	; 15
 378:	84 bd       	out	0x24, r24	; 36
 37a:	80 91 b0 00 	lds	r24, 0x00B0
 37e:	8f 73       	andi	r24, 0x3F	; 63
 380:	80 93 b0 00 	sts	0x00B0, r24
 384:	58 9a       	sbi	0x0b, 0	; 11
 386:	88 b1       	in	r24, 0x08	; 8
 388:	80 63       	ori	r24, 0x30	; 48
 38a:	88 b9       	out	0x08, r24	; 8
 38c:	00 00       	nop
 38e:	58 98       	cbi	0x0b, 0	; 11
 390:	84 b5       	in	r24, 0x24	; 36
 392:	80 62       	ori	r24, 0x20	; 32
 394:	84 bd       	out	0x24, r24	; 36
 396:	08 95       	ret
            break;
        case 1:
            AHCL;
 398:	84 b5       	in	r24, 0x24	; 36
 39a:	8f 70       	andi	r24, 0x0F	; 15
 39c:	84 bd       	out	0x24, r24	; 36
 39e:	80 91 b0 00 	lds	r24, 0x00B0
 3a2:	8f 73       	andi	r24, 0x3F	; 63
 3a4:	80 93 b0 00 	sts	0x00B0, r24
 3a8:	58 9a       	sbi	0x0b, 0	; 11
 3aa:	88 b1       	in	r24, 0x08	; 8
 3ac:	80 63       	ori	r24, 0x30	; 48
 3ae:	88 b9       	out	0x08, r24	; 8
 3b0:	00 00       	nop
 3b2:	58 98       	cbi	0x0b, 0	; 11
 3b4:	80 91 b0 00 	lds	r24, 0x00B0
 3b8:	80 68       	ori	r24, 0x80	; 128
 3ba:	80 93 b0 00 	sts	0x00B0, r24
 3be:	08 95       	ret

000003c0 <StartFun>:
    VelInte++;
	commut(PINC&0x07);
}

int StartFun(unsigned char SetSpeed)
{
 3c0:	0f 93       	push	r16
 3c2:	1f 93       	push	r17
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
    unsigned char i = 0;
    unsigned char temp = 0xE0;
	VelInte = LastValue = 0;
 3c8:	10 92 15 02 	sts	0x0215, r1
 3cc:	10 92 14 02 	sts	0x0214, r1
 3d0:	80 91 14 02 	lds	r24, 0x0214
 3d4:	90 91 15 02 	lds	r25, 0x0215
 3d8:	90 93 13 02 	sts	0x0213, r25
 3dc:	80 93 12 02 	sts	0x0212, r24
	stall = times = 0;
 3e0:	10 92 1c 02 	sts	0x021C, r1
 3e4:	10 92 00 01 	sts	0x0100, r1
    DIS_PCINT;
 3e8:	80 91 68 00 	lds	r24, 0x0068
 3ec:	8c 7f       	andi	r24, 0xFC	; 252
 3ee:	80 93 68 00 	sts	0x0068, r24
	AMOS_OFF;
 3f2:	84 b5       	in	r24, 0x24	; 36
 3f4:	8f 70       	andi	r24, 0x0F	; 15
 3f6:	84 bd       	out	0x24, r24	; 36
 3f8:	80 91 b0 00 	lds	r24, 0x00B0
 3fc:	8f 73       	andi	r24, 0x3F	; 63
 3fe:	80 93 b0 00 	sts	0x00B0, r24
 402:	58 9a       	sbi	0x0b, 0	; 11
 404:	88 b1       	in	r24, 0x08	; 8
 406:	80 63       	ori	r24, 0x30	; 48
 408:	88 b9       	out	0x08, r24	; 8
    OCR0A = OCR0B = OCR2A = temp;
 40a:	80 ee       	ldi	r24, 0xE0	; 224
 40c:	80 93 b3 00 	sts	0x00B3, r24
 410:	80 91 b3 00 	lds	r24, 0x00B3
 414:	88 bd       	out	0x28, r24	; 40
 416:	88 b5       	in	r24, 0x28	; 40
 418:	87 bd       	out	0x27, r24	; 39
    ENB_PCINT;				// Enable PC interrupt
 41a:	80 91 68 00 	lds	r24, 0x0068
 41e:	82 60       	ori	r24, 0x02	; 2
 420:	80 93 68 00 	sts	0x0068, r24
 424:	00 ee       	ldi	r16, 0xE0	; 224
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 426:	c0 e2       	ldi	r28, 0x20	; 32
 428:	de e4       	ldi	r29, 0x4E	; 78
 42a:	10 e0       	ldi	r17, 0x00	; 0
    while(1)
    {
        for(i=0; i<8; i++)
        {
            if(VelInte > 4)     // motor start success
 42c:	80 91 12 02 	lds	r24, 0x0212
 430:	90 91 13 02 	lds	r25, 0x0213
 434:	05 97       	sbiw	r24, 0x05	; 5
 436:	08 f5       	brcc	.+66     	; 0x47a <StartFun+0xba>
                goto over;
            commut(i);
 438:	81 2f       	mov	r24, r17
 43a:	d6 de       	rcall	.-596    	; 0x1e8 <commut>
 43c:	ce 01       	movw	r24, r28
 43e:	01 97       	sbiw	r24, 0x01	; 1
 440:	f1 f7       	brne	.-4      	; 0x43e <StartFun+0x7e>
	AMOS_OFF;
    OCR0A = OCR0B = OCR2A = temp;
    ENB_PCINT;				// Enable PC interrupt
    while(1)
    {
        for(i=0; i<8; i++)
 442:	1f 5f       	subi	r17, 0xFF	; 255
 444:	18 30       	cpi	r17, 0x08	; 8
 446:	91 f7       	brne	.-28     	; 0x42c <StartFun+0x6c>
            if(VelInte > 4)     // motor start success
                goto over;
            commut(i);
            _delay_ms(10);
        }
        temp -= 8;
 448:	08 50       	subi	r16, 0x08	; 8
        if(temp < 24)
 44a:	00 31       	cpi	r16, 0x10	; 16
 44c:	59 f4       	brne	.+22     	; 0x464 <StartFun+0xa4>
        {
            OCR0A = OCR0B = OCR2A = 0xFF;
 44e:	8f ef       	ldi	r24, 0xFF	; 255
 450:	80 93 b3 00 	sts	0x00B3, r24
 454:	80 91 b3 00 	lds	r24, 0x00B3
 458:	88 bd       	out	0x28, r24	; 40
 45a:	88 b5       	in	r24, 0x28	; 40
 45c:	87 bd       	out	0x27, r24	; 39
 45e:	20 e0       	ldi	r18, 0x00	; 0
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	0d c0       	rjmp	.+26     	; 0x47e <StartFun+0xbe>
            return 0;
        }
        else
            OCR0A = OCR0B = OCR2A = temp;
 464:	00 93 b3 00 	sts	0x00B3, r16
 468:	80 91 b3 00 	lds	r24, 0x00B3
 46c:	88 bd       	out	0x28, r24	; 40
 46e:	88 b5       	in	r24, 0x28	; 40
 470:	87 bd       	out	0x27, r24	; 39
		FEED_DOG;
 472:	8b b1       	in	r24, 0x0b	; 11
 474:	80 58       	subi	r24, 0x80	; 128
 476:	8b b9       	out	0x0b, r24	; 11
 478:	d8 cf       	rjmp	.-80     	; 0x42a <StartFun+0x6a>
    }
 47a:	21 e0       	ldi	r18, 0x01	; 1
 47c:	30 e0       	ldi	r19, 0x00	; 0
over:
    return 1;
}
 47e:	c9 01       	movw	r24, r18
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	1f 91       	pop	r17
 486:	0f 91       	pop	r16
 488:	08 95       	ret

0000048a <__vector_4>:
		update = 1;
	}
}

ISR(PCINT1_vect)
{
 48a:	1f 92       	push	r1
 48c:	0f 92       	push	r0
 48e:	0f b6       	in	r0, 0x3f	; 63
 490:	0f 92       	push	r0
 492:	11 24       	eor	r1, r1
 494:	2f 93       	push	r18
 496:	3f 93       	push	r19
 498:	4f 93       	push	r20
 49a:	5f 93       	push	r21
 49c:	6f 93       	push	r22
 49e:	7f 93       	push	r23
 4a0:	8f 93       	push	r24
 4a2:	9f 93       	push	r25
 4a4:	af 93       	push	r26
 4a6:	bf 93       	push	r27
 4a8:	ef 93       	push	r30
 4aa:	ff 93       	push	r31
    VelInte++;
 4ac:	80 91 12 02 	lds	r24, 0x0212
 4b0:	90 91 13 02 	lds	r25, 0x0213
 4b4:	01 96       	adiw	r24, 0x01	; 1
 4b6:	90 93 13 02 	sts	0x0213, r25
 4ba:	80 93 12 02 	sts	0x0212, r24
	commut(PINC&0x07);
 4be:	86 b1       	in	r24, 0x06	; 6
 4c0:	87 70       	andi	r24, 0x07	; 7
 4c2:	92 de       	rcall	.-732    	; 0x1e8 <commut>
}
 4c4:	ff 91       	pop	r31
 4c6:	ef 91       	pop	r30
 4c8:	bf 91       	pop	r27
 4ca:	af 91       	pop	r26
 4cc:	9f 91       	pop	r25
 4ce:	8f 91       	pop	r24
 4d0:	7f 91       	pop	r23
 4d2:	6f 91       	pop	r22
 4d4:	5f 91       	pop	r21
 4d6:	4f 91       	pop	r20
 4d8:	3f 91       	pop	r19
 4da:	2f 91       	pop	r18
 4dc:	0f 90       	pop	r0
 4de:	0f be       	out	0x3f, r0	; 63
 4e0:	0f 90       	pop	r0
 4e2:	1f 90       	pop	r1
 4e4:	18 95       	reti

000004e6 <main>:
        }
    }
}

int main(void)
{
 4e6:	5f 92       	push	r5
 4e8:	6f 92       	push	r6
 4ea:	7f 92       	push	r7
 4ec:	8f 92       	push	r8
 4ee:	9f 92       	push	r9
 4f0:	af 92       	push	r10
 4f2:	bf 92       	push	r11
 4f4:	cf 92       	push	r12
 4f6:	df 92       	push	r13
 4f8:	ef 92       	push	r14
 4fa:	ff 92       	push	r15
 4fc:	0f 93       	push	r16
 4fe:	1f 93       	push	r17
 500:	cf 93       	push	r28
 502:	df 93       	push	r29
	
	unsigned char overCurr = 0;
	unsigned int temp = 0;
    int tCount = 0;
	int cCount = 0;
	cli();
 504:	f8 94       	cli
    PortInit();
 506:	b2 dd       	rcall	.-1180   	; 0x6c <PortInit>
    D11_ON;
 508:	29 9a       	sbi	0x05, 1	; 5
 50a:	88 e8       	ldi	r24, 0x88	; 136
 50c:	93 e1       	ldi	r25, 0x13	; 19
 50e:	28 ec       	ldi	r18, 0xC8	; 200
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	f9 01       	movw	r30, r18
 514:	31 97       	sbiw	r30, 0x01	; 1
 516:	f1 f7       	brne	.-4      	; 0x514 <main+0x2e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 518:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 51a:	d9 f7       	brne	.-10     	; 0x512 <main+0x2c>
    _delay_ms(500);
    D11_OFF;
 51c:	29 98       	cbi	0x05, 1	; 5
    FEED_DOG;
 51e:	8b b1       	in	r24, 0x0b	; 11
 520:	80 58       	subi	r24, 0x80	; 128
 522:	8b b9       	out	0x0b, r24	; 11
 524:	88 e8       	ldi	r24, 0x88	; 136
 526:	93 e1       	ldi	r25, 0x13	; 19
 528:	28 ec       	ldi	r18, 0xC8	; 200
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	f9 01       	movw	r30, r18
 52e:	31 97       	sbiw	r30, 0x01	; 1
 530:	f1 f7       	brne	.-4      	; 0x52e <main+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 532:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 534:	d9 f7       	brne	.-10     	; 0x52c <main+0x46>
	_delay_ms(500);
    D11_ON;
 536:	29 9a       	sbi	0x05, 1	; 5
    FEED_DOG;
 538:	8b b1       	in	r24, 0x0b	; 11
 53a:	80 58       	subi	r24, 0x80	; 128
 53c:	8b b9       	out	0x0b, r24	; 11
 53e:	88 e8       	ldi	r24, 0x88	; 136
 540:	93 e1       	ldi	r25, 0x13	; 19
 542:	28 ec       	ldi	r18, 0xC8	; 200
 544:	30 e0       	ldi	r19, 0x00	; 0
 546:	f9 01       	movw	r30, r18
 548:	31 97       	sbiw	r30, 0x01	; 1
 54a:	f1 f7       	brne	.-4      	; 0x548 <main+0x62>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 54c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 54e:	d9 f7       	brne	.-10     	; 0x546 <main+0x60>
    _delay_ms(500);
    FEED_DOG;
 550:	8b b1       	in	r24, 0x0b	; 11
 552:	80 58       	subi	r24, 0x80	; 128
 554:	8b b9       	out	0x0b, r24	; 11
    D11_OFF;
 556:	29 98       	cbi	0x05, 1	; 5
    EICRA = 1<<ISC10 | 1<<ISC11;		// rising init
}

void PCInit(void)
{
    PCICR |= 1<<PCIE1;			// PCINT[14:8] 
 558:	80 91 68 00 	lds	r24, 0x0068
 55c:	82 60       	ori	r24, 0x02	; 2
 55e:	80 93 68 00 	sts	0x0068, r24
    PCMSK1 |= 0x07;				//
 562:	80 91 6c 00 	lds	r24, 0x006C
 566:	87 60       	ori	r24, 0x07	; 7
 568:	80 93 6c 00 	sts	0x006C, r24
}

void T0Init(void)
{
    TCCR0A = 1<<COM0A1 | 1<<COM0B1 | 1<<WGM00;		// 8bit phase
 56c:	81 ea       	ldi	r24, 0xA1	; 161
 56e:	84 bd       	out	0x24, r24	; 36
    TCCR0B = 1<<CS00;			// 0 divide
 570:	91 e0       	ldi	r25, 0x01	; 1
 572:	95 bd       	out	0x25, r25	; 37
    OCR0A = OCR0B = 0x00;
 574:	18 bc       	out	0x28, r1	; 40
 576:	88 b5       	in	r24, 0x28	; 40
 578:	87 bd       	out	0x27, r24	; 39
}

void T2Init(void)
{
    TCCR2A = 1<<COM2A1 | 1<<WGM20;
 57a:	81 e8       	ldi	r24, 0x81	; 129
 57c:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = 1<<CS20;
 580:	90 93 b1 00 	sts	0x00B1, r25
    OCR2A = 0x00;
 584:	10 92 b3 00 	sts	0x00B3, r1
	return(ADCH);
}

void T1Init(void)
{
	TCCR1B = 1<<ICNC1 | 1<<ICES1 | 1<<CS11;			// rising trigger
 588:	82 ec       	ldi	r24, 0xC2	; 194
 58a:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = 1<<ICIE1;
 58e:	80 e2       	ldi	r24, 0x20	; 32
 590:	80 93 6f 00 	sts	0x006F, r24
	TCNT1 = 0;
 594:	10 92 85 00 	sts	0x0085, r1
 598:	10 92 84 00 	sts	0x0084, r1
* Aref voltage: 2.5V
* sampling frequency 64 divide: 172.8KHz
**************************************/
void ADCInit(void)
{
	ADMUX =  1<<REFS0 | 1<<ADLAR;	// Avcc Ref  左对齐
 59c:	80 e6       	ldi	r24, 0x60	; 96
 59e:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = 1<<ADPS2 | 1<<ADPS0 | 1<<ADEN;	//| 1<<ADATE ;		// 32分频
 5a2:	85 e8       	ldi	r24, 0x85	; 133
 5a4:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB = 0x00;						
 5a8:	10 92 7b 00 	sts	0x007B, r1
	DIDR0 = 0xC8;			// ADC3.6.7
 5ac:	88 ec       	ldi	r24, 0xC8	; 200
 5ae:	80 93 7e 00 	sts	0x007E, r24
	PCInit();
    T0Init();
    T2Init();
	T1Init();
	ADCInit();
	sei();
 5b2:	78 94       	sei
 5b4:	ee 24       	eor	r14, r14
 5b6:	ff 24       	eor	r15, r15
 5b8:	99 24       	eor	r9, r9
 5ba:	cc 24       	eor	r12, r12
 5bc:	dd 24       	eor	r13, r13
 5be:	00 e0       	ldi	r16, 0x00	; 0
 5c0:	10 e0       	ldi	r17, 0x00	; 0
					FEED_DOG;
				OCR0A = OCR0B = OCR2A = value;
			}
			if(value > 250)
			{
				OCR0A = OCR0B = OCR2A = 255;
 5c2:	88 24       	eor	r8, r8
 5c4:	8a 94       	dec	r8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 5c6:	7a e1       	ldi	r23, 0x1A	; 26
 5c8:	57 2e       	mov	r5, r23
				value = porp[255-value];
				dir = 1;
			}
			if(stall && value<250)
			{
				D11_BLINK;
 5ca:	62 e0       	ldi	r22, 0x02	; 2
 5cc:	76 2e       	mov	r7, r22
			{
				value = abs(value);
				value >>= 1;
				if(value > 255)
					value = 255;
				value = porp[255-value];
 5ce:	5f ef       	ldi	r21, 0xFF	; 255
 5d0:	a5 2e       	mov	r10, r21
 5d2:	b1 2c       	mov	r11, r1
				dir = 1;
 5d4:	66 24       	eor	r6, r6
 5d6:	63 94       	inc	r6
	T1Init();
	ADCInit();
	sei();
    while(1)
    {
    	FEED_DOG;
 5d8:	8b b1       	in	r24, 0x0b	; 11
 5da:	80 58       	subi	r24, 0x80	; 128
 5dc:	8b b9       	out	0x0b, r24	; 11
		if(update && overCurr)
 5de:	80 91 1b 02 	lds	r24, 0x021B
 5e2:	88 23       	and	r24, r24
 5e4:	09 f4       	brne	.+2      	; 0x5e8 <main+0x102>
 5e6:	8d c0       	rjmp	.+282    	; 0x702 <main+0x21c>
 5e8:	99 20       	and	r9, r9
 5ea:	09 f4       	brne	.+2      	; 0x5ee <main+0x108>
 5ec:	8a c0       	rjmp	.+276    	; 0x702 <main+0x21c>
		{
			update = 0;
 5ee:	10 92 1b 02 	sts	0x021B, r1
			value = speed-1500;
 5f2:	20 91 16 02 	lds	r18, 0x0216
 5f6:	30 91 17 02 	lds	r19, 0x0217
 5fa:	2c 5d       	subi	r18, 0xDC	; 220
 5fc:	35 40       	sbci	r19, 0x05	; 5
			if(value >= 0)
 5fe:	37 fd       	sbrc	r19, 7
 600:	20 c0       	rjmp	.+64     	; 0x642 <main+0x15c>
			{
				value >>= 1;
 602:	c9 01       	movw	r24, r18
 604:	95 95       	asr	r25
 606:	87 95       	ror	r24
 608:	90 93 1a 02 	sts	0x021A, r25
 60c:	80 93 19 02 	sts	0x0219, r24
				if(value > 255)
 610:	8f 3f       	cpi	r24, 0xFF	; 255
 612:	91 05       	cpc	r25, r1
 614:	29 f0       	breq	.+10     	; 0x620 <main+0x13a>
 616:	24 f0       	brlt	.+8      	; 0x620 <main+0x13a>
					value = 255;
 618:	b0 92 1a 02 	sts	0x021A, r11
 61c:	a0 92 19 02 	sts	0x0219, r10
				value = porp[255-value];
 620:	80 91 19 02 	lds	r24, 0x0219
 624:	90 91 1a 02 	lds	r25, 0x021A
 628:	f5 01       	movw	r30, r10
 62a:	e8 1b       	sub	r30, r24
 62c:	f9 0b       	sbc	r31, r25
 62e:	ee 5f       	subi	r30, 0xFE	; 254
 630:	fe 4f       	sbci	r31, 0xFE	; 254
 632:	80 81       	ld	r24, Z
 634:	80 93 19 02 	sts	0x0219, r24
 638:	10 92 1a 02 	sts	0x021A, r1
				dir = 0;
 63c:	10 92 18 02 	sts	0x0218, r1
 640:	22 c0       	rjmp	.+68     	; 0x686 <main+0x1a0>
			}
			else
			{
				value = abs(value);
				value >>= 1;
 642:	88 27       	eor	r24, r24
 644:	99 27       	eor	r25, r25
 646:	82 1b       	sub	r24, r18
 648:	93 0b       	sbc	r25, r19
 64a:	95 95       	asr	r25
 64c:	87 95       	ror	r24
 64e:	90 93 1a 02 	sts	0x021A, r25
 652:	80 93 19 02 	sts	0x0219, r24
				if(value > 255)
 656:	8f 3f       	cpi	r24, 0xFF	; 255
 658:	91 05       	cpc	r25, r1
 65a:	29 f0       	breq	.+10     	; 0x666 <main+0x180>
 65c:	24 f0       	brlt	.+8      	; 0x666 <main+0x180>
					value = 255;
 65e:	b0 92 1a 02 	sts	0x021A, r11
 662:	a0 92 19 02 	sts	0x0219, r10
				value = porp[255-value];
 666:	80 91 19 02 	lds	r24, 0x0219
 66a:	90 91 1a 02 	lds	r25, 0x021A
 66e:	f5 01       	movw	r30, r10
 670:	e8 1b       	sub	r30, r24
 672:	f9 0b       	sbc	r31, r25
 674:	ee 5f       	subi	r30, 0xFE	; 254
 676:	fe 4f       	sbci	r31, 0xFE	; 254
 678:	80 81       	ld	r24, Z
 67a:	80 93 19 02 	sts	0x0219, r24
 67e:	10 92 1a 02 	sts	0x021A, r1
				dir = 1;
 682:	60 92 18 02 	sts	0x0218, r6
			}
			if(stall && value<250)
 686:	80 91 00 01 	lds	r24, 0x0100
 68a:	88 23       	and	r24, r24
 68c:	d9 f0       	breq	.+54     	; 0x6c4 <main+0x1de>
 68e:	80 91 19 02 	lds	r24, 0x0219
 692:	90 91 1a 02 	lds	r25, 0x021A
 696:	8a 3f       	cpi	r24, 0xFA	; 250
 698:	91 05       	cpc	r25, r1
 69a:	a4 f4       	brge	.+40     	; 0x6c4 <main+0x1de>
			{
				D11_BLINK;
 69c:	85 b1       	in	r24, 0x05	; 5
 69e:	87 25       	eor	r24, r7
 6a0:	85 b9       	out	0x05, r24	; 5
 6a2:	03 c0       	rjmp	.+6      	; 0x6aa <main+0x1c4>
				while(!StartFun(0x80))
					FEED_DOG;
 6a4:	8b b1       	in	r24, 0x0b	; 11
 6a6:	80 58       	subi	r24, 0x80	; 128
 6a8:	8b b9       	out	0x0b, r24	; 11
				dir = 1;
			}
			if(stall && value<250)
			{
				D11_BLINK;
				while(!StartFun(0x80))
 6aa:	80 e8       	ldi	r24, 0x80	; 128
 6ac:	89 de       	rcall	.-750    	; 0x3c0 <StartFun>
 6ae:	89 2b       	or	r24, r25
 6b0:	c9 f3       	breq	.-14     	; 0x6a4 <main+0x1be>
					FEED_DOG;
				OCR0A = OCR0B = OCR2A = value;
 6b2:	80 91 19 02 	lds	r24, 0x0219
 6b6:	80 93 b3 00 	sts	0x00B3, r24
 6ba:	80 91 b3 00 	lds	r24, 0x00B3
 6be:	88 bd       	out	0x28, r24	; 40
 6c0:	88 b5       	in	r24, 0x28	; 40
 6c2:	87 bd       	out	0x27, r24	; 39
			}
			if(value > 250)
 6c4:	80 91 19 02 	lds	r24, 0x0219
 6c8:	90 91 1a 02 	lds	r25, 0x021A
 6cc:	8b 3f       	cpi	r24, 0xFB	; 251
 6ce:	91 05       	cpc	r25, r1
 6d0:	7c f0       	brlt	.+30     	; 0x6f0 <main+0x20a>
			{
				OCR0A = OCR0B = OCR2A = 255;
 6d2:	80 92 b3 00 	sts	0x00B3, r8
 6d6:	80 91 b3 00 	lds	r24, 0x00B3
 6da:	88 bd       	out	0x28, r24	; 40
 6dc:	88 b5       	in	r24, 0x28	; 40
 6de:	87 bd       	out	0x27, r24	; 39
 6e0:	85 2d       	mov	r24, r5
 6e2:	8a 95       	dec	r24
 6e4:	f1 f7       	brne	.-4      	; 0x6e2 <main+0x1fc>
				BREAK_ON;
 6e6:	58 98       	cbi	0x0b, 0	; 11
 6e8:	88 b1       	in	r24, 0x08	; 8
 6ea:	8f 7c       	andi	r24, 0xCF	; 207
 6ec:	88 b9       	out	0x08, r24	; 8
 6ee:	07 c0       	rjmp	.+14     	; 0x6fe <main+0x218>
			}
			else
				OCR0A = OCR0B = OCR2A = value;
 6f0:	80 93 b3 00 	sts	0x00B3, r24
 6f4:	80 91 b3 00 	lds	r24, 0x00B3
 6f8:	88 bd       	out	0x28, r24	; 40
 6fa:	88 b5       	in	r24, 0x28	; 40
 6fc:	87 bd       	out	0x27, r24	; 39
 6fe:	ee 24       	eor	r14, r14
 700:	ff 24       	eor	r15, r15
			lost = 0;
		}
		temp = (AdConvert(3)<<2);
 702:	83 e0       	ldi	r24, 0x03	; 3
 704:	ce dc       	rcall	.-1636   	; 0xa2 <AdConvert>
 706:	ec 01       	movw	r28, r24
//		volt = (AdConvert(7)<<2);
		curr = (AdConvert(6)<<2);
 708:	86 e0       	ldi	r24, 0x06	; 6
 70a:	cb dc       	rcall	.-1642   	; 0xa2 <AdConvert>
		else
		{
			vCount = 0;
		}
*/
		if(curr > 720)		
 70c:	88 0f       	add	r24, r24
 70e:	99 1f       	adc	r25, r25
 710:	88 0f       	add	r24, r24
 712:	99 1f       	adc	r25, r25
 714:	81 5d       	subi	r24, 0xD1	; 209
 716:	92 40       	sbci	r25, 0x02	; 2
 718:	88 f0       	brcs	.+34     	; 0x73c <main+0x256>
		{
			if(cCount++>650)		// 130ms
 71a:	82 e0       	ldi	r24, 0x02	; 2
 71c:	0b 38       	cpi	r16, 0x8B	; 139
 71e:	18 07       	cpc	r17, r24
 720:	1c f4       	brge	.+6      	; 0x728 <main+0x242>
 722:	0f 5f       	subi	r16, 0xFF	; 255
 724:	1f 4f       	sbci	r17, 0xFF	; 255
 726:	16 c0       	rjmp	.+44     	; 0x754 <main+0x26e>
			{
				D11_ON;
 728:	29 9a       	sbi	0x05, 1	; 5
				overCurr = 0;
				OCR0A = OCR0B = OCR2A = 255;
 72a:	80 92 b3 00 	sts	0x00B3, r8
 72e:	80 91 b3 00 	lds	r24, 0x00B3
 732:	88 bd       	out	0x28, r24	; 40
 734:	88 b5       	in	r24, 0x28	; 40
 736:	87 bd       	out	0x27, r24	; 39
 738:	99 24       	eor	r9, r9
 73a:	0a c0       	rjmp	.+20     	; 0x750 <main+0x26a>
				cCount = 0;
			}
		}
		else
		{
			if(cCount-- < -20000)		// wait for two second
 73c:	21 eb       	ldi	r18, 0xB1	; 177
 73e:	00 3e       	cpi	r16, 0xE0	; 224
 740:	12 07       	cpc	r17, r18
 742:	1c f0       	brlt	.+6      	; 0x74a <main+0x264>
 744:	01 50       	subi	r16, 0x01	; 1
 746:	10 40       	sbci	r17, 0x00	; 0
 748:	05 c0       	rjmp	.+10     	; 0x754 <main+0x26e>
			{
				D11_OFF;
 74a:	29 98       	cbi	0x05, 1	; 5
 74c:	99 24       	eor	r9, r9
 74e:	93 94       	inc	r9
 750:	00 e0       	ldi	r16, 0x00	; 0
 752:	10 e0       	ldi	r17, 0x00	; 0
				overCurr = 1;
				cCount = 0;
			}
		}

		if(temp < 362)
 754:	cc 0f       	add	r28, r28
 756:	dd 1f       	adc	r29, r29
 758:	cc 0f       	add	r28, r28
 75a:	dd 1f       	adc	r29, r29
 75c:	ca 56       	subi	r28, 0x6A	; 106
 75e:	d1 40       	sbci	r29, 0x01	; 1
 760:	58 f4       	brcc	.+22     	; 0x778 <main+0x292>
		{
			if(tCount++ > 2000)
 762:	21 ed       	ldi	r18, 0xD1	; 209
 764:	c2 16       	cp	r12, r18
 766:	27 e0       	ldi	r18, 0x07	; 7
 768:	d2 06       	cpc	r13, r18
 76a:	24 f4       	brge	.+8      	; 0x774 <main+0x28e>
 76c:	08 94       	sec
 76e:	c1 1c       	adc	r12, r1
 770:	d1 1c       	adc	r13, r1
 772:	0e c0       	rjmp	.+28     	; 0x790 <main+0x2aa>
			{
				tCount = 0;
				FAN_ON;
 774:	5a 9a       	sbi	0x0b, 2	; 11
 776:	0a c0       	rjmp	.+20     	; 0x78c <main+0x2a6>
			}
		}
		else if(tCount-- < -2000)
 778:	80 e3       	ldi	r24, 0x30	; 48
 77a:	c8 16       	cp	r12, r24
 77c:	88 ef       	ldi	r24, 0xF8	; 248
 77e:	d8 06       	cpc	r13, r24
 780:	24 f0       	brlt	.+8      	; 0x78a <main+0x2a4>
 782:	08 94       	sec
 784:	c1 08       	sbc	r12, r1
 786:	d1 08       	sbc	r13, r1
 788:	03 c0       	rjmp	.+6      	; 0x790 <main+0x2aa>
		{
			tCount = 0;
			FAN_OFF;
 78a:	5a 98       	cbi	0x0b, 2	; 11
 78c:	cc 24       	eor	r12, r12
 78e:	dd 24       	eor	r13, r13
		}
		
		if(lost++ > 12000)
 790:	21 ee       	ldi	r18, 0xE1	; 225
 792:	e2 16       	cp	r14, r18
 794:	2e e2       	ldi	r18, 0x2E	; 46
 796:	f2 06       	cpc	r15, r18
 798:	20 f4       	brcc	.+8      	; 0x7a2 <main+0x2bc>
 79a:	08 94       	sec
 79c:	e1 1c       	adc	r14, r1
 79e:	f1 1c       	adc	r15, r1
 7a0:	0a c0       	rjmp	.+20     	; 0x7b6 <main+0x2d0>
		{
			OCR0A = OCR0B = OCR2A = 255;
 7a2:	80 92 b3 00 	sts	0x00B3, r8
 7a6:	80 91 b3 00 	lds	r24, 0x00B3
 7aa:	88 bd       	out	0x28, r24	; 40
 7ac:	88 b5       	in	r24, 0x28	; 40
 7ae:	87 bd       	out	0x27, r24	; 39
			lost = 0;
			D14_OFF;
 7b0:	2a 98       	cbi	0x05, 2	; 5
 7b2:	ee 24       	eor	r14, r14
 7b4:	ff 24       	eor	r15, r15
		}
		if(VelInte > 50000)
 7b6:	80 91 12 02 	lds	r24, 0x0212
 7ba:	90 91 13 02 	lds	r25, 0x0213
 7be:	81 55       	subi	r24, 0x51	; 81
 7c0:	93 4c       	sbci	r25, 0xC3	; 195
 7c2:	08 f4       	brcc	.+2      	; 0x7c6 <main+0x2e0>
 7c4:	09 cf       	rjmp	.-494    	; 0x5d8 <main+0xf2>
			VelInte = 0;
 7c6:	10 92 13 02 	sts	0x0213, r1
 7ca:	10 92 12 02 	sts	0x0212, r1
 7ce:	04 cf       	rjmp	.-504    	; 0x5d8 <main+0xf2>

000007d0 <_exit>:
 7d0:	f8 94       	cli

000007d2 <__stop_program>:
 7d2:	ff cf       	rjmp	.-2      	; 0x7d2 <__stop_program>
