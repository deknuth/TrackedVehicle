
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000102  00800100  0000079c  00000830  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000079c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800202  00800202  00000932  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000932  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000121  00000000  00000000  00000952  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005cc  00000000  00000000  00000a73  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000226  00000000  00000000  0000103f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006d5  00000000  00000000  00001265  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  0000193c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001db  00000000  00000000  00001a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000175  00000000  00000000  00001bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00001d6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	33 c2       	rjmp	.+1126   	; 0x470 <__vector_4>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	88 c0       	rjmp	.+272    	; 0x126 <__vector_10>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	12 e0       	ldi	r17, 0x02	; 2
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ec e9       	ldi	r30, 0x9C	; 156
  48:	f7 e0       	ldi	r31, 0x07	; 7
  4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
  50:	a2 30       	cpi	r26, 0x02	; 2
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>

00000056 <__do_clear_bss>:
  56:	12 e0       	ldi	r17, 0x02	; 2
  58:	a2 e0       	ldi	r26, 0x02	; 2
  5a:	b2 e0       	ldi	r27, 0x02	; 2
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	ad 31       	cpi	r26, 0x1D	; 29
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	32 d2       	rcall	.+1124   	; 0x4cc <main>
  68:	97 c3       	rjmp	.+1838   	; 0x798 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <PortInit>:

static void commut(unsigned char phase);        //  commutation

void PortInit(void)
{
    DDRB = 0B00001110;
  6c:	8e e0       	ldi	r24, 0x0E	; 14
  6e:	84 b9       	out	0x04, r24	; 4
    PORTB= 0B00001000;
  70:	88 e0       	ldi	r24, 0x08	; 8
  72:	85 b9       	out	0x05, r24	; 5
    PINB = 0x00;
  74:	13 b8       	out	0x03, r1	; 3

    DDRD = 0B11100101;
  76:	85 ee       	ldi	r24, 0xE5	; 229
  78:	8a b9       	out	0x0a, r24	; 10
    PORTD= 0B01100001;
  7a:	81 e6       	ldi	r24, 0x61	; 97
  7c:	8b b9       	out	0x0b, r24	; 11
    PIND = 0x00;
  7e:	19 b8       	out	0x09, r1	; 9

    DDRC = 0B00110000;
  80:	80 e3       	ldi	r24, 0x30	; 48
  82:	87 b9       	out	0x07, r24	; 7
    PORTC= 0B00110000;
  84:	88 b9       	out	0x08, r24	; 8
    PINC = 0x00;
  86:	16 b8       	out	0x06, r1	; 6
}
  88:	08 95       	ret

0000008a <ADCInit>:
* Aref voltage: 2.5V
* sampling frequency 64 divide: 172.8KHz
**************************************/
void ADCInit(void)
{
	ADMUX =  1<<REFS0 | 1<<ADLAR;	// Avcc Ref  左对齐
  8a:	80 e6       	ldi	r24, 0x60	; 96
  8c:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = 1<<ADPS2 | 1<<ADPS0 | 1<<ADEN;	//| 1<<ADATE ;		// 32分频
  90:	85 e8       	ldi	r24, 0x85	; 133
  92:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB = 0x00;						
  96:	10 92 7b 00 	sts	0x007B, r1
	DIDR0 = 0xC8;			// ADC3.6.7
  9a:	88 ec       	ldi	r24, 0xC8	; 200
  9c:	80 93 7e 00 	sts	0x007E, r24
}
  a0:	08 95       	ret

000000a2 <AdConvert>:

unsigned int AdConvert(unsigned char channal)
{
	ADMUX |= channal;
  a2:	90 91 7c 00 	lds	r25, 0x007C
  a6:	98 2b       	or	r25, r24
  a8:	90 93 7c 00 	sts	0x007C, r25
	ADCSRA |= 1<<ADSC;					// start converter
  ac:	80 91 7a 00 	lds	r24, 0x007A
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	80 93 7a 00 	sts	0x007A, r24
	while ((ADCSRA & 0x40));			// wait converter over  ADSC==0 on converter over
  b6:	80 91 7a 00 	lds	r24, 0x007A
  ba:	86 fd       	sbrc	r24, 6
  bc:	fc cf       	rjmp	.-8      	; 0xb6 <AdConvert+0x14>
	ADMUX &= 0xF0;
  be:	80 91 7c 00 	lds	r24, 0x007C
  c2:	80 7f       	andi	r24, 0xF0	; 240
  c4:	80 93 7c 00 	sts	0x007C, r24
	return(ADCH);
  c8:	80 91 79 00 	lds	r24, 0x0079
}
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	08 95       	ret

000000d0 <T1Init>:

void T1Init(void)
{
	TCCR1B = 1<<ICNC1 | 1<<ICES1 | 1<<CS11;			// rising trigger
  d0:	82 ec       	ldi	r24, 0xC2	; 194
  d2:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = 1<<ICIE1;
  d6:	80 e2       	ldi	r24, 0x20	; 32
  d8:	80 93 6f 00 	sts	0x006F, r24
	TCNT1 = 0;
  dc:	10 92 85 00 	sts	0x0085, r1
  e0:	10 92 84 00 	sts	0x0084, r1
}
  e4:	08 95       	ret

000000e6 <I1Init>:

void I1Init(void)
{
    EICRA = 1<<ISC10 | 1<<ISC11;		// rising init
  e6:	8c e0       	ldi	r24, 0x0C	; 12
  e8:	80 93 69 00 	sts	0x0069, r24
}
  ec:	08 95       	ret

000000ee <PCInit>:

void PCInit(void)
{
    PCICR |= 1<<PCIE1;			// PCINT[14:8] 
  ee:	e8 e6       	ldi	r30, 0x68	; 104
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	82 60       	ori	r24, 0x02	; 2
  f6:	80 83       	st	Z, r24
    PCMSK1 |= 0x07;				//
  f8:	ec e6       	ldi	r30, 0x6C	; 108
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	87 60       	ori	r24, 0x07	; 7
 100:	80 83       	st	Z, r24
}
 102:	08 95       	ret

00000104 <T0Init>:

void T0Init(void)
{
    TCCR0A = 1<<COM0A1 | 1<<COM0B1 | 1<<WGM00;		// 8bit phase
 104:	81 ea       	ldi	r24, 0xA1	; 161
 106:	84 bd       	out	0x24, r24	; 36
    TCCR0B = 1<<CS00;			// 0 divide
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	85 bd       	out	0x25, r24	; 37
    OCR0A = OCR0B = 0x00;
 10c:	18 bc       	out	0x28, r1	; 40
 10e:	88 b5       	in	r24, 0x28	; 40
 110:	87 bd       	out	0x27, r24	; 39
}
 112:	08 95       	ret

00000114 <T2Init>:

void T2Init(void)
{
    TCCR2A = 1<<COM2A1 | 1<<WGM20;
 114:	81 e8       	ldi	r24, 0x81	; 129
 116:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = 1<<CS20;
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	80 93 b1 00 	sts	0x00B1, r24
    OCR2A = 0x00;
 120:	10 92 b3 00 	sts	0x00B3, r1
}
 124:	08 95       	ret

00000126 <__vector_10>:

volatile unsigned char update = 0;
unsigned char times = 0;

ISR(TIMER1_CAPT_vect)
{
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	2f 93       	push	r18
 132:	3f 93       	push	r19
 134:	4f 93       	push	r20
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
	if(CaptStat)
 13a:	80 91 01 01 	lds	r24, 0x0101
 13e:	88 23       	and	r24, r24
 140:	71 f0       	breq	.+28     	; 0x15e <__vector_10+0x38>
	{
		CaptStat = 0;
 142:	10 92 01 01 	sts	0x0101, r1
		CAPT_T_FALL;
 146:	82 e8       	ldi	r24, 0x82	; 130
 148:	80 93 81 00 	sts	0x0081, r24
 14c:	10 92 85 00 	sts	0x0085, r1
 150:	10 92 84 00 	sts	0x0084, r1
 154:	10 92 87 00 	sts	0x0087, r1
 158:	10 92 86 00 	sts	0x0086, r1
 15c:	46 c0       	rjmp	.+140    	; 0x1ea <__vector_10+0xc4>
	}
	else			// falling tigger
	{
		CaptStat=1;
 15e:	41 e0       	ldi	r20, 0x01	; 1
 160:	40 93 01 01 	sts	0x0101, r20
		CAPT_T_RIS;
 164:	82 ec       	ldi	r24, 0xC2	; 194
 166:	80 93 81 00 	sts	0x0081, r24
 16a:	10 92 85 00 	sts	0x0085, r1
 16e:	10 92 84 00 	sts	0x0084, r1
		D14_BLINK;
 172:	85 b1       	in	r24, 0x05	; 5
 174:	94 e0       	ldi	r25, 0x04	; 4
 176:	89 27       	eor	r24, r25
 178:	85 b9       	out	0x05, r24	; 5
		speed = ICR1;
 17a:	80 91 86 00 	lds	r24, 0x0086
 17e:	90 91 87 00 	lds	r25, 0x0087
 182:	90 93 17 02 	sts	0x0217, r25
 186:	80 93 16 02 	sts	0x0216, r24
		if(times++ > 2)
 18a:	80 91 1c 02 	lds	r24, 0x021C
 18e:	8f 5f       	subi	r24, 0xFF	; 255
 190:	80 93 1c 02 	sts	0x021C, r24
 194:	81 50       	subi	r24, 0x01	; 1
 196:	83 30       	cpi	r24, 0x03	; 3
 198:	d0 f0       	brcs	.+52     	; 0x1ce <__vector_10+0xa8>
		{
			if(LastValue == VelInte)
 19a:	20 91 14 02 	lds	r18, 0x0214
 19e:	30 91 15 02 	lds	r19, 0x0215
 1a2:	80 91 12 02 	lds	r24, 0x0212
 1a6:	90 91 13 02 	lds	r25, 0x0213
 1aa:	28 17       	cp	r18, r24
 1ac:	39 07       	cpc	r19, r25
 1ae:	19 f4       	brne	.+6      	; 0x1b6 <__vector_10+0x90>
				stall = 1;
 1b0:	40 93 00 01 	sts	0x0100, r20
 1b4:	0a c0       	rjmp	.+20     	; 0x1ca <__vector_10+0xa4>
			else
			{
				LastValue = VelInte;
 1b6:	80 91 12 02 	lds	r24, 0x0212
 1ba:	90 91 13 02 	lds	r25, 0x0213
 1be:	90 93 15 02 	sts	0x0215, r25
 1c2:	80 93 14 02 	sts	0x0214, r24
				stall = 0;
 1c6:	10 92 00 01 	sts	0x0100, r1
			}
			times = 0;
 1ca:	10 92 1c 02 	sts	0x021C, r1
		}
		if(VelInte > 60000)
 1ce:	80 91 12 02 	lds	r24, 0x0212
 1d2:	90 91 13 02 	lds	r25, 0x0213
 1d6:	81 56       	subi	r24, 0x61	; 97
 1d8:	9a 4e       	sbci	r25, 0xEA	; 234
 1da:	20 f0       	brcs	.+8      	; 0x1e4 <__vector_10+0xbe>
			VelInte = 0;
 1dc:	10 92 13 02 	sts	0x0213, r1
 1e0:	10 92 12 02 	sts	0x0212, r1
		update = 1;
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	80 93 1b 02 	sts	0x021B, r24
	}
}
 1ea:	9f 91       	pop	r25
 1ec:	8f 91       	pop	r24
 1ee:	4f 91       	pop	r20
 1f0:	3f 91       	pop	r19
 1f2:	2f 91       	pop	r18
 1f4:	0f 90       	pop	r0
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	0f 90       	pop	r0
 1fa:	1f 90       	pop	r1
 1fc:	18 95       	reti

000001fe <commut>:
over:
    return 1;
}

void commut(unsigned char phase)        //  commutation
{
 1fe:	98 2f       	mov	r25, r24
    if(dir)
 200:	80 91 18 02 	lds	r24, 0x0218
 204:	88 23       	and	r24, r24
 206:	09 f4       	brne	.+2      	; 0x20a <commut+0xc>
 208:	6c c0       	rjmp	.+216    	; 0x2e2 <commut+0xe4>
    {
        switch(phase)
 20a:	93 30       	cpi	r25, 0x03	; 3
 20c:	09 f4       	brne	.+2      	; 0x210 <commut+0x12>
 20e:	4a c0       	rjmp	.+148    	; 0x2a4 <commut+0xa6>
 210:	94 30       	cpi	r25, 0x04	; 4
 212:	38 f4       	brcc	.+14     	; 0x222 <commut+0x24>
 214:	91 30       	cpi	r25, 0x01	; 1
 216:	09 f4       	brne	.+2      	; 0x21a <commut+0x1c>
 218:	53 c0       	rjmp	.+166    	; 0x2c0 <commut+0xc2>
 21a:	92 30       	cpi	r25, 0x02	; 2
 21c:	09 f0       	breq	.+2      	; 0x220 <commut+0x22>
 21e:	da c0       	rjmp	.+436    	; 0x3d4 <__stack+0xd5>
 220:	33 c0       	rjmp	.+102    	; 0x288 <commut+0x8a>
 222:	95 30       	cpi	r25, 0x05	; 5
 224:	31 f0       	breq	.+12     	; 0x232 <commut+0x34>
 226:	95 30       	cpi	r25, 0x05	; 5
 228:	90 f0       	brcs	.+36     	; 0x24e <commut+0x50>
 22a:	96 30       	cpi	r25, 0x06	; 6
 22c:	09 f0       	breq	.+2      	; 0x230 <commut+0x32>
 22e:	d2 c0       	rjmp	.+420    	; 0x3d4 <__stack+0xd5>
 230:	1c c0       	rjmp	.+56     	; 0x26a <commut+0x6c>
        {
        case 5:
            CHBL;
 232:	84 b5       	in	r24, 0x24	; 36
 234:	8f 70       	andi	r24, 0x0F	; 15
 236:	84 bd       	out	0x24, r24	; 36
 238:	80 91 b0 00 	lds	r24, 0x00B0
 23c:	8f 73       	andi	r24, 0x3F	; 63
 23e:	80 93 b0 00 	sts	0x00B0, r24
 242:	58 9a       	sbi	0x0b, 0	; 11
 244:	88 b1       	in	r24, 0x08	; 8
 246:	80 63       	ori	r24, 0x30	; 48
 248:	88 b9       	out	0x08, r24	; 8
 24a:	00 00       	nop
 24c:	9c c0       	rjmp	.+312    	; 0x386 <__stack+0x87>
            break;
        case 4:
            AHBL;
 24e:	84 b5       	in	r24, 0x24	; 36
 250:	8f 70       	andi	r24, 0x0F	; 15
 252:	84 bd       	out	0x24, r24	; 36
 254:	80 91 b0 00 	lds	r24, 0x00B0
 258:	8f 73       	andi	r24, 0x3F	; 63
 25a:	80 93 b0 00 	sts	0x00B0, r24
 25e:	58 9a       	sbi	0x0b, 0	; 11
 260:	88 b1       	in	r24, 0x08	; 8
 262:	80 63       	ori	r24, 0x30	; 48
 264:	88 b9       	out	0x08, r24	; 8
 266:	00 00       	nop
 268:	9d c0       	rjmp	.+314    	; 0x3a4 <__stack+0xa5>
            break;
        case 6:
            AHCL;
 26a:	84 b5       	in	r24, 0x24	; 36
 26c:	8f 70       	andi	r24, 0x0F	; 15
 26e:	84 bd       	out	0x24, r24	; 36
 270:	80 91 b0 00 	lds	r24, 0x00B0
 274:	8f 73       	andi	r24, 0x3F	; 63
 276:	80 93 b0 00 	sts	0x00B0, r24
 27a:	58 9a       	sbi	0x0b, 0	; 11
 27c:	88 b1       	in	r24, 0x08	; 8
 27e:	80 63       	ori	r24, 0x30	; 48
 280:	88 b9       	out	0x08, r24	; 8
 282:	00 00       	nop
 284:	58 98       	cbi	0x0b, 0	; 11
 286:	4f c0       	rjmp	.+158    	; 0x326 <__stack+0x27>
            break;
        case 2:
            BHCL;
 288:	84 b5       	in	r24, 0x24	; 36
 28a:	8f 70       	andi	r24, 0x0F	; 15
 28c:	84 bd       	out	0x24, r24	; 36
 28e:	80 91 b0 00 	lds	r24, 0x00B0
 292:	8f 73       	andi	r24, 0x3F	; 63
 294:	80 93 b0 00 	sts	0x00B0, r24
 298:	58 9a       	sbi	0x0b, 0	; 11
 29a:	88 b1       	in	r24, 0x08	; 8
 29c:	80 63       	ori	r24, 0x30	; 48
 29e:	88 b9       	out	0x08, r24	; 8
 2a0:	00 00       	nop
 2a2:	40 c0       	rjmp	.+128    	; 0x324 <__stack+0x25>
            break;
        case 3:
            BHAL;
 2a4:	84 b5       	in	r24, 0x24	; 36
 2a6:	8f 70       	andi	r24, 0x0F	; 15
 2a8:	84 bd       	out	0x24, r24	; 36
 2aa:	80 91 b0 00 	lds	r24, 0x00B0
 2ae:	8f 73       	andi	r24, 0x3F	; 63
 2b0:	80 93 b0 00 	sts	0x00B0, r24
 2b4:	58 9a       	sbi	0x0b, 0	; 11
 2b6:	88 b1       	in	r24, 0x08	; 8
 2b8:	80 63       	ori	r24, 0x30	; 48
 2ba:	88 b9       	out	0x08, r24	; 8
 2bc:	00 00       	nop
 2be:	46 c0       	rjmp	.+140    	; 0x34c <__stack+0x4d>
            break;
        case 1:
            CHAL;
 2c0:	84 b5       	in	r24, 0x24	; 36
 2c2:	8f 70       	andi	r24, 0x0F	; 15
 2c4:	84 bd       	out	0x24, r24	; 36
 2c6:	80 91 b0 00 	lds	r24, 0x00B0
 2ca:	8f 73       	andi	r24, 0x3F	; 63
 2cc:	80 93 b0 00 	sts	0x00B0, r24
 2d0:	58 9a       	sbi	0x0b, 0	; 11
 2d2:	88 b1       	in	r24, 0x08	; 8
 2d4:	80 63       	ori	r24, 0x30	; 48
 2d6:	88 b9       	out	0x08, r24	; 8
 2d8:	00 00       	nop
 2da:	44 98       	cbi	0x08, 4	; 8
 2dc:	84 b5       	in	r24, 0x24	; 36
 2de:	80 68       	ori	r24, 0x80	; 128
 2e0:	64 c0       	rjmp	.+200    	; 0x3aa <__stack+0xab>
            break;
        }
    }
    else
    {
        switch(phase)
 2e2:	93 30       	cpi	r25, 0x03	; 3
 2e4:	09 f4       	brne	.+2      	; 0x2e8 <commut+0xea>
 2e6:	51 c0       	rjmp	.+162    	; 0x38a <__stack+0x8b>
 2e8:	94 30       	cpi	r25, 0x04	; 4
 2ea:	38 f4       	brcc	.+14     	; 0x2fa <commut+0xfc>
 2ec:	91 30       	cpi	r25, 0x01	; 1
 2ee:	09 f4       	brne	.+2      	; 0x2f2 <commut+0xf4>
 2f0:	5e c0       	rjmp	.+188    	; 0x3ae <__stack+0xaf>
 2f2:	92 30       	cpi	r25, 0x02	; 2
 2f4:	09 f0       	breq	.+2      	; 0x2f8 <commut+0xfa>
 2f6:	6e c0       	rjmp	.+220    	; 0x3d4 <__stack+0xd5>
 2f8:	39 c0       	rjmp	.+114    	; 0x36c <__stack+0x6d>
 2fa:	95 30       	cpi	r25, 0x05	; 5
 2fc:	31 f0       	breq	.+12     	; 0x30a <__stack+0xb>
 2fe:	95 30       	cpi	r25, 0x05	; 5
 300:	c0 f0       	brcs	.+48     	; 0x332 <__stack+0x33>
 302:	96 30       	cpi	r25, 0x06	; 6
 304:	09 f0       	breq	.+2      	; 0x308 <__stack+0x9>
 306:	66 c0       	rjmp	.+204    	; 0x3d4 <__stack+0xd5>
 308:	23 c0       	rjmp	.+70     	; 0x350 <__stack+0x51>
        {
        case 5:
            BHCL;
 30a:	84 b5       	in	r24, 0x24	; 36
 30c:	8f 70       	andi	r24, 0x0F	; 15
 30e:	84 bd       	out	0x24, r24	; 36
 310:	80 91 b0 00 	lds	r24, 0x00B0
 314:	8f 73       	andi	r24, 0x3F	; 63
 316:	80 93 b0 00 	sts	0x00B0, r24
 31a:	58 9a       	sbi	0x0b, 0	; 11
 31c:	88 b1       	in	r24, 0x08	; 8
 31e:	80 63       	ori	r24, 0x30	; 48
 320:	88 b9       	out	0x08, r24	; 8
 322:	00 00       	nop
 324:	45 98       	cbi	0x08, 5	; 8
 326:	80 91 b0 00 	lds	r24, 0x00B0
 32a:	80 68       	ori	r24, 0x80	; 128
 32c:	80 93 b0 00 	sts	0x00B0, r24
 330:	08 95       	ret
            break;
        case 4:
            BHAL;
 332:	84 b5       	in	r24, 0x24	; 36
 334:	8f 70       	andi	r24, 0x0F	; 15
 336:	84 bd       	out	0x24, r24	; 36
 338:	80 91 b0 00 	lds	r24, 0x00B0
 33c:	8f 73       	andi	r24, 0x3F	; 63
 33e:	80 93 b0 00 	sts	0x00B0, r24
 342:	58 9a       	sbi	0x0b, 0	; 11
 344:	88 b1       	in	r24, 0x08	; 8
 346:	80 63       	ori	r24, 0x30	; 48
 348:	88 b9       	out	0x08, r24	; 8
 34a:	00 00       	nop
 34c:	45 98       	cbi	0x08, 5	; 8
 34e:	c6 cf       	rjmp	.-116    	; 0x2dc <commut+0xde>
            break;
        case 6:
            CHAL;
 350:	84 b5       	in	r24, 0x24	; 36
 352:	8f 70       	andi	r24, 0x0F	; 15
 354:	84 bd       	out	0x24, r24	; 36
 356:	80 91 b0 00 	lds	r24, 0x00B0
 35a:	8f 73       	andi	r24, 0x3F	; 63
 35c:	80 93 b0 00 	sts	0x00B0, r24
 360:	58 9a       	sbi	0x0b, 0	; 11
 362:	88 b1       	in	r24, 0x08	; 8
 364:	80 63       	ori	r24, 0x30	; 48
 366:	88 b9       	out	0x08, r24	; 8
 368:	00 00       	nop
 36a:	b7 cf       	rjmp	.-146    	; 0x2da <commut+0xdc>
            break;
        case 2:
            CHBL;
 36c:	84 b5       	in	r24, 0x24	; 36
 36e:	8f 70       	andi	r24, 0x0F	; 15
 370:	84 bd       	out	0x24, r24	; 36
 372:	80 91 b0 00 	lds	r24, 0x00B0
 376:	8f 73       	andi	r24, 0x3F	; 63
 378:	80 93 b0 00 	sts	0x00B0, r24
 37c:	58 9a       	sbi	0x0b, 0	; 11
 37e:	88 b1       	in	r24, 0x08	; 8
 380:	80 63       	ori	r24, 0x30	; 48
 382:	88 b9       	out	0x08, r24	; 8
 384:	00 00       	nop
 386:	44 98       	cbi	0x08, 4	; 8
 388:	0e c0       	rjmp	.+28     	; 0x3a6 <__stack+0xa7>
            break;
        case 3:
            AHBL;
 38a:	84 b5       	in	r24, 0x24	; 36
 38c:	8f 70       	andi	r24, 0x0F	; 15
 38e:	84 bd       	out	0x24, r24	; 36
 390:	80 91 b0 00 	lds	r24, 0x00B0
 394:	8f 73       	andi	r24, 0x3F	; 63
 396:	80 93 b0 00 	sts	0x00B0, r24
 39a:	58 9a       	sbi	0x0b, 0	; 11
 39c:	88 b1       	in	r24, 0x08	; 8
 39e:	80 63       	ori	r24, 0x30	; 48
 3a0:	88 b9       	out	0x08, r24	; 8
 3a2:	00 00       	nop
 3a4:	58 98       	cbi	0x0b, 0	; 11
 3a6:	84 b5       	in	r24, 0x24	; 36
 3a8:	80 62       	ori	r24, 0x20	; 32
 3aa:	84 bd       	out	0x24, r24	; 36
 3ac:	08 95       	ret
            break;
        case 1:
            AHCL;
 3ae:	84 b5       	in	r24, 0x24	; 36
 3b0:	8f 70       	andi	r24, 0x0F	; 15
 3b2:	84 bd       	out	0x24, r24	; 36
 3b4:	80 91 b0 00 	lds	r24, 0x00B0
 3b8:	8f 73       	andi	r24, 0x3F	; 63
 3ba:	80 93 b0 00 	sts	0x00B0, r24
 3be:	58 9a       	sbi	0x0b, 0	; 11
 3c0:	88 b1       	in	r24, 0x08	; 8
 3c2:	80 63       	ori	r24, 0x30	; 48
 3c4:	88 b9       	out	0x08, r24	; 8
 3c6:	00 00       	nop
 3c8:	58 98       	cbi	0x0b, 0	; 11
 3ca:	80 91 b0 00 	lds	r24, 0x00B0
 3ce:	80 68       	ori	r24, 0x80	; 128
 3d0:	80 93 b0 00 	sts	0x00B0, r24
 3d4:	08 95       	ret

000003d6 <StartFun>:
    VelInte++;
    commut(PINC&0x07);
}

int StartFun(unsigned char SetSpeed)
{
 3d6:	0f 93       	push	r16
 3d8:	1f 93       	push	r17
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
    unsigned char i = 0;
    unsigned char temp = 0xE0;
	stall = times = 0;
 3de:	10 92 1c 02 	sts	0x021C, r1
 3e2:	10 92 00 01 	sts	0x0100, r1
    DIS_PCINT;
 3e6:	80 91 68 00 	lds	r24, 0x0068
 3ea:	8c 7f       	andi	r24, 0xFC	; 252
 3ec:	80 93 68 00 	sts	0x0068, r24
 //   T1_OFF;
 //   I1_OFF;
    OCR0A = OCR0B = OCR2A = temp;
 3f0:	80 ee       	ldi	r24, 0xE0	; 224
 3f2:	80 93 b3 00 	sts	0x00B3, r24
 3f6:	80 91 b3 00 	lds	r24, 0x00B3
 3fa:	88 bd       	out	0x28, r24	; 40
 3fc:	88 b5       	in	r24, 0x28	; 40
 3fe:	87 bd       	out	0x27, r24	; 39
    ENB_PCINT;				// Enable PC interrupt
 400:	80 91 68 00 	lds	r24, 0x0068
 404:	82 60       	ori	r24, 0x02	; 2
 406:	80 93 68 00 	sts	0x0068, r24
 40a:	00 ee       	ldi	r16, 0xE0	; 224
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 40c:	c0 e2       	ldi	r28, 0x20	; 32
 40e:	de e4       	ldi	r29, 0x4E	; 78
 410:	10 e0       	ldi	r17, 0x00	; 0
    while(1)
    {
        for(i=0; i<8; i++)
        {
            if(VelInte > 4)     // motor start success
 412:	80 91 12 02 	lds	r24, 0x0212
 416:	90 91 13 02 	lds	r25, 0x0213
 41a:	05 97       	sbiw	r24, 0x05	; 5
 41c:	08 f5       	brcc	.+66     	; 0x460 <StartFun+0x8a>
                goto over;
            commut(i);
 41e:	81 2f       	mov	r24, r17
 420:	ee de       	rcall	.-548    	; 0x1fe <commut>
 422:	ce 01       	movw	r24, r28
 424:	01 97       	sbiw	r24, 0x01	; 1
 426:	f1 f7       	brne	.-4      	; 0x424 <StartFun+0x4e>
 //   I1_OFF;
    OCR0A = OCR0B = OCR2A = temp;
    ENB_PCINT;				// Enable PC interrupt
    while(1)
    {
        for(i=0; i<8; i++)
 428:	1f 5f       	subi	r17, 0xFF	; 255
 42a:	18 30       	cpi	r17, 0x08	; 8
 42c:	91 f7       	brne	.-28     	; 0x412 <StartFun+0x3c>
            if(VelInte > 4)     // motor start success
                goto over;
            commut(i);
            _delay_ms(10);
        }
        temp -= 8;
 42e:	08 50       	subi	r16, 0x08	; 8
        if(temp < 24)
 430:	00 31       	cpi	r16, 0x10	; 16
 432:	59 f4       	brne	.+22     	; 0x44a <StartFun+0x74>
        {
            OCR0A = OCR0B = OCR2A = 0xFF;
 434:	8f ef       	ldi	r24, 0xFF	; 255
 436:	80 93 b3 00 	sts	0x00B3, r24
 43a:	80 91 b3 00 	lds	r24, 0x00B3
 43e:	88 bd       	out	0x28, r24	; 40
 440:	88 b5       	in	r24, 0x28	; 40
 442:	87 bd       	out	0x27, r24	; 39
 444:	20 e0       	ldi	r18, 0x00	; 0
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	0d c0       	rjmp	.+26     	; 0x464 <StartFun+0x8e>
            return 0;
        }
        else
            OCR0A = OCR0B = OCR2A = temp;
 44a:	00 93 b3 00 	sts	0x00B3, r16
 44e:	80 91 b3 00 	lds	r24, 0x00B3
 452:	88 bd       	out	0x28, r24	; 40
 454:	88 b5       	in	r24, 0x28	; 40
 456:	87 bd       	out	0x27, r24	; 39
		FEED_DOG;
 458:	8b b1       	in	r24, 0x0b	; 11
 45a:	80 58       	subi	r24, 0x80	; 128
 45c:	8b b9       	out	0x0b, r24	; 11
 45e:	d8 cf       	rjmp	.-80     	; 0x410 <StartFun+0x3a>
    }
 460:	21 e0       	ldi	r18, 0x01	; 1
 462:	30 e0       	ldi	r19, 0x00	; 0
over:
    return 1;
}
 464:	c9 01       	movw	r24, r18
 466:	df 91       	pop	r29
 468:	cf 91       	pop	r28
 46a:	1f 91       	pop	r17
 46c:	0f 91       	pop	r16
 46e:	08 95       	ret

00000470 <__vector_4>:
		update = 1;
	}
}

ISR(PCINT1_vect)
{
 470:	1f 92       	push	r1
 472:	0f 92       	push	r0
 474:	0f b6       	in	r0, 0x3f	; 63
 476:	0f 92       	push	r0
 478:	11 24       	eor	r1, r1
 47a:	2f 93       	push	r18
 47c:	3f 93       	push	r19
 47e:	4f 93       	push	r20
 480:	5f 93       	push	r21
 482:	6f 93       	push	r22
 484:	7f 93       	push	r23
 486:	8f 93       	push	r24
 488:	9f 93       	push	r25
 48a:	af 93       	push	r26
 48c:	bf 93       	push	r27
 48e:	ef 93       	push	r30
 490:	ff 93       	push	r31
    VelInte++;
 492:	80 91 12 02 	lds	r24, 0x0212
 496:	90 91 13 02 	lds	r25, 0x0213
 49a:	01 96       	adiw	r24, 0x01	; 1
 49c:	90 93 13 02 	sts	0x0213, r25
 4a0:	80 93 12 02 	sts	0x0212, r24
    commut(PINC&0x07);
 4a4:	86 b1       	in	r24, 0x06	; 6
 4a6:	87 70       	andi	r24, 0x07	; 7
 4a8:	aa de       	rcall	.-684    	; 0x1fe <commut>
}
 4aa:	ff 91       	pop	r31
 4ac:	ef 91       	pop	r30
 4ae:	bf 91       	pop	r27
 4b0:	af 91       	pop	r26
 4b2:	9f 91       	pop	r25
 4b4:	8f 91       	pop	r24
 4b6:	7f 91       	pop	r23
 4b8:	6f 91       	pop	r22
 4ba:	5f 91       	pop	r21
 4bc:	4f 91       	pop	r20
 4be:	3f 91       	pop	r19
 4c0:	2f 91       	pop	r18
 4c2:	0f 90       	pop	r0
 4c4:	0f be       	out	0x3f, r0	; 63
 4c6:	0f 90       	pop	r0
 4c8:	1f 90       	pop	r1
 4ca:	18 95       	reti

000004cc <main>:
        }
    }
}

int main(void)
{
 4cc:	6f 92       	push	r6
 4ce:	7f 92       	push	r7
 4d0:	8f 92       	push	r8
 4d2:	9f 92       	push	r9
 4d4:	af 92       	push	r10
 4d6:	bf 92       	push	r11
 4d8:	cf 92       	push	r12
 4da:	df 92       	push	r13
 4dc:	ef 92       	push	r14
 4de:	ff 92       	push	r15
 4e0:	0f 93       	push	r16
 4e2:	1f 93       	push	r17
 4e4:	cf 93       	push	r28
 4e6:	df 93       	push	r29
	
	unsigned char overCurr = 0;
	unsigned int temp = 0;
    int tCount = 0;
	int cCount = 0;
	cli();
 4e8:	f8 94       	cli
    PortInit();
 4ea:	c0 dd       	rcall	.-1152   	; 0x6c <PortInit>
    D11_ON;
 4ec:	29 9a       	sbi	0x05, 1	; 5
 4ee:	88 e8       	ldi	r24, 0x88	; 136
 4f0:	93 e1       	ldi	r25, 0x13	; 19
 4f2:	28 ec       	ldi	r18, 0xC8	; 200
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	f9 01       	movw	r30, r18
 4f8:	31 97       	sbiw	r30, 0x01	; 1
 4fa:	f1 f7       	brne	.-4      	; 0x4f8 <main+0x2c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4fc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4fe:	d9 f7       	brne	.-10     	; 0x4f6 <main+0x2a>
    _delay_ms(500);
    D11_OFF;
 500:	29 98       	cbi	0x05, 1	; 5
    FEED_DOG;
 502:	8b b1       	in	r24, 0x0b	; 11
 504:	80 58       	subi	r24, 0x80	; 128
 506:	8b b9       	out	0x0b, r24	; 11
 508:	88 e8       	ldi	r24, 0x88	; 136
 50a:	93 e1       	ldi	r25, 0x13	; 19
 50c:	28 ec       	ldi	r18, 0xC8	; 200
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	f9 01       	movw	r30, r18
 512:	31 97       	sbiw	r30, 0x01	; 1
 514:	f1 f7       	brne	.-4      	; 0x512 <main+0x46>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 516:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 518:	d9 f7       	brne	.-10     	; 0x510 <main+0x44>
	_delay_ms(500);
    D11_ON;
 51a:	29 9a       	sbi	0x05, 1	; 5
    FEED_DOG;
 51c:	8b b1       	in	r24, 0x0b	; 11
 51e:	80 58       	subi	r24, 0x80	; 128
 520:	8b b9       	out	0x0b, r24	; 11
 522:	88 e8       	ldi	r24, 0x88	; 136
 524:	93 e1       	ldi	r25, 0x13	; 19
 526:	28 ec       	ldi	r18, 0xC8	; 200
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	f9 01       	movw	r30, r18
 52c:	31 97       	sbiw	r30, 0x01	; 1
 52e:	f1 f7       	brne	.-4      	; 0x52c <main+0x60>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 530:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 532:	d9 f7       	brne	.-10     	; 0x52a <main+0x5e>
    _delay_ms(500);
    FEED_DOG;
 534:	8b b1       	in	r24, 0x0b	; 11
 536:	80 58       	subi	r24, 0x80	; 128
 538:	8b b9       	out	0x0b, r24	; 11
    D11_OFF;
 53a:	29 98       	cbi	0x05, 1	; 5
    EICRA = 1<<ISC10 | 1<<ISC11;		// rising init
}

void PCInit(void)
{
    PCICR |= 1<<PCIE1;			// PCINT[14:8] 
 53c:	80 91 68 00 	lds	r24, 0x0068
 540:	82 60       	ori	r24, 0x02	; 2
 542:	80 93 68 00 	sts	0x0068, r24
    PCMSK1 |= 0x07;				//
 546:	80 91 6c 00 	lds	r24, 0x006C
 54a:	87 60       	ori	r24, 0x07	; 7
 54c:	80 93 6c 00 	sts	0x006C, r24
}

void T0Init(void)
{
    TCCR0A = 1<<COM0A1 | 1<<COM0B1 | 1<<WGM00;		// 8bit phase
 550:	81 ea       	ldi	r24, 0xA1	; 161
 552:	84 bd       	out	0x24, r24	; 36
    TCCR0B = 1<<CS00;			// 0 divide
 554:	91 e0       	ldi	r25, 0x01	; 1
 556:	95 bd       	out	0x25, r25	; 37
    OCR0A = OCR0B = 0x00;
 558:	18 bc       	out	0x28, r1	; 40
 55a:	88 b5       	in	r24, 0x28	; 40
 55c:	87 bd       	out	0x27, r24	; 39
}

void T2Init(void)
{
    TCCR2A = 1<<COM2A1 | 1<<WGM20;
 55e:	81 e8       	ldi	r24, 0x81	; 129
 560:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = 1<<CS20;
 564:	90 93 b1 00 	sts	0x00B1, r25
    OCR2A = 0x00;
 568:	10 92 b3 00 	sts	0x00B3, r1
	return(ADCH);
}

void T1Init(void)
{
	TCCR1B = 1<<ICNC1 | 1<<ICES1 | 1<<CS11;			// rising trigger
 56c:	82 ec       	ldi	r24, 0xC2	; 194
 56e:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = 1<<ICIE1;
 572:	80 e2       	ldi	r24, 0x20	; 32
 574:	80 93 6f 00 	sts	0x006F, r24
	TCNT1 = 0;
 578:	10 92 85 00 	sts	0x0085, r1
 57c:	10 92 84 00 	sts	0x0084, r1
* Aref voltage: 2.5V
* sampling frequency 64 divide: 172.8KHz
**************************************/
void ADCInit(void)
{
	ADMUX =  1<<REFS0 | 1<<ADLAR;	// Avcc Ref  左对齐
 580:	80 e6       	ldi	r24, 0x60	; 96
 582:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = 1<<ADPS2 | 1<<ADPS0 | 1<<ADEN;	//| 1<<ADATE ;		// 32分频
 586:	85 e8       	ldi	r24, 0x85	; 133
 588:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB = 0x00;						
 58c:	10 92 7b 00 	sts	0x007B, r1
	DIDR0 = 0xC8;			// ADC3.6.7
 590:	88 ec       	ldi	r24, 0xC8	; 200
 592:	80 93 7e 00 	sts	0x007E, r24
	PCInit();
    T0Init();
    T2Init();
	T1Init();
	ADCInit();
	sei();
 596:	78 94       	sei
 598:	00 e0       	ldi	r16, 0x00	; 0
 59a:	10 e0       	ldi	r17, 0x00	; 0
 59c:	99 24       	eor	r9, r9
 59e:	cc 24       	eor	r12, r12
 5a0:	dd 24       	eor	r13, r13
 5a2:	ee 24       	eor	r14, r14
 5a4:	ff 24       	eor	r15, r15
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 5a6:	68 e2       	ldi	r22, 0x28	; 40
 5a8:	66 2e       	mov	r6, r22
			{
				value = abs(value);
				value >>= 1;
				if(value > 255)
					value = 255;
				value = porp[255-value];
 5aa:	5f ef       	ldi	r21, 0xFF	; 255
 5ac:	a5 2e       	mov	r10, r21
 5ae:	b1 2c       	mov	r11, r1
				dir = 1;
 5b0:	77 24       	eor	r7, r7
 5b2:	73 94       	inc	r7
		{
			if(cCount++>650)		// 130ms
			{
				D11_ON;
				overCurr = 0;
				OCR0A = OCR0B = OCR2A = 255;
 5b4:	88 24       	eor	r8, r8
 5b6:	8a 94       	dec	r8
 5b8:	02 c0       	rjmp	.+4      	; 0x5be <main+0xf2>
		{
			tCount = 0;
			FAN_OFF;
		}
		
		if(lost++ > 12000)
 5ba:	0f 5f       	subi	r16, 0xFF	; 255
 5bc:	1f 4f       	sbci	r17, 0xFF	; 255
	T1Init();
	ADCInit();
	sei();
    while(1)
    {
    	FEED_DOG;
 5be:	8b b1       	in	r24, 0x0b	; 11
 5c0:	80 58       	subi	r24, 0x80	; 128
 5c2:	8b b9       	out	0x0b, r24	; 11
		if(update && overCurr)
 5c4:	80 91 1b 02 	lds	r24, 0x021B
 5c8:	88 23       	and	r24, r24
 5ca:	09 f4       	brne	.+2      	; 0x5ce <main+0x102>
 5cc:	8a c0       	rjmp	.+276    	; 0x6e2 <main+0x216>
 5ce:	99 20       	and	r9, r9
 5d0:	09 f4       	brne	.+2      	; 0x5d4 <main+0x108>
 5d2:	87 c0       	rjmp	.+270    	; 0x6e2 <main+0x216>
		{
			update = 0;
 5d4:	10 92 1b 02 	sts	0x021B, r1
			value = speed-1500;
 5d8:	20 91 16 02 	lds	r18, 0x0216
 5dc:	30 91 17 02 	lds	r19, 0x0217
 5e0:	2c 5d       	subi	r18, 0xDC	; 220
 5e2:	35 40       	sbci	r19, 0x05	; 5
			if(value >= 0)
 5e4:	37 fd       	sbrc	r19, 7
 5e6:	20 c0       	rjmp	.+64     	; 0x628 <main+0x15c>
			{
				value >>= 1;
 5e8:	c9 01       	movw	r24, r18
 5ea:	95 95       	asr	r25
 5ec:	87 95       	ror	r24
 5ee:	90 93 1a 02 	sts	0x021A, r25
 5f2:	80 93 19 02 	sts	0x0219, r24
				if(value > 255)
 5f6:	8f 3f       	cpi	r24, 0xFF	; 255
 5f8:	91 05       	cpc	r25, r1
 5fa:	29 f0       	breq	.+10     	; 0x606 <main+0x13a>
 5fc:	24 f0       	brlt	.+8      	; 0x606 <main+0x13a>
					value = 255;
 5fe:	b0 92 1a 02 	sts	0x021A, r11
 602:	a0 92 19 02 	sts	0x0219, r10
				value = porp[255-value];
 606:	80 91 19 02 	lds	r24, 0x0219
 60a:	90 91 1a 02 	lds	r25, 0x021A
 60e:	f5 01       	movw	r30, r10
 610:	e8 1b       	sub	r30, r24
 612:	f9 0b       	sbc	r31, r25
 614:	ee 5f       	subi	r30, 0xFE	; 254
 616:	fe 4f       	sbci	r31, 0xFE	; 254
 618:	80 81       	ld	r24, Z
 61a:	80 93 19 02 	sts	0x0219, r24
 61e:	10 92 1a 02 	sts	0x021A, r1
				dir = 0;
 622:	10 92 18 02 	sts	0x0218, r1
 626:	22 c0       	rjmp	.+68     	; 0x66c <main+0x1a0>
			}
			else
			{
				value = abs(value);
				value >>= 1;
 628:	88 27       	eor	r24, r24
 62a:	99 27       	eor	r25, r25
 62c:	82 1b       	sub	r24, r18
 62e:	93 0b       	sbc	r25, r19
 630:	95 95       	asr	r25
 632:	87 95       	ror	r24
 634:	90 93 1a 02 	sts	0x021A, r25
 638:	80 93 19 02 	sts	0x0219, r24
				if(value > 255)
 63c:	8f 3f       	cpi	r24, 0xFF	; 255
 63e:	91 05       	cpc	r25, r1
 640:	29 f0       	breq	.+10     	; 0x64c <main+0x180>
 642:	24 f0       	brlt	.+8      	; 0x64c <main+0x180>
					value = 255;
 644:	b0 92 1a 02 	sts	0x021A, r11
 648:	a0 92 19 02 	sts	0x0219, r10
				value = porp[255-value];
 64c:	80 91 19 02 	lds	r24, 0x0219
 650:	90 91 1a 02 	lds	r25, 0x021A
 654:	f5 01       	movw	r30, r10
 656:	e8 1b       	sub	r30, r24
 658:	f9 0b       	sbc	r31, r25
 65a:	ee 5f       	subi	r30, 0xFE	; 254
 65c:	fe 4f       	sbci	r31, 0xFE	; 254
 65e:	80 81       	ld	r24, Z
 660:	80 93 19 02 	sts	0x0219, r24
 664:	10 92 1a 02 	sts	0x021A, r1
				dir = 1;
 668:	70 92 18 02 	sts	0x0218, r7
			}
			if(stall && value<255)
 66c:	80 91 00 01 	lds	r24, 0x0100
 670:	88 23       	and	r24, r24
 672:	c1 f0       	breq	.+48     	; 0x6a4 <main+0x1d8>
 674:	80 91 19 02 	lds	r24, 0x0219
 678:	90 91 1a 02 	lds	r25, 0x021A
 67c:	8f 3f       	cpi	r24, 0xFF	; 255
 67e:	91 05       	cpc	r25, r1
 680:	24 f0       	brlt	.+8      	; 0x68a <main+0x1be>
 682:	10 c0       	rjmp	.+32     	; 0x6a4 <main+0x1d8>
			{
				while(!StartFun(0x80))
					FEED_DOG;
 684:	8b b1       	in	r24, 0x0b	; 11
 686:	80 58       	subi	r24, 0x80	; 128
 688:	8b b9       	out	0x0b, r24	; 11
				value = porp[255-value];
				dir = 1;
			}
			if(stall && value<255)
			{
				while(!StartFun(0x80))
 68a:	80 e8       	ldi	r24, 0x80	; 128
 68c:	a4 de       	rcall	.-696    	; 0x3d6 <StartFun>
 68e:	89 2b       	or	r24, r25
 690:	c9 f3       	breq	.-14     	; 0x684 <main+0x1b8>
					FEED_DOG;
				OCR0A = OCR0B = OCR2A = value;
 692:	80 91 19 02 	lds	r24, 0x0219
 696:	80 93 b3 00 	sts	0x00B3, r24
 69a:	80 91 b3 00 	lds	r24, 0x00B3
 69e:	88 bd       	out	0x28, r24	; 40
 6a0:	88 b5       	in	r24, 0x28	; 40
 6a2:	87 bd       	out	0x27, r24	; 39
			}
			OCR0A = OCR0B = OCR2A = value;
 6a4:	80 91 19 02 	lds	r24, 0x0219
 6a8:	90 91 1a 02 	lds	r25, 0x021A
 6ac:	80 93 b3 00 	sts	0x00B3, r24
 6b0:	20 91 b3 00 	lds	r18, 0x00B3
 6b4:	28 bd       	out	0x28, r18	; 40
 6b6:	28 b5       	in	r18, 0x28	; 40
 6b8:	27 bd       	out	0x27, r18	; 39
			if(value == 255)
 6ba:	8f 3f       	cpi	r24, 0xFF	; 255
 6bc:	91 05       	cpc	r25, r1
 6be:	79 f4       	brne	.+30     	; 0x6de <main+0x212>
				BREAK_ON;
 6c0:	84 b5       	in	r24, 0x24	; 36
 6c2:	8f 70       	andi	r24, 0x0F	; 15
 6c4:	84 bd       	out	0x24, r24	; 36
 6c6:	80 91 b0 00 	lds	r24, 0x00B0
 6ca:	8f 73       	andi	r24, 0x3F	; 63
 6cc:	80 93 b0 00 	sts	0x00B0, r24
 6d0:	86 2d       	mov	r24, r6
 6d2:	8a 95       	dec	r24
 6d4:	f1 f7       	brne	.-4      	; 0x6d2 <main+0x206>
 6d6:	58 98       	cbi	0x0b, 0	; 11
 6d8:	88 b1       	in	r24, 0x08	; 8
 6da:	8f 7c       	andi	r24, 0xCF	; 207
 6dc:	88 b9       	out	0x08, r24	; 8
 6de:	00 e0       	ldi	r16, 0x00	; 0
 6e0:	10 e0       	ldi	r17, 0x00	; 0
			lost = 0;
		}
		temp = (AdConvert(3)<<2);
 6e2:	83 e0       	ldi	r24, 0x03	; 3
 6e4:	de dc       	rcall	.-1604   	; 0xa2 <AdConvert>
 6e6:	ec 01       	movw	r28, r24
//		volt = (AdConvert(7)<<2);
		curr = (AdConvert(6)<<2);
 6e8:	86 e0       	ldi	r24, 0x06	; 6
 6ea:	db dc       	rcall	.-1610   	; 0xa2 <AdConvert>
		else
		{
			vCount = 0;
		}
*/
		if(curr > 720)		
 6ec:	88 0f       	add	r24, r24
 6ee:	99 1f       	adc	r25, r25
 6f0:	88 0f       	add	r24, r24
 6f2:	99 1f       	adc	r25, r25
 6f4:	81 5d       	subi	r24, 0xD1	; 209
 6f6:	92 40       	sbci	r25, 0x02	; 2
 6f8:	98 f0       	brcs	.+38     	; 0x720 <main+0x254>
		{
			if(cCount++>650)		// 130ms
 6fa:	8b e8       	ldi	r24, 0x8B	; 139
 6fc:	e8 16       	cp	r14, r24
 6fe:	82 e0       	ldi	r24, 0x02	; 2
 700:	f8 06       	cpc	r15, r24
 702:	24 f4       	brge	.+8      	; 0x70c <main+0x240>
 704:	08 94       	sec
 706:	e1 1c       	adc	r14, r1
 708:	f1 1c       	adc	r15, r1
 70a:	18 c0       	rjmp	.+48     	; 0x73c <main+0x270>
			{
				D11_ON;
 70c:	29 9a       	sbi	0x05, 1	; 5
				overCurr = 0;
				OCR0A = OCR0B = OCR2A = 255;
 70e:	80 92 b3 00 	sts	0x00B3, r8
 712:	80 91 b3 00 	lds	r24, 0x00B3
 716:	88 bd       	out	0x28, r24	; 40
 718:	88 b5       	in	r24, 0x28	; 40
 71a:	87 bd       	out	0x27, r24	; 39
 71c:	99 24       	eor	r9, r9
 71e:	0c c0       	rjmp	.+24     	; 0x738 <main+0x26c>
				cCount = 0;
			}
		}
		else
		{
			if(cCount-- < -20000)		// wait for two second
 720:	20 ee       	ldi	r18, 0xE0	; 224
 722:	e2 16       	cp	r14, r18
 724:	21 eb       	ldi	r18, 0xB1	; 177
 726:	f2 06       	cpc	r15, r18
 728:	24 f0       	brlt	.+8      	; 0x732 <main+0x266>
 72a:	08 94       	sec
 72c:	e1 08       	sbc	r14, r1
 72e:	f1 08       	sbc	r15, r1
 730:	05 c0       	rjmp	.+10     	; 0x73c <main+0x270>
			{
				D11_OFF;
 732:	29 98       	cbi	0x05, 1	; 5
 734:	99 24       	eor	r9, r9
 736:	93 94       	inc	r9
 738:	ee 24       	eor	r14, r14
 73a:	ff 24       	eor	r15, r15
				overCurr = 1;
				cCount = 0;
			}
		}

		if(temp < 362)
 73c:	cc 0f       	add	r28, r28
 73e:	dd 1f       	adc	r29, r29
 740:	cc 0f       	add	r28, r28
 742:	dd 1f       	adc	r29, r29
 744:	ca 56       	subi	r28, 0x6A	; 106
 746:	d1 40       	sbci	r29, 0x01	; 1
 748:	58 f4       	brcc	.+22     	; 0x760 <main+0x294>
		{
			if(tCount++ > 2000)
 74a:	21 ed       	ldi	r18, 0xD1	; 209
 74c:	c2 16       	cp	r12, r18
 74e:	27 e0       	ldi	r18, 0x07	; 7
 750:	d2 06       	cpc	r13, r18
 752:	24 f4       	brge	.+8      	; 0x75c <main+0x290>
 754:	08 94       	sec
 756:	c1 1c       	adc	r12, r1
 758:	d1 1c       	adc	r13, r1
 75a:	0e c0       	rjmp	.+28     	; 0x778 <main+0x2ac>
			{
				tCount = 0;
				FAN_ON;
 75c:	5a 9a       	sbi	0x0b, 2	; 11
 75e:	0a c0       	rjmp	.+20     	; 0x774 <main+0x2a8>
			}
		}
		else if(tCount-- < -2000)
 760:	80 e3       	ldi	r24, 0x30	; 48
 762:	c8 16       	cp	r12, r24
 764:	88 ef       	ldi	r24, 0xF8	; 248
 766:	d8 06       	cpc	r13, r24
 768:	24 f0       	brlt	.+8      	; 0x772 <main+0x2a6>
 76a:	08 94       	sec
 76c:	c1 08       	sbc	r12, r1
 76e:	d1 08       	sbc	r13, r1
 770:	03 c0       	rjmp	.+6      	; 0x778 <main+0x2ac>
		{
			tCount = 0;
			FAN_OFF;
 772:	5a 98       	cbi	0x0b, 2	; 11
 774:	cc 24       	eor	r12, r12
 776:	dd 24       	eor	r13, r13
		}
		
		if(lost++ > 12000)
 778:	2e e2       	ldi	r18, 0x2E	; 46
 77a:	01 3e       	cpi	r16, 0xE1	; 225
 77c:	12 07       	cpc	r17, r18
 77e:	08 f4       	brcc	.+2      	; 0x782 <main+0x2b6>
 780:	1c cf       	rjmp	.-456    	; 0x5ba <main+0xee>
		{
			OCR0A = OCR0B = OCR2A = 255;
 782:	80 92 b3 00 	sts	0x00B3, r8
 786:	80 91 b3 00 	lds	r24, 0x00B3
 78a:	88 bd       	out	0x28, r24	; 40
 78c:	88 b5       	in	r24, 0x28	; 40
 78e:	87 bd       	out	0x27, r24	; 39
			lost = 0;
			D14_OFF;
 790:	2a 98       	cbi	0x05, 2	; 5
 792:	00 e0       	ldi	r16, 0x00	; 0
 794:	10 e0       	ldi	r17, 0x00	; 0
 796:	13 cf       	rjmp	.-474    	; 0x5be <main+0xf2>

00000798 <_exit>:
 798:	f8 94       	cli

0000079a <__stop_program>:
 79a:	ff cf       	rjmp	.-2      	; 0x79a <__stop_program>
