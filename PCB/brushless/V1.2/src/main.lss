
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000cc4  00000d58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cc4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000038  00800112  00800112  00000d6a  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000d6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000152  00000000  00000000  00000d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005f6  00000000  00000000  00000edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000026b  00000000  00000000  000014d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000057d  00000000  00000000  0000173d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001da  00000000  00000000  00001d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001cf  00000000  00000000  00001f76  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  00002145  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	74 c1       	rjmp	.+744    	; 0x2ee <__vector_2>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	2d c3       	rjmp	.+1626   	; 0x664 <__vector_4>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	d6 c0       	rjmp	.+428    	; 0x1c8 <__vector_13>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e4 ec       	ldi	r30, 0xC4	; 196
  48:	fc e0       	ldi	r31, 0x0C	; 12
  4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
  50:	a2 31       	cpi	r26, 0x12	; 18
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	a2 e1       	ldi	r26, 0x12	; 18
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	aa 34       	cpi	r26, 0x4A	; 74
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	2c d3       	rcall	.+1624   	; 0x6c0 <main>
  68:	2b c6       	rjmp	.+3158   	; 0xcc0 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <PortInit>:
PID *sptr;
static void commut(unsigned char phase);        //  commutation

void PortInit(void)
{
    DDRB = 0B00001110;
  6c:	8e e0       	ldi	r24, 0x0E	; 14
  6e:	84 b9       	out	0x04, r24	; 4
    PORTB= 0B00001000;
  70:	88 e0       	ldi	r24, 0x08	; 8
  72:	85 b9       	out	0x05, r24	; 5
    PINB = 0x00;
  74:	13 b8       	out	0x03, r1	; 3

    DDRD = 0B11100101;
  76:	85 ee       	ldi	r24, 0xE5	; 229
  78:	8a b9       	out	0x0a, r24	; 10
    PORTD= 0B01100001;
  7a:	81 e6       	ldi	r24, 0x61	; 97
  7c:	8b b9       	out	0x0b, r24	; 11
    PIND = 0x00;
  7e:	19 b8       	out	0x09, r1	; 9

    DDRC = 0B00110000;
  80:	80 e3       	ldi	r24, 0x30	; 48
  82:	87 b9       	out	0x07, r24	; 7
    PORTC= 0B00110000;
  84:	88 b9       	out	0x08, r24	; 8
    PINC = 0x00;
  86:	16 b8       	out	0x06, r1	; 6
}
  88:	08 95       	ret

0000008a <IncPIDInit>:
double Kp = 0.7;
double Ki = 0.4;		// 1.9
double Kd = 0.004;

void IncPIDInit(PID *sptr)
{
  8a:	fc 01       	movw	r30, r24
    sptr->LastError = 0; 		// Error[-1]
  8c:	16 86       	std	Z+14, r1	; 0x0e
  8e:	15 86       	std	Z+13, r1	; 0x0d
    sptr->PrevError = 0; 		// Error[-2]
  90:	10 8a       	std	Z+16, r1	; 0x10
  92:	17 86       	std	Z+15, r1	; 0x0f
    sptr->Proportion = 0.1; 	// Kp Proportional Const
  94:	8d ec       	ldi	r24, 0xCD	; 205
  96:	9c ec       	ldi	r25, 0xCC	; 204
  98:	ac ec       	ldi	r26, 0xCC	; 204
  9a:	bd e3       	ldi	r27, 0x3D	; 61
  9c:	81 83       	std	Z+1, r24	; 0x01
  9e:	92 83       	std	Z+2, r25	; 0x02
  a0:	a3 83       	std	Z+3, r26	; 0x03
  a2:	b4 83       	std	Z+4, r27	; 0x04
    sptr->Integral = 0.01;		// KiIntegral Const
  a4:	8a e0       	ldi	r24, 0x0A	; 10
  a6:	97 ed       	ldi	r25, 0xD7	; 215
  a8:	a3 e2       	ldi	r26, 0x23	; 35
  aa:	bc e3       	ldi	r27, 0x3C	; 60
  ac:	85 83       	std	Z+5, r24	; 0x05
  ae:	96 83       	std	Z+6, r25	; 0x06
  b0:	a7 83       	std	Z+7, r26	; 0x07
  b2:	b0 87       	std	Z+8, r27	; 0x08
    sptr->Derivative = 0.01;	// Kd Derivative Const
  b4:	81 87       	std	Z+9, r24	; 0x09
  b6:	92 87       	std	Z+10, r25	; 0x0a
  b8:	a3 87       	std	Z+11, r26	; 0x0b
  ba:	b4 87       	std	Z+12, r27	; 0x0c
    sptr->SetSpeed = 80;		// setting
  bc:	80 e5       	ldi	r24, 0x50	; 80
  be:	80 83       	st	Z, r24
}
  c0:	08 95       	ret

000000c2 <IncPIDCalc>:

int IncPIDCalc(int NextSpeed,PID *sptr)
{
  c2:	8f 92       	push	r8
  c4:	9f 92       	push	r9
  c6:	af 92       	push	r10
  c8:	bf 92       	push	r11
  ca:	cf 92       	push	r12
  cc:	df 92       	push	r13
  ce:	ef 92       	push	r14
  d0:	ff 92       	push	r15
  d2:	0f 93       	push	r16
  d4:	1f 93       	push	r17
  d6:	5b 01       	movw	r10, r22
    int iError;
    int value;
    iError = sptr->SetSpeed - NextSpeed;	// add cacle
  d8:	fb 01       	movw	r30, r22
  da:	c0 80       	ld	r12, Z
  dc:	dd 24       	eor	r13, r13
  de:	c8 1a       	sub	r12, r24
  e0:	d9 0a       	sbc	r13, r25
    value = Kp * iError - Ki * sptr->LastError + Kd * sptr->PrevError;
  e2:	85 84       	ldd	r8, Z+13	; 0x0d
  e4:	96 84       	ldd	r9, Z+14	; 0x0e
  e6:	b6 01       	movw	r22, r12
  e8:	88 27       	eor	r24, r24
  ea:	77 fd       	sbrc	r23, 7
  ec:	80 95       	com	r24
  ee:	98 2f       	mov	r25, r24
  f0:	f3 d3       	rcall	.+2022   	; 0x8d8 <__floatsisf>
  f2:	20 91 00 01 	lds	r18, 0x0100
  f6:	30 91 01 01 	lds	r19, 0x0101
  fa:	40 91 02 01 	lds	r20, 0x0102
  fe:	50 91 03 01 	lds	r21, 0x0103
 102:	76 d4       	rcall	.+2284   	; 0x9f0 <__mulsf3>
 104:	7b 01       	movw	r14, r22
 106:	8c 01       	movw	r16, r24
 108:	b4 01       	movw	r22, r8
 10a:	88 27       	eor	r24, r24
 10c:	77 fd       	sbrc	r23, 7
 10e:	80 95       	com	r24
 110:	98 2f       	mov	r25, r24
 112:	e2 d3       	rcall	.+1988   	; 0x8d8 <__floatsisf>
 114:	20 91 04 01 	lds	r18, 0x0104
 118:	30 91 05 01 	lds	r19, 0x0105
 11c:	40 91 06 01 	lds	r20, 0x0106
 120:	50 91 07 01 	lds	r21, 0x0107
 124:	65 d4       	rcall	.+2250   	; 0x9f0 <__mulsf3>
 126:	9b 01       	movw	r18, r22
 128:	ac 01       	movw	r20, r24
 12a:	c8 01       	movw	r24, r16
 12c:	b7 01       	movw	r22, r14
 12e:	3c d3       	rcall	.+1656   	; 0x7a8 <__subsf3>
 130:	7b 01       	movw	r14, r22
 132:	8c 01       	movw	r16, r24
 134:	f5 01       	movw	r30, r10
 136:	67 85       	ldd	r22, Z+15	; 0x0f
 138:	70 89       	ldd	r23, Z+16	; 0x10
 13a:	88 27       	eor	r24, r24
 13c:	77 fd       	sbrc	r23, 7
 13e:	80 95       	com	r24
 140:	98 2f       	mov	r25, r24
 142:	ca d3       	rcall	.+1940   	; 0x8d8 <__floatsisf>
 144:	20 91 08 01 	lds	r18, 0x0108
 148:	30 91 09 01 	lds	r19, 0x0109
 14c:	40 91 0a 01 	lds	r20, 0x010A
 150:	50 91 0b 01 	lds	r21, 0x010B
 154:	4d d4       	rcall	.+2202   	; 0x9f0 <__mulsf3>
 156:	9b 01       	movw	r18, r22
 158:	ac 01       	movw	r20, r24
 15a:	c8 01       	movw	r24, r16
 15c:	b7 01       	movw	r22, r14
 15e:	25 d3       	rcall	.+1610   	; 0x7aa <__addsf3>
 160:	88 d3       	rcall	.+1808   	; 0x872 <__fixsfsi>
    sptr->PrevError = sptr->LastError;
 162:	f5 01       	movw	r30, r10
 164:	90 8a       	std	Z+16, r9	; 0x10
 166:	87 86       	std	Z+15, r8	; 0x0f
    sptr->LastError = iError;
 168:	d6 86       	std	Z+14, r13	; 0x0e
 16a:	c5 86       	std	Z+13, r12	; 0x0d
    return(value);
}
 16c:	cb 01       	movw	r24, r22
 16e:	1f 91       	pop	r17
 170:	0f 91       	pop	r16
 172:	ff 90       	pop	r15
 174:	ef 90       	pop	r14
 176:	df 90       	pop	r13
 178:	cf 90       	pop	r12
 17a:	bf 90       	pop	r11
 17c:	af 90       	pop	r10
 17e:	9f 90       	pop	r9
 180:	8f 90       	pop	r8
 182:	08 95       	ret

00000184 <I1Init>:

void I1Init(void)
{
    EICRA = 1<<ISC10 | 1<<ISC11;		// rising init
 184:	8c e0       	ldi	r24, 0x0C	; 12
 186:	80 93 69 00 	sts	0x0069, r24
}
 18a:	08 95       	ret

0000018c <PCInit>:

void PCInit(void)
{
    PCICR |= 1<<PCIE1;			// PCINT[14:8] 
 18c:	e8 e6       	ldi	r30, 0x68	; 104
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	82 60       	ori	r24, 0x02	; 2
 194:	80 83       	st	Z, r24
    PCMSK1 |= 0x07;				//
 196:	ec e6       	ldi	r30, 0x6C	; 108
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	87 60       	ori	r24, 0x07	; 7
 19e:	80 83       	st	Z, r24
}
 1a0:	08 95       	ret

000001a2 <T0Init>:

void T0Init(void)
{
    TCCR0A = 1<<COM0A1 | 1<<COM0B1 | 1<<WGM00;		// 8bit phase
 1a2:	81 ea       	ldi	r24, 0xA1	; 161
 1a4:	84 bd       	out	0x24, r24	; 36
    TCCR0B = 1<<CS00;			// 0 divide
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	85 bd       	out	0x25, r24	; 37
    OCR0A = OCR0B = 0x40;
 1aa:	80 e4       	ldi	r24, 0x40	; 64
 1ac:	88 bd       	out	0x28, r24	; 40
 1ae:	88 b5       	in	r24, 0x28	; 40
 1b0:	87 bd       	out	0x27, r24	; 39
}
 1b2:	08 95       	ret

000001b4 <T2Init>:

void T2Init(void)
{
    TCCR2A = 1<<COM2A1 | 1<<WGM20;
 1b4:	81 e8       	ldi	r24, 0x81	; 129
 1b6:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = 1<<CS20;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	80 93 b1 00 	sts	0x00B1, r24
    OCR2A = 0x40;
 1c0:	80 e4       	ldi	r24, 0x40	; 64
 1c2:	80 93 b3 00 	sts	0x00B3, r24
}
 1c6:	08 95       	ret

000001c8 <__vector_13>:
volatile int sp = 0;
unsigned int value = 0;
unsigned char sBuf[3] = {0};
unsigned char times = 0;
ISR(TIMER1_OVF_vect)
{
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	0f 93       	push	r16
 1d4:	1f 93       	push	r17
 1d6:	2f 93       	push	r18
 1d8:	3f 93       	push	r19
 1da:	4f 93       	push	r20
 1dc:	5f 93       	push	r21
 1de:	6f 93       	push	r22
 1e0:	7f 93       	push	r23
 1e2:	8f 93       	push	r24
 1e4:	9f 93       	push	r25
 1e6:	af 93       	push	r26
 1e8:	bf 93       	push	r27
 1ea:	ef 93       	push	r30
 1ec:	ff 93       	push	r31
    D2_BLINK;
 1ee:	85 b1       	in	r24, 0x05	; 5
 1f0:	92 e0       	ldi	r25, 0x02	; 2
 1f2:	89 27       	eor	r24, r25
 1f4:	85 b9       	out	0x05, r24	; 5
//    sBuf[1] = speed&0xFF;
//    sBuf[0] = (speed>>8);
//   SendStr(sBuf,2);
    sp += IncPIDCalc(speed,sptr);
 1f6:	00 91 3c 01 	lds	r16, 0x013C
 1fa:	10 91 3d 01 	lds	r17, 0x013D
 1fe:	80 91 37 01 	lds	r24, 0x0137
 202:	90 91 38 01 	lds	r25, 0x0138
 206:	60 91 44 01 	lds	r22, 0x0144
 20a:	70 91 45 01 	lds	r23, 0x0145
 20e:	59 df       	rcall	.-334    	; 0xc2 <IncPIDCalc>
 210:	08 0f       	add	r16, r24
 212:	19 1f       	adc	r17, r25
 214:	10 93 3d 01 	sts	0x013D, r17
 218:	00 93 3c 01 	sts	0x013C, r16
    if(sp > 255)
 21c:	80 91 3c 01 	lds	r24, 0x013C
 220:	90 91 3d 01 	lds	r25, 0x013D
 224:	8f 3f       	cpi	r24, 0xFF	; 255
 226:	91 05       	cpc	r25, r1
 228:	39 f0       	breq	.+14     	; 0x238 <__vector_13+0x70>
 22a:	34 f0       	brlt	.+12     	; 0x238 <__vector_13+0x70>
        sp = 255;
 22c:	8f ef       	ldi	r24, 0xFF	; 255
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	90 93 3d 01 	sts	0x013D, r25
 234:	80 93 3c 01 	sts	0x013C, r24
    if(sp < 0)
 238:	80 91 3c 01 	lds	r24, 0x013C
 23c:	90 91 3d 01 	lds	r25, 0x013D
 240:	97 ff       	sbrs	r25, 7
 242:	04 c0       	rjmp	.+8      	; 0x24c <__vector_13+0x84>
        sp = 0;
 244:	10 92 3d 01 	sts	0x013D, r1
 248:	10 92 3c 01 	sts	0x013C, r1
    OCR0A = OCR0B = OCR2A = (255-sp);
 24c:	80 91 3c 01 	lds	r24, 0x013C
 250:	90 91 3d 01 	lds	r25, 0x013D
 254:	80 95       	com	r24
 256:	80 93 b3 00 	sts	0x00B3, r24
 25a:	80 91 b3 00 	lds	r24, 0x00B3
 25e:	88 bd       	out	0x28, r24	; 40
 260:	88 b5       	in	r24, 0x28	; 40
 262:	87 bd       	out	0x27, r24	; 39
    speed = 0;
 264:	10 92 38 01 	sts	0x0138, r1
 268:	10 92 37 01 	sts	0x0137, r1
    if(times++ > 8)
 26c:	80 91 43 01 	lds	r24, 0x0143
 270:	8f 5f       	subi	r24, 0xFF	; 255
 272:	80 93 43 01 	sts	0x0143, r24
 276:	81 50       	subi	r24, 0x01	; 1
 278:	89 30       	cpi	r24, 0x09	; 9
 27a:	d8 f0       	brcs	.+54     	; 0x2b2 <__vector_13+0xea>
    {
        if(LastValue == VelInte)
 27c:	20 91 34 01 	lds	r18, 0x0134
 280:	30 91 35 01 	lds	r19, 0x0135
 284:	80 91 32 01 	lds	r24, 0x0132
 288:	90 91 33 01 	lds	r25, 0x0133
 28c:	28 17       	cp	r18, r24
 28e:	39 07       	cpc	r19, r25
 290:	21 f4       	brne	.+8      	; 0x29a <__vector_13+0xd2>
            stall = 1;
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	80 93 36 01 	sts	0x0136, r24
 298:	0a c0       	rjmp	.+20     	; 0x2ae <__vector_13+0xe6>
        else
        {
            LastValue = VelInte;
 29a:	80 91 32 01 	lds	r24, 0x0132
 29e:	90 91 33 01 	lds	r25, 0x0133
 2a2:	90 93 35 01 	sts	0x0135, r25
 2a6:	80 93 34 01 	sts	0x0134, r24
            stall = 0;
 2aa:	10 92 36 01 	sts	0x0136, r1
        }
        times = 0;
 2ae:	10 92 43 01 	sts	0x0143, r1
    }
    if(VelInte > 60000)
 2b2:	80 91 32 01 	lds	r24, 0x0132
 2b6:	90 91 33 01 	lds	r25, 0x0133
 2ba:	81 56       	subi	r24, 0x61	; 97
 2bc:	9a 4e       	sbci	r25, 0xEA	; 234
 2be:	20 f0       	brcs	.+8      	; 0x2c8 <__vector_13+0x100>
        VelInte = 0;
 2c0:	10 92 33 01 	sts	0x0133, r1
 2c4:	10 92 32 01 	sts	0x0132, r1
}
 2c8:	ff 91       	pop	r31
 2ca:	ef 91       	pop	r30
 2cc:	bf 91       	pop	r27
 2ce:	af 91       	pop	r26
 2d0:	9f 91       	pop	r25
 2d2:	8f 91       	pop	r24
 2d4:	7f 91       	pop	r23
 2d6:	6f 91       	pop	r22
 2d8:	5f 91       	pop	r21
 2da:	4f 91       	pop	r20
 2dc:	3f 91       	pop	r19
 2de:	2f 91       	pop	r18
 2e0:	1f 91       	pop	r17
 2e2:	0f 91       	pop	r16
 2e4:	0f 90       	pop	r0
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	0f 90       	pop	r0
 2ea:	1f 90       	pop	r1
 2ec:	18 95       	reti

000002ee <__vector_2>:

ISR(INT1_vect)
{
 2ee:	1f 92       	push	r1
 2f0:	0f 92       	push	r0
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	0f 92       	push	r0
 2f6:	11 24       	eor	r1, r1
 2f8:	8f 93       	push	r24
 2fa:	9f 93       	push	r25
    speed++;
 2fc:	80 91 37 01 	lds	r24, 0x0137
 300:	90 91 38 01 	lds	r25, 0x0138
 304:	01 96       	adiw	r24, 0x01	; 1
 306:	90 93 38 01 	sts	0x0138, r25
 30a:	80 93 37 01 	sts	0x0137, r24
}
 30e:	9f 91       	pop	r25
 310:	8f 91       	pop	r24
 312:	0f 90       	pop	r0
 314:	0f be       	out	0x3f, r0	; 63
 316:	0f 90       	pop	r0
 318:	1f 90       	pop	r1
 31a:	18 95       	reti

0000031c <commut>:
    I1_ON;
    return 1;
}

void commut(unsigned char phase)        //  commutation
{
 31c:	98 2f       	mov	r25, r24
    if(dir)
 31e:	80 91 39 01 	lds	r24, 0x0139
 322:	88 23       	and	r24, r24
 324:	09 f4       	brne	.+2      	; 0x328 <commut+0xc>
 326:	96 c0       	rjmp	.+300    	; 0x454 <commut+0x138>
    {
        switch(phase)
 328:	93 30       	cpi	r25, 0x03	; 3
 32a:	09 f4       	brne	.+2      	; 0x32e <commut+0x12>
 32c:	66 c0       	rjmp	.+204    	; 0x3fa <commut+0xde>
 32e:	94 30       	cpi	r25, 0x04	; 4
 330:	38 f4       	brcc	.+14     	; 0x340 <commut+0x24>
 332:	91 30       	cpi	r25, 0x01	; 1
 334:	09 f4       	brne	.+2      	; 0x338 <commut+0x1c>
 336:	76 c0       	rjmp	.+236    	; 0x424 <commut+0x108>
 338:	92 30       	cpi	r25, 0x02	; 2
 33a:	09 f0       	breq	.+2      	; 0x33e <commut+0x22>
 33c:	2e c1       	rjmp	.+604    	; 0x59a <commut+0x27e>
 33e:	48 c0       	rjmp	.+144    	; 0x3d0 <commut+0xb4>
 340:	95 30       	cpi	r25, 0x05	; 5
 342:	31 f0       	breq	.+12     	; 0x350 <commut+0x34>
 344:	95 30       	cpi	r25, 0x05	; 5
 346:	c8 f0       	brcs	.+50     	; 0x37a <commut+0x5e>
 348:	96 30       	cpi	r25, 0x06	; 6
 34a:	09 f0       	breq	.+2      	; 0x34e <commut+0x32>
 34c:	26 c1       	rjmp	.+588    	; 0x59a <commut+0x27e>
 34e:	2a c0       	rjmp	.+84     	; 0x3a4 <commut+0x88>
        {
        case 5:
            CHBL;
 350:	84 b5       	in	r24, 0x24	; 36
 352:	8f 70       	andi	r24, 0x0F	; 15
 354:	84 bd       	out	0x24, r24	; 36
 356:	80 91 b0 00 	lds	r24, 0x00B0
 35a:	8f 73       	andi	r24, 0x3F	; 63
 35c:	80 93 b0 00 	sts	0x00B0, r24
 360:	58 9a       	sbi	0x0b, 0	; 11
 362:	88 b1       	in	r24, 0x08	; 8
 364:	80 63       	ori	r24, 0x30	; 48
 366:	88 b9       	out	0x08, r24	; 8
 368:	00 00       	nop
 36a:	00 00       	nop
 36c:	00 00       	nop
 36e:	00 00       	nop
 370:	00 00       	nop
 372:	00 00       	nop
 374:	00 00       	nop
 376:	00 00       	nop
 378:	db c0       	rjmp	.+438    	; 0x530 <commut+0x214>
            break;
        case 4:
            AHBL;
 37a:	84 b5       	in	r24, 0x24	; 36
 37c:	8f 70       	andi	r24, 0x0F	; 15
 37e:	84 bd       	out	0x24, r24	; 36
 380:	80 91 b0 00 	lds	r24, 0x00B0
 384:	8f 73       	andi	r24, 0x3F	; 63
 386:	80 93 b0 00 	sts	0x00B0, r24
 38a:	58 9a       	sbi	0x0b, 0	; 11
 38c:	88 b1       	in	r24, 0x08	; 8
 38e:	80 63       	ori	r24, 0x30	; 48
 390:	88 b9       	out	0x08, r24	; 8
 392:	00 00       	nop
 394:	00 00       	nop
 396:	00 00       	nop
 398:	00 00       	nop
 39a:	00 00       	nop
 39c:	00 00       	nop
 39e:	00 00       	nop
 3a0:	00 00       	nop
 3a2:	dc c0       	rjmp	.+440    	; 0x55c <commut+0x240>
            break;
        case 6:
            AHCL;
 3a4:	84 b5       	in	r24, 0x24	; 36
 3a6:	8f 70       	andi	r24, 0x0F	; 15
 3a8:	84 bd       	out	0x24, r24	; 36
 3aa:	80 91 b0 00 	lds	r24, 0x00B0
 3ae:	8f 73       	andi	r24, 0x3F	; 63
 3b0:	80 93 b0 00 	sts	0x00B0, r24
 3b4:	58 9a       	sbi	0x0b, 0	; 11
 3b6:	88 b1       	in	r24, 0x08	; 8
 3b8:	80 63       	ori	r24, 0x30	; 48
 3ba:	88 b9       	out	0x08, r24	; 8
 3bc:	00 00       	nop
 3be:	00 00       	nop
 3c0:	00 00       	nop
 3c2:	00 00       	nop
 3c4:	00 00       	nop
 3c6:	00 00       	nop
 3c8:	00 00       	nop
 3ca:	00 00       	nop
 3cc:	58 98       	cbi	0x0b, 0	; 11
 3ce:	6b c0       	rjmp	.+214    	; 0x4a6 <commut+0x18a>
            break;
        case 2:
            BHCL;
 3d0:	84 b5       	in	r24, 0x24	; 36
 3d2:	8f 70       	andi	r24, 0x0F	; 15
 3d4:	84 bd       	out	0x24, r24	; 36
 3d6:	80 91 b0 00 	lds	r24, 0x00B0
 3da:	8f 73       	andi	r24, 0x3F	; 63
 3dc:	80 93 b0 00 	sts	0x00B0, r24
 3e0:	58 9a       	sbi	0x0b, 0	; 11
 3e2:	88 b1       	in	r24, 0x08	; 8
 3e4:	80 63       	ori	r24, 0x30	; 48
 3e6:	88 b9       	out	0x08, r24	; 8
 3e8:	00 00       	nop
 3ea:	00 00       	nop
 3ec:	00 00       	nop
 3ee:	00 00       	nop
 3f0:	00 00       	nop
 3f2:	00 00       	nop
 3f4:	00 00       	nop
 3f6:	00 00       	nop
 3f8:	55 c0       	rjmp	.+170    	; 0x4a4 <commut+0x188>
            break;
        case 3:
            BHAL;
 3fa:	84 b5       	in	r24, 0x24	; 36
 3fc:	8f 70       	andi	r24, 0x0F	; 15
 3fe:	84 bd       	out	0x24, r24	; 36
 400:	80 91 b0 00 	lds	r24, 0x00B0
 404:	8f 73       	andi	r24, 0x3F	; 63
 406:	80 93 b0 00 	sts	0x00B0, r24
 40a:	58 9a       	sbi	0x0b, 0	; 11
 40c:	88 b1       	in	r24, 0x08	; 8
 40e:	80 63       	ori	r24, 0x30	; 48
 410:	88 b9       	out	0x08, r24	; 8
 412:	00 00       	nop
 414:	00 00       	nop
 416:	00 00       	nop
 418:	00 00       	nop
 41a:	00 00       	nop
 41c:	00 00       	nop
 41e:	00 00       	nop
 420:	00 00       	nop
 422:	5b c0       	rjmp	.+182    	; 0x4da <commut+0x1be>
            break;
        case 1:
            CHAL;
 424:	84 b5       	in	r24, 0x24	; 36
 426:	8f 70       	andi	r24, 0x0F	; 15
 428:	84 bd       	out	0x24, r24	; 36
 42a:	80 91 b0 00 	lds	r24, 0x00B0
 42e:	8f 73       	andi	r24, 0x3F	; 63
 430:	80 93 b0 00 	sts	0x00B0, r24
 434:	58 9a       	sbi	0x0b, 0	; 11
 436:	88 b1       	in	r24, 0x08	; 8
 438:	80 63       	ori	r24, 0x30	; 48
 43a:	88 b9       	out	0x08, r24	; 8
 43c:	00 00       	nop
 43e:	00 00       	nop
 440:	00 00       	nop
 442:	00 00       	nop
 444:	00 00       	nop
 446:	00 00       	nop
 448:	00 00       	nop
 44a:	00 00       	nop
 44c:	44 98       	cbi	0x08, 4	; 8
 44e:	84 b5       	in	r24, 0x24	; 36
 450:	80 68       	ori	r24, 0x80	; 128
 452:	87 c0       	rjmp	.+270    	; 0x562 <commut+0x246>
            break;
        }
    }
    else
    {
        switch(phase)
 454:	93 30       	cpi	r25, 0x03	; 3
 456:	09 f4       	brne	.+2      	; 0x45a <commut+0x13e>
 458:	6d c0       	rjmp	.+218    	; 0x534 <commut+0x218>
 45a:	94 30       	cpi	r25, 0x04	; 4
 45c:	38 f4       	brcc	.+14     	; 0x46c <commut+0x150>
 45e:	91 30       	cpi	r25, 0x01	; 1
 460:	09 f4       	brne	.+2      	; 0x464 <commut+0x148>
 462:	81 c0       	rjmp	.+258    	; 0x566 <commut+0x24a>
 464:	92 30       	cpi	r25, 0x02	; 2
 466:	09 f0       	breq	.+2      	; 0x46a <commut+0x14e>
 468:	98 c0       	rjmp	.+304    	; 0x59a <commut+0x27e>
 46a:	4e c0       	rjmp	.+156    	; 0x508 <commut+0x1ec>
 46c:	95 30       	cpi	r25, 0x05	; 5
 46e:	31 f0       	breq	.+12     	; 0x47c <commut+0x160>
 470:	95 30       	cpi	r25, 0x05	; 5
 472:	f8 f0       	brcs	.+62     	; 0x4b2 <commut+0x196>
 474:	96 30       	cpi	r25, 0x06	; 6
 476:	09 f0       	breq	.+2      	; 0x47a <commut+0x15e>
 478:	90 c0       	rjmp	.+288    	; 0x59a <commut+0x27e>
 47a:	31 c0       	rjmp	.+98     	; 0x4de <commut+0x1c2>
        {
        case 5:
            BHCL;
 47c:	84 b5       	in	r24, 0x24	; 36
 47e:	8f 70       	andi	r24, 0x0F	; 15
 480:	84 bd       	out	0x24, r24	; 36
 482:	80 91 b0 00 	lds	r24, 0x00B0
 486:	8f 73       	andi	r24, 0x3F	; 63
 488:	80 93 b0 00 	sts	0x00B0, r24
 48c:	58 9a       	sbi	0x0b, 0	; 11
 48e:	88 b1       	in	r24, 0x08	; 8
 490:	80 63       	ori	r24, 0x30	; 48
 492:	88 b9       	out	0x08, r24	; 8
 494:	00 00       	nop
 496:	00 00       	nop
 498:	00 00       	nop
 49a:	00 00       	nop
 49c:	00 00       	nop
 49e:	00 00       	nop
 4a0:	00 00       	nop
 4a2:	00 00       	nop
 4a4:	45 98       	cbi	0x08, 5	; 8
 4a6:	80 91 b0 00 	lds	r24, 0x00B0
 4aa:	80 68       	ori	r24, 0x80	; 128
 4ac:	80 93 b0 00 	sts	0x00B0, r24
 4b0:	08 95       	ret
            break;
        case 4:
            BHAL;
 4b2:	84 b5       	in	r24, 0x24	; 36
 4b4:	8f 70       	andi	r24, 0x0F	; 15
 4b6:	84 bd       	out	0x24, r24	; 36
 4b8:	80 91 b0 00 	lds	r24, 0x00B0
 4bc:	8f 73       	andi	r24, 0x3F	; 63
 4be:	80 93 b0 00 	sts	0x00B0, r24
 4c2:	58 9a       	sbi	0x0b, 0	; 11
 4c4:	88 b1       	in	r24, 0x08	; 8
 4c6:	80 63       	ori	r24, 0x30	; 48
 4c8:	88 b9       	out	0x08, r24	; 8
 4ca:	00 00       	nop
 4cc:	00 00       	nop
 4ce:	00 00       	nop
 4d0:	00 00       	nop
 4d2:	00 00       	nop
 4d4:	00 00       	nop
 4d6:	00 00       	nop
 4d8:	00 00       	nop
 4da:	45 98       	cbi	0x08, 5	; 8
 4dc:	b8 cf       	rjmp	.-144    	; 0x44e <commut+0x132>
            break;
        case 6:
            CHAL;
 4de:	84 b5       	in	r24, 0x24	; 36
 4e0:	8f 70       	andi	r24, 0x0F	; 15
 4e2:	84 bd       	out	0x24, r24	; 36
 4e4:	80 91 b0 00 	lds	r24, 0x00B0
 4e8:	8f 73       	andi	r24, 0x3F	; 63
 4ea:	80 93 b0 00 	sts	0x00B0, r24
 4ee:	58 9a       	sbi	0x0b, 0	; 11
 4f0:	88 b1       	in	r24, 0x08	; 8
 4f2:	80 63       	ori	r24, 0x30	; 48
 4f4:	88 b9       	out	0x08, r24	; 8
 4f6:	00 00       	nop
 4f8:	00 00       	nop
 4fa:	00 00       	nop
 4fc:	00 00       	nop
 4fe:	00 00       	nop
 500:	00 00       	nop
 502:	00 00       	nop
 504:	00 00       	nop
 506:	a2 cf       	rjmp	.-188    	; 0x44c <commut+0x130>
            break;
        case 2:
            CHBL;
 508:	84 b5       	in	r24, 0x24	; 36
 50a:	8f 70       	andi	r24, 0x0F	; 15
 50c:	84 bd       	out	0x24, r24	; 36
 50e:	80 91 b0 00 	lds	r24, 0x00B0
 512:	8f 73       	andi	r24, 0x3F	; 63
 514:	80 93 b0 00 	sts	0x00B0, r24
 518:	58 9a       	sbi	0x0b, 0	; 11
 51a:	88 b1       	in	r24, 0x08	; 8
 51c:	80 63       	ori	r24, 0x30	; 48
 51e:	88 b9       	out	0x08, r24	; 8
 520:	00 00       	nop
 522:	00 00       	nop
 524:	00 00       	nop
 526:	00 00       	nop
 528:	00 00       	nop
 52a:	00 00       	nop
 52c:	00 00       	nop
 52e:	00 00       	nop
 530:	44 98       	cbi	0x08, 4	; 8
 532:	15 c0       	rjmp	.+42     	; 0x55e <commut+0x242>
            break;
        case 3:
            AHBL;
 534:	84 b5       	in	r24, 0x24	; 36
 536:	8f 70       	andi	r24, 0x0F	; 15
 538:	84 bd       	out	0x24, r24	; 36
 53a:	80 91 b0 00 	lds	r24, 0x00B0
 53e:	8f 73       	andi	r24, 0x3F	; 63
 540:	80 93 b0 00 	sts	0x00B0, r24
 544:	58 9a       	sbi	0x0b, 0	; 11
 546:	88 b1       	in	r24, 0x08	; 8
 548:	80 63       	ori	r24, 0x30	; 48
 54a:	88 b9       	out	0x08, r24	; 8
 54c:	00 00       	nop
 54e:	00 00       	nop
 550:	00 00       	nop
 552:	00 00       	nop
 554:	00 00       	nop
 556:	00 00       	nop
 558:	00 00       	nop
 55a:	00 00       	nop
 55c:	58 98       	cbi	0x0b, 0	; 11
 55e:	84 b5       	in	r24, 0x24	; 36
 560:	80 62       	ori	r24, 0x20	; 32
 562:	84 bd       	out	0x24, r24	; 36
 564:	08 95       	ret
            break;
        case 1:
            AHCL;
 566:	84 b5       	in	r24, 0x24	; 36
 568:	8f 70       	andi	r24, 0x0F	; 15
 56a:	84 bd       	out	0x24, r24	; 36
 56c:	80 91 b0 00 	lds	r24, 0x00B0
 570:	8f 73       	andi	r24, 0x3F	; 63
 572:	80 93 b0 00 	sts	0x00B0, r24
 576:	58 9a       	sbi	0x0b, 0	; 11
 578:	88 b1       	in	r24, 0x08	; 8
 57a:	80 63       	ori	r24, 0x30	; 48
 57c:	88 b9       	out	0x08, r24	; 8
 57e:	00 00       	nop
 580:	00 00       	nop
 582:	00 00       	nop
 584:	00 00       	nop
 586:	00 00       	nop
 588:	00 00       	nop
 58a:	00 00       	nop
 58c:	00 00       	nop
 58e:	58 98       	cbi	0x0b, 0	; 11
 590:	80 91 b0 00 	lds	r24, 0x00B0
 594:	80 68       	ori	r24, 0x80	; 128
 596:	80 93 b0 00 	sts	0x00B0, r24
 59a:	08 95       	ret

0000059c <StartFun>:
    VelInte++;
    commut(PINC&0x07);
}

int StartFun(unsigned char SetSpeed)
{
 59c:	0f 93       	push	r16
 59e:	1f 93       	push	r17
 5a0:	cf 93       	push	r28
 5a2:	df 93       	push	r29
    unsigned char i = 0;
    unsigned char temp = 0xE0;
	stall = times = 0;
 5a4:	10 92 43 01 	sts	0x0143, r1
 5a8:	10 92 36 01 	sts	0x0136, r1
    DIS_PCINT;
 5ac:	80 91 68 00 	lds	r24, 0x0068
 5b0:	8c 7f       	andi	r24, 0xFC	; 252
 5b2:	80 93 68 00 	sts	0x0068, r24
    T1_OFF;
 5b6:	10 92 81 00 	sts	0x0081, r1
 5ba:	80 91 6f 00 	lds	r24, 0x006F
 5be:	8e 7f       	andi	r24, 0xFE	; 254
 5c0:	80 93 6f 00 	sts	0x006F, r24
    I1_OFF;
 5c4:	e9 98       	cbi	0x1d, 1	; 29
    OCR0A = OCR0B = OCR2A = temp;
 5c6:	80 ee       	ldi	r24, 0xE0	; 224
 5c8:	80 93 b3 00 	sts	0x00B3, r24
 5cc:	80 91 b3 00 	lds	r24, 0x00B3
 5d0:	88 bd       	out	0x28, r24	; 40
 5d2:	88 b5       	in	r24, 0x28	; 40
 5d4:	87 bd       	out	0x27, r24	; 39
    ENB_PCINT;				// Enable PC interrupt
 5d6:	80 91 68 00 	lds	r24, 0x0068
 5da:	82 60       	ori	r24, 0x02	; 2
 5dc:	80 93 68 00 	sts	0x0068, r24
 5e0:	00 ee       	ldi	r16, 0xE0	; 224
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 5e2:	c0 e2       	ldi	r28, 0x20	; 32
 5e4:	de e4       	ldi	r29, 0x4E	; 78
 5e6:	10 e0       	ldi	r17, 0x00	; 0
    while(1)
    {
        for(i=0; i<8; i++)
        {
            if(VelInte > 4)     // motor start success
 5e8:	80 91 32 01 	lds	r24, 0x0132
 5ec:	90 91 33 01 	lds	r25, 0x0133
 5f0:	05 97       	sbiw	r24, 0x05	; 5
 5f2:	f0 f4       	brcc	.+60     	; 0x630 <StartFun+0x94>
                goto over;
            commut(i);
 5f4:	81 2f       	mov	r24, r17
 5f6:	92 de       	rcall	.-732    	; 0x31c <commut>
 5f8:	ce 01       	movw	r24, r28
 5fa:	01 97       	sbiw	r24, 0x01	; 1
 5fc:	f1 f7       	brne	.-4      	; 0x5fa <StartFun+0x5e>
    I1_OFF;
    OCR0A = OCR0B = OCR2A = temp;
    ENB_PCINT;				// Enable PC interrupt
    while(1)
    {
        for(i=0; i<8; i++)
 5fe:	1f 5f       	subi	r17, 0xFF	; 255
 600:	18 30       	cpi	r17, 0x08	; 8
 602:	91 f7       	brne	.-28     	; 0x5e8 <StartFun+0x4c>
            if(VelInte > 4)     // motor start success
                goto over;
            commut(i);
            _delay_ms(10);
        }
        temp -= 8;
 604:	08 50       	subi	r16, 0x08	; 8
        if(temp < 24)
 606:	00 31       	cpi	r16, 0x10	; 16
 608:	59 f4       	brne	.+22     	; 0x620 <StartFun+0x84>
        {
            OCR0A = OCR0B = OCR2A = 0xFF;
 60a:	8f ef       	ldi	r24, 0xFF	; 255
 60c:	80 93 b3 00 	sts	0x00B3, r24
 610:	80 91 b3 00 	lds	r24, 0x00B3
 614:	88 bd       	out	0x28, r24	; 40
 616:	88 b5       	in	r24, 0x28	; 40
 618:	87 bd       	out	0x27, r24	; 39
 61a:	20 e0       	ldi	r18, 0x00	; 0
 61c:	30 e0       	ldi	r19, 0x00	; 0
 61e:	1c c0       	rjmp	.+56     	; 0x658 <StartFun+0xbc>
            return 0;
        }
        else
            OCR0A = OCR0B = OCR2A = temp;
 620:	00 93 b3 00 	sts	0x00B3, r16
 624:	80 91 b3 00 	lds	r24, 0x00B3
 628:	88 bd       	out	0x28, r24	; 40
 62a:	88 b5       	in	r24, 0x28	; 40
 62c:	87 bd       	out	0x27, r24	; 39
 62e:	db cf       	rjmp	.-74     	; 0x5e6 <StartFun+0x4a>
        {
            OCR1A = OCR1B = OCR2A = i;
            _delay_ms(1);
        }
    }*/
    speed = 0;
 630:	10 92 38 01 	sts	0x0138, r1
 634:	10 92 37 01 	sts	0x0137, r1
    T1_ON;
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	80 93 81 00 	sts	0x0081, r24
 63e:	80 91 6f 00 	lds	r24, 0x006F
 642:	81 60       	ori	r24, 0x01	; 1
 644:	80 93 6f 00 	sts	0x006F, r24
 648:	10 92 85 00 	sts	0x0085, r1
 64c:	10 92 84 00 	sts	0x0084, r1
    I1_ON;
 650:	82 e0       	ldi	r24, 0x02	; 2
 652:	8d bb       	out	0x1d, r24	; 29
 654:	21 e0       	ldi	r18, 0x01	; 1
 656:	30 e0       	ldi	r19, 0x00	; 0
    return 1;
}
 658:	c9 01       	movw	r24, r18
 65a:	df 91       	pop	r29
 65c:	cf 91       	pop	r28
 65e:	1f 91       	pop	r17
 660:	0f 91       	pop	r16
 662:	08 95       	ret

00000664 <__vector_4>:
{
    speed++;
}

ISR(PCINT1_vect)
{
 664:	1f 92       	push	r1
 666:	0f 92       	push	r0
 668:	0f b6       	in	r0, 0x3f	; 63
 66a:	0f 92       	push	r0
 66c:	11 24       	eor	r1, r1
 66e:	2f 93       	push	r18
 670:	3f 93       	push	r19
 672:	4f 93       	push	r20
 674:	5f 93       	push	r21
 676:	6f 93       	push	r22
 678:	7f 93       	push	r23
 67a:	8f 93       	push	r24
 67c:	9f 93       	push	r25
 67e:	af 93       	push	r26
 680:	bf 93       	push	r27
 682:	ef 93       	push	r30
 684:	ff 93       	push	r31
    VelInte++;
 686:	80 91 32 01 	lds	r24, 0x0132
 68a:	90 91 33 01 	lds	r25, 0x0133
 68e:	01 96       	adiw	r24, 0x01	; 1
 690:	90 93 33 01 	sts	0x0133, r25
 694:	80 93 32 01 	sts	0x0132, r24
    commut(PINC&0x07);
 698:	86 b1       	in	r24, 0x06	; 6
 69a:	87 70       	andi	r24, 0x07	; 7
 69c:	3f de       	rcall	.-898    	; 0x31c <commut>
}
 69e:	ff 91       	pop	r31
 6a0:	ef 91       	pop	r30
 6a2:	bf 91       	pop	r27
 6a4:	af 91       	pop	r26
 6a6:	9f 91       	pop	r25
 6a8:	8f 91       	pop	r24
 6aa:	7f 91       	pop	r23
 6ac:	6f 91       	pop	r22
 6ae:	5f 91       	pop	r21
 6b0:	4f 91       	pop	r20
 6b2:	3f 91       	pop	r19
 6b4:	2f 91       	pop	r18
 6b6:	0f 90       	pop	r0
 6b8:	0f be       	out	0x3f, r0	; 63
 6ba:	0f 90       	pop	r0
 6bc:	1f 90       	pop	r1
 6be:	18 95       	reti

000006c0 <main>:
        }
    }
}

int main(void)
{
 6c0:	cf 93       	push	r28
 6c2:	df 93       	push	r29
    sptr = (PID *)malloc(sizeof(PID));
 6c4:	81 e1       	ldi	r24, 0x11	; 17
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	f6 d1       	rcall	.+1004   	; 0xab6 <malloc>
 6ca:	fc 01       	movw	r30, r24
 6cc:	90 93 45 01 	sts	0x0145, r25
 6d0:	80 93 44 01 	sts	0x0144, r24
double Ki = 0.4;		// 1.9
double Kd = 0.004;

void IncPIDInit(PID *sptr)
{
    sptr->LastError = 0; 		// Error[-1]
 6d4:	16 86       	std	Z+14, r1	; 0x0e
 6d6:	15 86       	std	Z+13, r1	; 0x0d
    sptr->PrevError = 0; 		// Error[-2]
 6d8:	10 8a       	std	Z+16, r1	; 0x10
 6da:	17 86       	std	Z+15, r1	; 0x0f
    sptr->Proportion = 0.1; 	// Kp Proportional Const
 6dc:	8d ec       	ldi	r24, 0xCD	; 205
 6de:	9c ec       	ldi	r25, 0xCC	; 204
 6e0:	ac ec       	ldi	r26, 0xCC	; 204
 6e2:	bd e3       	ldi	r27, 0x3D	; 61
 6e4:	81 83       	std	Z+1, r24	; 0x01
 6e6:	92 83       	std	Z+2, r25	; 0x02
 6e8:	a3 83       	std	Z+3, r26	; 0x03
 6ea:	b4 83       	std	Z+4, r27	; 0x04
    sptr->Integral = 0.01;		// KiIntegral Const
 6ec:	8a e0       	ldi	r24, 0x0A	; 10
 6ee:	97 ed       	ldi	r25, 0xD7	; 215
 6f0:	a3 e2       	ldi	r26, 0x23	; 35
 6f2:	bc e3       	ldi	r27, 0x3C	; 60
 6f4:	85 83       	std	Z+5, r24	; 0x05
 6f6:	96 83       	std	Z+6, r25	; 0x06
 6f8:	a7 83       	std	Z+7, r26	; 0x07
 6fa:	b0 87       	std	Z+8, r27	; 0x08
    sptr->Derivative = 0.01;	// Kd Derivative Const
 6fc:	81 87       	std	Z+9, r24	; 0x09
 6fe:	92 87       	std	Z+10, r25	; 0x0a
 700:	a3 87       	std	Z+11, r26	; 0x0b
 702:	b4 87       	std	Z+12, r27	; 0x0c
    sptr->SetSpeed = 80;		// setting
 704:	80 e5       	ldi	r24, 0x50	; 80
 706:	80 83       	st	Z, r24

int main(void)
{
    sptr = (PID *)malloc(sizeof(PID));
    IncPIDInit(sptr);
    PortInit();
 708:	b1 dc       	rcall	.-1694   	; 0x6c <PortInit>
    EICRA = 1<<ISC10 | 1<<ISC11;		// rising init
}

void PCInit(void)
{
    PCICR |= 1<<PCIE1;			// PCINT[14:8] 
 70a:	80 91 68 00 	lds	r24, 0x0068
 70e:	82 60       	ori	r24, 0x02	; 2
 710:	80 93 68 00 	sts	0x0068, r24
    PCMSK1 |= 0x07;				//
 714:	80 91 6c 00 	lds	r24, 0x006C
 718:	87 60       	ori	r24, 0x07	; 7
 71a:	80 93 6c 00 	sts	0x006C, r24
{
    sptr = (PID *)malloc(sizeof(PID));
    IncPIDInit(sptr);
    PortInit();
    PCInit();
    LED_BLINK;
 71e:	85 b1       	in	r24, 0x05	; 5
 720:	94 e0       	ldi	r25, 0x04	; 4
 722:	89 27       	eor	r24, r25
 724:	85 b9       	out	0x05, r24	; 5
 726:	88 e8       	ldi	r24, 0x88	; 136
 728:	93 e1       	ldi	r25, 0x13	; 19
 72a:	28 ec       	ldi	r18, 0xC8	; 200
 72c:	30 e0       	ldi	r19, 0x00	; 0
 72e:	f9 01       	movw	r30, r18
 730:	31 97       	sbiw	r30, 0x01	; 1
 732:	f1 f7       	brne	.-4      	; 0x730 <main+0x70>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 734:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 736:	d9 f7       	brne	.-10     	; 0x72e <main+0x6e>
    _delay_ms(500);
    LED_BLINK;
 738:	85 b1       	in	r24, 0x05	; 5
 73a:	94 e0       	ldi	r25, 0x04	; 4
 73c:	89 27       	eor	r24, r25
 73e:	85 b9       	out	0x05, r24	; 5
    sei();
 740:	78 94       	sei
    PCMSK1 |= 0x07;				//
}

void T0Init(void)
{
    TCCR0A = 1<<COM0A1 | 1<<COM0B1 | 1<<WGM00;		// 8bit phase
 742:	81 ea       	ldi	r24, 0xA1	; 161
 744:	84 bd       	out	0x24, r24	; 36
    TCCR0B = 1<<CS00;			// 0 divide
 746:	21 e0       	ldi	r18, 0x01	; 1
 748:	25 bd       	out	0x25, r18	; 37
    OCR0A = OCR0B = 0x40;
 74a:	90 e4       	ldi	r25, 0x40	; 64
 74c:	98 bd       	out	0x28, r25	; 40
 74e:	88 b5       	in	r24, 0x28	; 40
 750:	87 bd       	out	0x27, r24	; 39
}

void T2Init(void)
{
    TCCR2A = 1<<COM2A1 | 1<<WGM20;
 752:	81 e8       	ldi	r24, 0x81	; 129
 754:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = 1<<CS20;
 758:	20 93 b1 00 	sts	0x00B1, r18
    OCR2A = 0x40;
 75c:	90 93 b3 00 	sts	0x00B3, r25
    return(value);
}

void I1Init(void)
{
    EICRA = 1<<ISC10 | 1<<ISC11;		// rising init
 760:	8c e0       	ldi	r24, 0x0C	; 12
 762:	80 93 69 00 	sts	0x0069, r24
 766:	c8 ec       	ldi	r28, 0xC8	; 200
 768:	d0 e0       	ldi	r29, 0x00	; 0
 76a:	07 c0       	rjmp	.+14     	; 0x77a <main+0xba>
    LED_BLINK;
    sei();
    T0Init();
    T2Init();
    I1Init();
    while(!StartFun(0x80))
 76c:	88 e8       	ldi	r24, 0x88	; 136
 76e:	93 e1       	ldi	r25, 0x13	; 19
 770:	fe 01       	movw	r30, r28
 772:	31 97       	sbiw	r30, 0x01	; 1
 774:	f1 f7       	brne	.-4      	; 0x772 <main+0xb2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 776:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 778:	d9 f7       	brne	.-10     	; 0x770 <main+0xb0>
 77a:	80 e8       	ldi	r24, 0x80	; 128
 77c:	0f df       	rcall	.-482    	; 0x59c <StartFun>
 77e:	89 2b       	or	r24, r25
 780:	a9 f3       	breq	.-22     	; 0x76c <main+0xac>
 782:	c8 ec       	ldi	r28, 0xC8	; 200
 784:	d0 e0       	ldi	r29, 0x00	; 0
        _delay_ms(500);
    while(1)
    {
        if(stall)
 786:	80 91 36 01 	lds	r24, 0x0136
 78a:	88 23       	and	r24, r24
 78c:	e1 f3       	breq	.-8      	; 0x786 <main+0xc6>
 78e:	07 c0       	rjmp	.+14     	; 0x79e <main+0xde>
 790:	88 e8       	ldi	r24, 0x88	; 136
 792:	93 e1       	ldi	r25, 0x13	; 19
 794:	fe 01       	movw	r30, r28
 796:	31 97       	sbiw	r30, 0x01	; 1
 798:	f1 f7       	brne	.-4      	; 0x796 <main+0xd6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 79a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 79c:	d9 f7       	brne	.-10     	; 0x794 <main+0xd4>
        {
            while(!StartFun(0x80))
 79e:	80 e8       	ldi	r24, 0x80	; 128
 7a0:	fd de       	rcall	.-518    	; 0x59c <StartFun>
 7a2:	89 2b       	or	r24, r25
 7a4:	81 f7       	brne	.-32     	; 0x786 <main+0xc6>
 7a6:	f4 cf       	rjmp	.-24     	; 0x790 <main+0xd0>

000007a8 <__subsf3>:
 7a8:	50 58       	subi	r21, 0x80	; 128

000007aa <__addsf3>:
 7aa:	bb 27       	eor	r27, r27
 7ac:	aa 27       	eor	r26, r26
 7ae:	0e d0       	rcall	.+28     	; 0x7cc <__addsf3x>
 7b0:	e5 c0       	rjmp	.+458    	; 0x97c <__fp_round>
 7b2:	d6 d0       	rcall	.+428    	; 0x960 <__fp_pscA>
 7b4:	30 f0       	brcs	.+12     	; 0x7c2 <__addsf3+0x18>
 7b6:	db d0       	rcall	.+438    	; 0x96e <__fp_pscB>
 7b8:	20 f0       	brcs	.+8      	; 0x7c2 <__addsf3+0x18>
 7ba:	31 f4       	brne	.+12     	; 0x7c8 <__addsf3+0x1e>
 7bc:	9f 3f       	cpi	r25, 0xFF	; 255
 7be:	11 f4       	brne	.+4      	; 0x7c4 <__addsf3+0x1a>
 7c0:	1e f4       	brtc	.+6      	; 0x7c8 <__addsf3+0x1e>
 7c2:	cb c0       	rjmp	.+406    	; 0x95a <__fp_nan>
 7c4:	0e f4       	brtc	.+2      	; 0x7c8 <__addsf3+0x1e>
 7c6:	e0 95       	com	r30
 7c8:	e7 fb       	bst	r30, 7
 7ca:	c1 c0       	rjmp	.+386    	; 0x94e <__fp_inf>

000007cc <__addsf3x>:
 7cc:	e9 2f       	mov	r30, r25
 7ce:	e7 d0       	rcall	.+462    	; 0x99e <__fp_split3>
 7d0:	80 f3       	brcs	.-32     	; 0x7b2 <__addsf3+0x8>
 7d2:	ba 17       	cp	r27, r26
 7d4:	62 07       	cpc	r22, r18
 7d6:	73 07       	cpc	r23, r19
 7d8:	84 07       	cpc	r24, r20
 7da:	95 07       	cpc	r25, r21
 7dc:	18 f0       	brcs	.+6      	; 0x7e4 <__addsf3x+0x18>
 7de:	71 f4       	brne	.+28     	; 0x7fc <__addsf3x+0x30>
 7e0:	9e f5       	brtc	.+102    	; 0x848 <__addsf3x+0x7c>
 7e2:	ff c0       	rjmp	.+510    	; 0x9e2 <__fp_zero>
 7e4:	0e f4       	brtc	.+2      	; 0x7e8 <__addsf3x+0x1c>
 7e6:	e0 95       	com	r30
 7e8:	0b 2e       	mov	r0, r27
 7ea:	ba 2f       	mov	r27, r26
 7ec:	a0 2d       	mov	r26, r0
 7ee:	0b 01       	movw	r0, r22
 7f0:	b9 01       	movw	r22, r18
 7f2:	90 01       	movw	r18, r0
 7f4:	0c 01       	movw	r0, r24
 7f6:	ca 01       	movw	r24, r20
 7f8:	a0 01       	movw	r20, r0
 7fa:	11 24       	eor	r1, r1
 7fc:	ff 27       	eor	r31, r31
 7fe:	59 1b       	sub	r21, r25
 800:	99 f0       	breq	.+38     	; 0x828 <__addsf3x+0x5c>
 802:	59 3f       	cpi	r21, 0xF9	; 249
 804:	50 f4       	brcc	.+20     	; 0x81a <__addsf3x+0x4e>
 806:	50 3e       	cpi	r21, 0xE0	; 224
 808:	68 f1       	brcs	.+90     	; 0x864 <__addsf3x+0x98>
 80a:	1a 16       	cp	r1, r26
 80c:	f0 40       	sbci	r31, 0x00	; 0
 80e:	a2 2f       	mov	r26, r18
 810:	23 2f       	mov	r18, r19
 812:	34 2f       	mov	r19, r20
 814:	44 27       	eor	r20, r20
 816:	58 5f       	subi	r21, 0xF8	; 248
 818:	f3 cf       	rjmp	.-26     	; 0x800 <__addsf3x+0x34>
 81a:	46 95       	lsr	r20
 81c:	37 95       	ror	r19
 81e:	27 95       	ror	r18
 820:	a7 95       	ror	r26
 822:	f0 40       	sbci	r31, 0x00	; 0
 824:	53 95       	inc	r21
 826:	c9 f7       	brne	.-14     	; 0x81a <__addsf3x+0x4e>
 828:	7e f4       	brtc	.+30     	; 0x848 <__addsf3x+0x7c>
 82a:	1f 16       	cp	r1, r31
 82c:	ba 0b       	sbc	r27, r26
 82e:	62 0b       	sbc	r22, r18
 830:	73 0b       	sbc	r23, r19
 832:	84 0b       	sbc	r24, r20
 834:	ba f0       	brmi	.+46     	; 0x864 <__addsf3x+0x98>
 836:	91 50       	subi	r25, 0x01	; 1
 838:	a1 f0       	breq	.+40     	; 0x862 <__addsf3x+0x96>
 83a:	ff 0f       	add	r31, r31
 83c:	bb 1f       	adc	r27, r27
 83e:	66 1f       	adc	r22, r22
 840:	77 1f       	adc	r23, r23
 842:	88 1f       	adc	r24, r24
 844:	c2 f7       	brpl	.-16     	; 0x836 <__addsf3x+0x6a>
 846:	0e c0       	rjmp	.+28     	; 0x864 <__addsf3x+0x98>
 848:	ba 0f       	add	r27, r26
 84a:	62 1f       	adc	r22, r18
 84c:	73 1f       	adc	r23, r19
 84e:	84 1f       	adc	r24, r20
 850:	48 f4       	brcc	.+18     	; 0x864 <__addsf3x+0x98>
 852:	87 95       	ror	r24
 854:	77 95       	ror	r23
 856:	67 95       	ror	r22
 858:	b7 95       	ror	r27
 85a:	f7 95       	ror	r31
 85c:	9e 3f       	cpi	r25, 0xFE	; 254
 85e:	08 f0       	brcs	.+2      	; 0x862 <__addsf3x+0x96>
 860:	b3 cf       	rjmp	.-154    	; 0x7c8 <__addsf3+0x1e>
 862:	93 95       	inc	r25
 864:	88 0f       	add	r24, r24
 866:	08 f0       	brcs	.+2      	; 0x86a <__addsf3x+0x9e>
 868:	99 27       	eor	r25, r25
 86a:	ee 0f       	add	r30, r30
 86c:	97 95       	ror	r25
 86e:	87 95       	ror	r24
 870:	08 95       	ret

00000872 <__fixsfsi>:
 872:	04 d0       	rcall	.+8      	; 0x87c <__fixunssfsi>
 874:	68 94       	set
 876:	b1 11       	cpse	r27, r1
 878:	b5 c0       	rjmp	.+362    	; 0x9e4 <__fp_szero>
 87a:	08 95       	ret

0000087c <__fixunssfsi>:
 87c:	98 d0       	rcall	.+304    	; 0x9ae <__fp_splitA>
 87e:	88 f0       	brcs	.+34     	; 0x8a2 <__fixunssfsi+0x26>
 880:	9f 57       	subi	r25, 0x7F	; 127
 882:	90 f0       	brcs	.+36     	; 0x8a8 <__fixunssfsi+0x2c>
 884:	b9 2f       	mov	r27, r25
 886:	99 27       	eor	r25, r25
 888:	b7 51       	subi	r27, 0x17	; 23
 88a:	a0 f0       	brcs	.+40     	; 0x8b4 <__fixunssfsi+0x38>
 88c:	d1 f0       	breq	.+52     	; 0x8c2 <__fixunssfsi+0x46>
 88e:	66 0f       	add	r22, r22
 890:	77 1f       	adc	r23, r23
 892:	88 1f       	adc	r24, r24
 894:	99 1f       	adc	r25, r25
 896:	1a f0       	brmi	.+6      	; 0x89e <__fixunssfsi+0x22>
 898:	ba 95       	dec	r27
 89a:	c9 f7       	brne	.-14     	; 0x88e <__fixunssfsi+0x12>
 89c:	12 c0       	rjmp	.+36     	; 0x8c2 <__fixunssfsi+0x46>
 89e:	b1 30       	cpi	r27, 0x01	; 1
 8a0:	81 f0       	breq	.+32     	; 0x8c2 <__fixunssfsi+0x46>
 8a2:	9f d0       	rcall	.+318    	; 0x9e2 <__fp_zero>
 8a4:	b1 e0       	ldi	r27, 0x01	; 1
 8a6:	08 95       	ret
 8a8:	9c c0       	rjmp	.+312    	; 0x9e2 <__fp_zero>
 8aa:	67 2f       	mov	r22, r23
 8ac:	78 2f       	mov	r23, r24
 8ae:	88 27       	eor	r24, r24
 8b0:	b8 5f       	subi	r27, 0xF8	; 248
 8b2:	39 f0       	breq	.+14     	; 0x8c2 <__fixunssfsi+0x46>
 8b4:	b9 3f       	cpi	r27, 0xF9	; 249
 8b6:	cc f3       	brlt	.-14     	; 0x8aa <__fixunssfsi+0x2e>
 8b8:	86 95       	lsr	r24
 8ba:	77 95       	ror	r23
 8bc:	67 95       	ror	r22
 8be:	b3 95       	inc	r27
 8c0:	d9 f7       	brne	.-10     	; 0x8b8 <__fixunssfsi+0x3c>
 8c2:	3e f4       	brtc	.+14     	; 0x8d2 <__fixunssfsi+0x56>
 8c4:	90 95       	com	r25
 8c6:	80 95       	com	r24
 8c8:	70 95       	com	r23
 8ca:	61 95       	neg	r22
 8cc:	7f 4f       	sbci	r23, 0xFF	; 255
 8ce:	8f 4f       	sbci	r24, 0xFF	; 255
 8d0:	9f 4f       	sbci	r25, 0xFF	; 255
 8d2:	08 95       	ret

000008d4 <__floatunsisf>:
 8d4:	e8 94       	clt
 8d6:	09 c0       	rjmp	.+18     	; 0x8ea <__floatsisf+0x12>

000008d8 <__floatsisf>:
 8d8:	97 fb       	bst	r25, 7
 8da:	3e f4       	brtc	.+14     	; 0x8ea <__floatsisf+0x12>
 8dc:	90 95       	com	r25
 8de:	80 95       	com	r24
 8e0:	70 95       	com	r23
 8e2:	61 95       	neg	r22
 8e4:	7f 4f       	sbci	r23, 0xFF	; 255
 8e6:	8f 4f       	sbci	r24, 0xFF	; 255
 8e8:	9f 4f       	sbci	r25, 0xFF	; 255
 8ea:	99 23       	and	r25, r25
 8ec:	a9 f0       	breq	.+42     	; 0x918 <__floatsisf+0x40>
 8ee:	f9 2f       	mov	r31, r25
 8f0:	96 e9       	ldi	r25, 0x96	; 150
 8f2:	bb 27       	eor	r27, r27
 8f4:	93 95       	inc	r25
 8f6:	f6 95       	lsr	r31
 8f8:	87 95       	ror	r24
 8fa:	77 95       	ror	r23
 8fc:	67 95       	ror	r22
 8fe:	b7 95       	ror	r27
 900:	f1 11       	cpse	r31, r1
 902:	f8 cf       	rjmp	.-16     	; 0x8f4 <__floatsisf+0x1c>
 904:	fa f4       	brpl	.+62     	; 0x944 <__floatsisf+0x6c>
 906:	bb 0f       	add	r27, r27
 908:	11 f4       	brne	.+4      	; 0x90e <__floatsisf+0x36>
 90a:	60 ff       	sbrs	r22, 0
 90c:	1b c0       	rjmp	.+54     	; 0x944 <__floatsisf+0x6c>
 90e:	6f 5f       	subi	r22, 0xFF	; 255
 910:	7f 4f       	sbci	r23, 0xFF	; 255
 912:	8f 4f       	sbci	r24, 0xFF	; 255
 914:	9f 4f       	sbci	r25, 0xFF	; 255
 916:	16 c0       	rjmp	.+44     	; 0x944 <__floatsisf+0x6c>
 918:	88 23       	and	r24, r24
 91a:	11 f0       	breq	.+4      	; 0x920 <__floatsisf+0x48>
 91c:	96 e9       	ldi	r25, 0x96	; 150
 91e:	11 c0       	rjmp	.+34     	; 0x942 <__floatsisf+0x6a>
 920:	77 23       	and	r23, r23
 922:	21 f0       	breq	.+8      	; 0x92c <__floatsisf+0x54>
 924:	9e e8       	ldi	r25, 0x8E	; 142
 926:	87 2f       	mov	r24, r23
 928:	76 2f       	mov	r23, r22
 92a:	05 c0       	rjmp	.+10     	; 0x936 <__floatsisf+0x5e>
 92c:	66 23       	and	r22, r22
 92e:	71 f0       	breq	.+28     	; 0x94c <__floatsisf+0x74>
 930:	96 e8       	ldi	r25, 0x86	; 134
 932:	86 2f       	mov	r24, r22
 934:	70 e0       	ldi	r23, 0x00	; 0
 936:	60 e0       	ldi	r22, 0x00	; 0
 938:	2a f0       	brmi	.+10     	; 0x944 <__floatsisf+0x6c>
 93a:	9a 95       	dec	r25
 93c:	66 0f       	add	r22, r22
 93e:	77 1f       	adc	r23, r23
 940:	88 1f       	adc	r24, r24
 942:	da f7       	brpl	.-10     	; 0x93a <__floatsisf+0x62>
 944:	88 0f       	add	r24, r24
 946:	96 95       	lsr	r25
 948:	87 95       	ror	r24
 94a:	97 f9       	bld	r25, 7
 94c:	08 95       	ret

0000094e <__fp_inf>:
 94e:	97 f9       	bld	r25, 7
 950:	9f 67       	ori	r25, 0x7F	; 127
 952:	80 e8       	ldi	r24, 0x80	; 128
 954:	70 e0       	ldi	r23, 0x00	; 0
 956:	60 e0       	ldi	r22, 0x00	; 0
 958:	08 95       	ret

0000095a <__fp_nan>:
 95a:	9f ef       	ldi	r25, 0xFF	; 255
 95c:	80 ec       	ldi	r24, 0xC0	; 192
 95e:	08 95       	ret

00000960 <__fp_pscA>:
 960:	00 24       	eor	r0, r0
 962:	0a 94       	dec	r0
 964:	16 16       	cp	r1, r22
 966:	17 06       	cpc	r1, r23
 968:	18 06       	cpc	r1, r24
 96a:	09 06       	cpc	r0, r25
 96c:	08 95       	ret

0000096e <__fp_pscB>:
 96e:	00 24       	eor	r0, r0
 970:	0a 94       	dec	r0
 972:	12 16       	cp	r1, r18
 974:	13 06       	cpc	r1, r19
 976:	14 06       	cpc	r1, r20
 978:	05 06       	cpc	r0, r21
 97a:	08 95       	ret

0000097c <__fp_round>:
 97c:	09 2e       	mov	r0, r25
 97e:	03 94       	inc	r0
 980:	00 0c       	add	r0, r0
 982:	11 f4       	brne	.+4      	; 0x988 <__fp_round+0xc>
 984:	88 23       	and	r24, r24
 986:	52 f0       	brmi	.+20     	; 0x99c <__fp_round+0x20>
 988:	bb 0f       	add	r27, r27
 98a:	40 f4       	brcc	.+16     	; 0x99c <__fp_round+0x20>
 98c:	bf 2b       	or	r27, r31
 98e:	11 f4       	brne	.+4      	; 0x994 <__fp_round+0x18>
 990:	60 ff       	sbrs	r22, 0
 992:	04 c0       	rjmp	.+8      	; 0x99c <__fp_round+0x20>
 994:	6f 5f       	subi	r22, 0xFF	; 255
 996:	7f 4f       	sbci	r23, 0xFF	; 255
 998:	8f 4f       	sbci	r24, 0xFF	; 255
 99a:	9f 4f       	sbci	r25, 0xFF	; 255
 99c:	08 95       	ret

0000099e <__fp_split3>:
 99e:	57 fd       	sbrc	r21, 7
 9a0:	90 58       	subi	r25, 0x80	; 128
 9a2:	44 0f       	add	r20, r20
 9a4:	55 1f       	adc	r21, r21
 9a6:	59 f0       	breq	.+22     	; 0x9be <__fp_splitA+0x10>
 9a8:	5f 3f       	cpi	r21, 0xFF	; 255
 9aa:	71 f0       	breq	.+28     	; 0x9c8 <__fp_splitA+0x1a>
 9ac:	47 95       	ror	r20

000009ae <__fp_splitA>:
 9ae:	88 0f       	add	r24, r24
 9b0:	97 fb       	bst	r25, 7
 9b2:	99 1f       	adc	r25, r25
 9b4:	61 f0       	breq	.+24     	; 0x9ce <__fp_splitA+0x20>
 9b6:	9f 3f       	cpi	r25, 0xFF	; 255
 9b8:	79 f0       	breq	.+30     	; 0x9d8 <__fp_splitA+0x2a>
 9ba:	87 95       	ror	r24
 9bc:	08 95       	ret
 9be:	12 16       	cp	r1, r18
 9c0:	13 06       	cpc	r1, r19
 9c2:	14 06       	cpc	r1, r20
 9c4:	55 1f       	adc	r21, r21
 9c6:	f2 cf       	rjmp	.-28     	; 0x9ac <__fp_split3+0xe>
 9c8:	46 95       	lsr	r20
 9ca:	f1 df       	rcall	.-30     	; 0x9ae <__fp_splitA>
 9cc:	08 c0       	rjmp	.+16     	; 0x9de <__fp_splitA+0x30>
 9ce:	16 16       	cp	r1, r22
 9d0:	17 06       	cpc	r1, r23
 9d2:	18 06       	cpc	r1, r24
 9d4:	99 1f       	adc	r25, r25
 9d6:	f1 cf       	rjmp	.-30     	; 0x9ba <__fp_splitA+0xc>
 9d8:	86 95       	lsr	r24
 9da:	71 05       	cpc	r23, r1
 9dc:	61 05       	cpc	r22, r1
 9de:	08 94       	sec
 9e0:	08 95       	ret

000009e2 <__fp_zero>:
 9e2:	e8 94       	clt

000009e4 <__fp_szero>:
 9e4:	bb 27       	eor	r27, r27
 9e6:	66 27       	eor	r22, r22
 9e8:	77 27       	eor	r23, r23
 9ea:	cb 01       	movw	r24, r22
 9ec:	97 f9       	bld	r25, 7
 9ee:	08 95       	ret

000009f0 <__mulsf3>:
 9f0:	0b d0       	rcall	.+22     	; 0xa08 <__mulsf3x>
 9f2:	c4 cf       	rjmp	.-120    	; 0x97c <__fp_round>
 9f4:	b5 df       	rcall	.-150    	; 0x960 <__fp_pscA>
 9f6:	28 f0       	brcs	.+10     	; 0xa02 <__mulsf3+0x12>
 9f8:	ba df       	rcall	.-140    	; 0x96e <__fp_pscB>
 9fa:	18 f0       	brcs	.+6      	; 0xa02 <__mulsf3+0x12>
 9fc:	95 23       	and	r25, r21
 9fe:	09 f0       	breq	.+2      	; 0xa02 <__mulsf3+0x12>
 a00:	a6 cf       	rjmp	.-180    	; 0x94e <__fp_inf>
 a02:	ab cf       	rjmp	.-170    	; 0x95a <__fp_nan>
 a04:	11 24       	eor	r1, r1
 a06:	ee cf       	rjmp	.-36     	; 0x9e4 <__fp_szero>

00000a08 <__mulsf3x>:
 a08:	ca df       	rcall	.-108    	; 0x99e <__fp_split3>
 a0a:	a0 f3       	brcs	.-24     	; 0x9f4 <__mulsf3+0x4>

00000a0c <__mulsf3_pse>:
 a0c:	95 9f       	mul	r25, r21
 a0e:	d1 f3       	breq	.-12     	; 0xa04 <__mulsf3+0x14>
 a10:	95 0f       	add	r25, r21
 a12:	50 e0       	ldi	r21, 0x00	; 0
 a14:	55 1f       	adc	r21, r21
 a16:	62 9f       	mul	r22, r18
 a18:	f0 01       	movw	r30, r0
 a1a:	72 9f       	mul	r23, r18
 a1c:	bb 27       	eor	r27, r27
 a1e:	f0 0d       	add	r31, r0
 a20:	b1 1d       	adc	r27, r1
 a22:	63 9f       	mul	r22, r19
 a24:	aa 27       	eor	r26, r26
 a26:	f0 0d       	add	r31, r0
 a28:	b1 1d       	adc	r27, r1
 a2a:	aa 1f       	adc	r26, r26
 a2c:	64 9f       	mul	r22, r20
 a2e:	66 27       	eor	r22, r22
 a30:	b0 0d       	add	r27, r0
 a32:	a1 1d       	adc	r26, r1
 a34:	66 1f       	adc	r22, r22
 a36:	82 9f       	mul	r24, r18
 a38:	22 27       	eor	r18, r18
 a3a:	b0 0d       	add	r27, r0
 a3c:	a1 1d       	adc	r26, r1
 a3e:	62 1f       	adc	r22, r18
 a40:	73 9f       	mul	r23, r19
 a42:	b0 0d       	add	r27, r0
 a44:	a1 1d       	adc	r26, r1
 a46:	62 1f       	adc	r22, r18
 a48:	83 9f       	mul	r24, r19
 a4a:	a0 0d       	add	r26, r0
 a4c:	61 1d       	adc	r22, r1
 a4e:	22 1f       	adc	r18, r18
 a50:	74 9f       	mul	r23, r20
 a52:	33 27       	eor	r19, r19
 a54:	a0 0d       	add	r26, r0
 a56:	61 1d       	adc	r22, r1
 a58:	23 1f       	adc	r18, r19
 a5a:	84 9f       	mul	r24, r20
 a5c:	60 0d       	add	r22, r0
 a5e:	21 1d       	adc	r18, r1
 a60:	82 2f       	mov	r24, r18
 a62:	76 2f       	mov	r23, r22
 a64:	6a 2f       	mov	r22, r26
 a66:	11 24       	eor	r1, r1
 a68:	9f 57       	subi	r25, 0x7F	; 127
 a6a:	50 40       	sbci	r21, 0x00	; 0
 a6c:	8a f0       	brmi	.+34     	; 0xa90 <__mulsf3_pse+0x84>
 a6e:	e1 f0       	breq	.+56     	; 0xaa8 <__mulsf3_pse+0x9c>
 a70:	88 23       	and	r24, r24
 a72:	4a f0       	brmi	.+18     	; 0xa86 <__mulsf3_pse+0x7a>
 a74:	ee 0f       	add	r30, r30
 a76:	ff 1f       	adc	r31, r31
 a78:	bb 1f       	adc	r27, r27
 a7a:	66 1f       	adc	r22, r22
 a7c:	77 1f       	adc	r23, r23
 a7e:	88 1f       	adc	r24, r24
 a80:	91 50       	subi	r25, 0x01	; 1
 a82:	50 40       	sbci	r21, 0x00	; 0
 a84:	a9 f7       	brne	.-22     	; 0xa70 <__mulsf3_pse+0x64>
 a86:	9e 3f       	cpi	r25, 0xFE	; 254
 a88:	51 05       	cpc	r21, r1
 a8a:	70 f0       	brcs	.+28     	; 0xaa8 <__mulsf3_pse+0x9c>
 a8c:	60 cf       	rjmp	.-320    	; 0x94e <__fp_inf>
 a8e:	aa cf       	rjmp	.-172    	; 0x9e4 <__fp_szero>
 a90:	5f 3f       	cpi	r21, 0xFF	; 255
 a92:	ec f3       	brlt	.-6      	; 0xa8e <__mulsf3_pse+0x82>
 a94:	98 3e       	cpi	r25, 0xE8	; 232
 a96:	dc f3       	brlt	.-10     	; 0xa8e <__mulsf3_pse+0x82>
 a98:	86 95       	lsr	r24
 a9a:	77 95       	ror	r23
 a9c:	67 95       	ror	r22
 a9e:	b7 95       	ror	r27
 aa0:	f7 95       	ror	r31
 aa2:	e7 95       	ror	r30
 aa4:	9f 5f       	subi	r25, 0xFF	; 255
 aa6:	c1 f7       	brne	.-16     	; 0xa98 <__mulsf3_pse+0x8c>
 aa8:	fe 2b       	or	r31, r30
 aaa:	88 0f       	add	r24, r24
 aac:	91 1d       	adc	r25, r1
 aae:	96 95       	lsr	r25
 ab0:	87 95       	ror	r24
 ab2:	97 f9       	bld	r25, 7
 ab4:	08 95       	ret

00000ab6 <malloc>:
 ab6:	cf 93       	push	r28
 ab8:	df 93       	push	r29
 aba:	bc 01       	movw	r22, r24
 abc:	82 30       	cpi	r24, 0x02	; 2
 abe:	91 05       	cpc	r25, r1
 ac0:	10 f4       	brcc	.+4      	; 0xac6 <malloc+0x10>
 ac2:	62 e0       	ldi	r22, 0x02	; 2
 ac4:	70 e0       	ldi	r23, 0x00	; 0
 ac6:	a0 91 48 01 	lds	r26, 0x0148
 aca:	b0 91 49 01 	lds	r27, 0x0149
 ace:	ed 01       	movw	r28, r26
 ad0:	e0 e0       	ldi	r30, 0x00	; 0
 ad2:	f0 e0       	ldi	r31, 0x00	; 0
 ad4:	40 e0       	ldi	r20, 0x00	; 0
 ad6:	50 e0       	ldi	r21, 0x00	; 0
 ad8:	21 c0       	rjmp	.+66     	; 0xb1c <malloc+0x66>
 ada:	88 81       	ld	r24, Y
 adc:	99 81       	ldd	r25, Y+1	; 0x01
 ade:	86 17       	cp	r24, r22
 ae0:	97 07       	cpc	r25, r23
 ae2:	69 f4       	brne	.+26     	; 0xafe <malloc+0x48>
 ae4:	8a 81       	ldd	r24, Y+2	; 0x02
 ae6:	9b 81       	ldd	r25, Y+3	; 0x03
 ae8:	30 97       	sbiw	r30, 0x00	; 0
 aea:	19 f0       	breq	.+6      	; 0xaf2 <malloc+0x3c>
 aec:	93 83       	std	Z+3, r25	; 0x03
 aee:	82 83       	std	Z+2, r24	; 0x02
 af0:	04 c0       	rjmp	.+8      	; 0xafa <malloc+0x44>
 af2:	90 93 49 01 	sts	0x0149, r25
 af6:	80 93 48 01 	sts	0x0148, r24
 afa:	fe 01       	movw	r30, r28
 afc:	34 c0       	rjmp	.+104    	; 0xb66 <malloc+0xb0>
 afe:	68 17       	cp	r22, r24
 b00:	79 07       	cpc	r23, r25
 b02:	38 f4       	brcc	.+14     	; 0xb12 <malloc+0x5c>
 b04:	41 15       	cp	r20, r1
 b06:	51 05       	cpc	r21, r1
 b08:	19 f0       	breq	.+6      	; 0xb10 <malloc+0x5a>
 b0a:	84 17       	cp	r24, r20
 b0c:	95 07       	cpc	r25, r21
 b0e:	08 f4       	brcc	.+2      	; 0xb12 <malloc+0x5c>
 b10:	ac 01       	movw	r20, r24
 b12:	fe 01       	movw	r30, r28
 b14:	8a 81       	ldd	r24, Y+2	; 0x02
 b16:	9b 81       	ldd	r25, Y+3	; 0x03
 b18:	9c 01       	movw	r18, r24
 b1a:	e9 01       	movw	r28, r18
 b1c:	20 97       	sbiw	r28, 0x00	; 0
 b1e:	e9 f6       	brne	.-70     	; 0xada <malloc+0x24>
 b20:	41 15       	cp	r20, r1
 b22:	51 05       	cpc	r21, r1
 b24:	a9 f1       	breq	.+106    	; 0xb90 <malloc+0xda>
 b26:	ca 01       	movw	r24, r20
 b28:	86 1b       	sub	r24, r22
 b2a:	97 0b       	sbc	r25, r23
 b2c:	04 97       	sbiw	r24, 0x04	; 4
 b2e:	08 f4       	brcc	.+2      	; 0xb32 <malloc+0x7c>
 b30:	ba 01       	movw	r22, r20
 b32:	e0 e0       	ldi	r30, 0x00	; 0
 b34:	f0 e0       	ldi	r31, 0x00	; 0
 b36:	2a c0       	rjmp	.+84     	; 0xb8c <malloc+0xd6>
 b38:	8d 91       	ld	r24, X+
 b3a:	9c 91       	ld	r25, X
 b3c:	11 97       	sbiw	r26, 0x01	; 1
 b3e:	84 17       	cp	r24, r20
 b40:	95 07       	cpc	r25, r21
 b42:	f9 f4       	brne	.+62     	; 0xb82 <malloc+0xcc>
 b44:	64 17       	cp	r22, r20
 b46:	75 07       	cpc	r23, r21
 b48:	81 f4       	brne	.+32     	; 0xb6a <malloc+0xb4>
 b4a:	12 96       	adiw	r26, 0x02	; 2
 b4c:	8d 91       	ld	r24, X+
 b4e:	9c 91       	ld	r25, X
 b50:	13 97       	sbiw	r26, 0x03	; 3
 b52:	30 97       	sbiw	r30, 0x00	; 0
 b54:	19 f0       	breq	.+6      	; 0xb5c <malloc+0xa6>
 b56:	93 83       	std	Z+3, r25	; 0x03
 b58:	82 83       	std	Z+2, r24	; 0x02
 b5a:	04 c0       	rjmp	.+8      	; 0xb64 <malloc+0xae>
 b5c:	90 93 49 01 	sts	0x0149, r25
 b60:	80 93 48 01 	sts	0x0148, r24
 b64:	fd 01       	movw	r30, r26
 b66:	32 96       	adiw	r30, 0x02	; 2
 b68:	4f c0       	rjmp	.+158    	; 0xc08 <malloc+0x152>
 b6a:	ca 01       	movw	r24, r20
 b6c:	86 1b       	sub	r24, r22
 b6e:	97 0b       	sbc	r25, r23
 b70:	fd 01       	movw	r30, r26
 b72:	e8 0f       	add	r30, r24
 b74:	f9 1f       	adc	r31, r25
 b76:	61 93       	st	Z+, r22
 b78:	71 93       	st	Z+, r23
 b7a:	02 97       	sbiw	r24, 0x02	; 2
 b7c:	8d 93       	st	X+, r24
 b7e:	9c 93       	st	X, r25
 b80:	43 c0       	rjmp	.+134    	; 0xc08 <malloc+0x152>
 b82:	fd 01       	movw	r30, r26
 b84:	82 81       	ldd	r24, Z+2	; 0x02
 b86:	93 81       	ldd	r25, Z+3	; 0x03
 b88:	9c 01       	movw	r18, r24
 b8a:	d9 01       	movw	r26, r18
 b8c:	10 97       	sbiw	r26, 0x00	; 0
 b8e:	a1 f6       	brne	.-88     	; 0xb38 <malloc+0x82>
 b90:	80 91 46 01 	lds	r24, 0x0146
 b94:	90 91 47 01 	lds	r25, 0x0147
 b98:	89 2b       	or	r24, r25
 b9a:	41 f4       	brne	.+16     	; 0xbac <malloc+0xf6>
 b9c:	80 91 0e 01 	lds	r24, 0x010E
 ba0:	90 91 0f 01 	lds	r25, 0x010F
 ba4:	90 93 47 01 	sts	0x0147, r25
 ba8:	80 93 46 01 	sts	0x0146, r24
 bac:	40 91 10 01 	lds	r20, 0x0110
 bb0:	50 91 11 01 	lds	r21, 0x0111
 bb4:	41 15       	cp	r20, r1
 bb6:	51 05       	cpc	r21, r1
 bb8:	41 f4       	brne	.+16     	; 0xbca <malloc+0x114>
 bba:	4d b7       	in	r20, 0x3d	; 61
 bbc:	5e b7       	in	r21, 0x3e	; 62
 bbe:	80 91 0c 01 	lds	r24, 0x010C
 bc2:	90 91 0d 01 	lds	r25, 0x010D
 bc6:	48 1b       	sub	r20, r24
 bc8:	59 0b       	sbc	r21, r25
 bca:	20 91 46 01 	lds	r18, 0x0146
 bce:	30 91 47 01 	lds	r19, 0x0147
 bd2:	24 17       	cp	r18, r20
 bd4:	35 07       	cpc	r19, r21
 bd6:	b0 f4       	brcc	.+44     	; 0xc04 <malloc+0x14e>
 bd8:	ca 01       	movw	r24, r20
 bda:	82 1b       	sub	r24, r18
 bdc:	93 0b       	sbc	r25, r19
 bde:	86 17       	cp	r24, r22
 be0:	97 07       	cpc	r25, r23
 be2:	80 f0       	brcs	.+32     	; 0xc04 <malloc+0x14e>
 be4:	ab 01       	movw	r20, r22
 be6:	4e 5f       	subi	r20, 0xFE	; 254
 be8:	5f 4f       	sbci	r21, 0xFF	; 255
 bea:	84 17       	cp	r24, r20
 bec:	95 07       	cpc	r25, r21
 bee:	50 f0       	brcs	.+20     	; 0xc04 <malloc+0x14e>
 bf0:	42 0f       	add	r20, r18
 bf2:	53 1f       	adc	r21, r19
 bf4:	50 93 47 01 	sts	0x0147, r21
 bf8:	40 93 46 01 	sts	0x0146, r20
 bfc:	f9 01       	movw	r30, r18
 bfe:	61 93       	st	Z+, r22
 c00:	71 93       	st	Z+, r23
 c02:	02 c0       	rjmp	.+4      	; 0xc08 <malloc+0x152>
 c04:	e0 e0       	ldi	r30, 0x00	; 0
 c06:	f0 e0       	ldi	r31, 0x00	; 0
 c08:	cf 01       	movw	r24, r30
 c0a:	df 91       	pop	r29
 c0c:	cf 91       	pop	r28
 c0e:	08 95       	ret

00000c10 <free>:
 c10:	cf 93       	push	r28
 c12:	df 93       	push	r29
 c14:	00 97       	sbiw	r24, 0x00	; 0
 c16:	09 f4       	brne	.+2      	; 0xc1a <free+0xa>
 c18:	50 c0       	rjmp	.+160    	; 0xcba <free+0xaa>
 c1a:	ec 01       	movw	r28, r24
 c1c:	22 97       	sbiw	r28, 0x02	; 2
 c1e:	1b 82       	std	Y+3, r1	; 0x03
 c20:	1a 82       	std	Y+2, r1	; 0x02
 c22:	a0 91 48 01 	lds	r26, 0x0148
 c26:	b0 91 49 01 	lds	r27, 0x0149
 c2a:	10 97       	sbiw	r26, 0x00	; 0
 c2c:	09 f1       	breq	.+66     	; 0xc70 <free+0x60>
 c2e:	40 e0       	ldi	r20, 0x00	; 0
 c30:	50 e0       	ldi	r21, 0x00	; 0
 c32:	ac 17       	cp	r26, r28
 c34:	bd 07       	cpc	r27, r29
 c36:	08 f1       	brcs	.+66     	; 0xc7a <free+0x6a>
 c38:	bb 83       	std	Y+3, r27	; 0x03
 c3a:	aa 83       	std	Y+2, r26	; 0x02
 c3c:	fe 01       	movw	r30, r28
 c3e:	21 91       	ld	r18, Z+
 c40:	31 91       	ld	r19, Z+
 c42:	e2 0f       	add	r30, r18
 c44:	f3 1f       	adc	r31, r19
 c46:	ae 17       	cp	r26, r30
 c48:	bf 07       	cpc	r27, r31
 c4a:	79 f4       	brne	.+30     	; 0xc6a <free+0x5a>
 c4c:	8d 91       	ld	r24, X+
 c4e:	9c 91       	ld	r25, X
 c50:	11 97       	sbiw	r26, 0x01	; 1
 c52:	28 0f       	add	r18, r24
 c54:	39 1f       	adc	r19, r25
 c56:	2e 5f       	subi	r18, 0xFE	; 254
 c58:	3f 4f       	sbci	r19, 0xFF	; 255
 c5a:	39 83       	std	Y+1, r19	; 0x01
 c5c:	28 83       	st	Y, r18
 c5e:	12 96       	adiw	r26, 0x02	; 2
 c60:	8d 91       	ld	r24, X+
 c62:	9c 91       	ld	r25, X
 c64:	13 97       	sbiw	r26, 0x03	; 3
 c66:	9b 83       	std	Y+3, r25	; 0x03
 c68:	8a 83       	std	Y+2, r24	; 0x02
 c6a:	41 15       	cp	r20, r1
 c6c:	51 05       	cpc	r21, r1
 c6e:	71 f4       	brne	.+28     	; 0xc8c <free+0x7c>
 c70:	d0 93 49 01 	sts	0x0149, r29
 c74:	c0 93 48 01 	sts	0x0148, r28
 c78:	20 c0       	rjmp	.+64     	; 0xcba <free+0xaa>
 c7a:	12 96       	adiw	r26, 0x02	; 2
 c7c:	8d 91       	ld	r24, X+
 c7e:	9c 91       	ld	r25, X
 c80:	13 97       	sbiw	r26, 0x03	; 3
 c82:	ad 01       	movw	r20, r26
 c84:	00 97       	sbiw	r24, 0x00	; 0
 c86:	11 f0       	breq	.+4      	; 0xc8c <free+0x7c>
 c88:	dc 01       	movw	r26, r24
 c8a:	d3 cf       	rjmp	.-90     	; 0xc32 <free+0x22>
 c8c:	fa 01       	movw	r30, r20
 c8e:	d3 83       	std	Z+3, r29	; 0x03
 c90:	c2 83       	std	Z+2, r28	; 0x02
 c92:	21 91       	ld	r18, Z+
 c94:	31 91       	ld	r19, Z+
 c96:	e2 0f       	add	r30, r18
 c98:	f3 1f       	adc	r31, r19
 c9a:	ce 17       	cp	r28, r30
 c9c:	df 07       	cpc	r29, r31
 c9e:	69 f4       	brne	.+26     	; 0xcba <free+0xaa>
 ca0:	88 81       	ld	r24, Y
 ca2:	99 81       	ldd	r25, Y+1	; 0x01
 ca4:	28 0f       	add	r18, r24
 ca6:	39 1f       	adc	r19, r25
 ca8:	2e 5f       	subi	r18, 0xFE	; 254
 caa:	3f 4f       	sbci	r19, 0xFF	; 255
 cac:	fa 01       	movw	r30, r20
 cae:	31 83       	std	Z+1, r19	; 0x01
 cb0:	20 83       	st	Z, r18
 cb2:	8a 81       	ldd	r24, Y+2	; 0x02
 cb4:	9b 81       	ldd	r25, Y+3	; 0x03
 cb6:	93 83       	std	Z+3, r25	; 0x03
 cb8:	82 83       	std	Z+2, r24	; 0x02
 cba:	df 91       	pop	r29
 cbc:	cf 91       	pop	r28
 cbe:	08 95       	ret

00000cc0 <_exit>:
 cc0:	f8 94       	cli

00000cc2 <__stop_program>:
 cc2:	ff cf       	rjmp	.-2      	; 0xcc2 <__stop_program>
