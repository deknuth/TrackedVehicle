
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000202  00800100  000006a0  00000734  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002b  00800302  00800302  00000936  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000936  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000112  00000000  00000000  00000956  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000040e  00000000  00000000  00000a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001f1  00000000  00000000  00000e76  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000051c  00000000  00000000  00001067  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00001584  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000182  00000000  00000000  00001644  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000cf  00000000  00000000  000017c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001895  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	68 c2       	rjmp	.+1232   	; 0x4da <__vector_4>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	65 c0       	rjmp	.+202    	; 0xe0 <__vector_10>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	13 e0       	ldi	r17, 0x03	; 3
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e0 ea       	ldi	r30, 0xA0	; 160
  48:	f6 e0       	ldi	r31, 0x06	; 6
  4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
  50:	a2 30       	cpi	r26, 0x02	; 2
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>

00000056 <__do_clear_bss>:
  56:	13 e0       	ldi	r17, 0x03	; 3
  58:	a2 e0       	ldi	r26, 0x02	; 2
  5a:	b3 e0       	ldi	r27, 0x03	; 3
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	ad 32       	cpi	r26, 0x2D	; 45
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	67 d2       	rcall	.+1230   	; 0x536 <main>
  68:	19 c3       	rjmp	.+1586   	; 0x69c <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <PortInit>:

static void commut(unsigned char phase);        //  commutation

void PortInit(void)
{
    DDRB = 0B00001110;
  6c:	8e e0       	ldi	r24, 0x0E	; 14
  6e:	84 b9       	out	0x04, r24	; 4
    PORTB= 0B00001000;
  70:	88 e0       	ldi	r24, 0x08	; 8
  72:	85 b9       	out	0x05, r24	; 5
    PINB = 0x00;
  74:	13 b8       	out	0x03, r1	; 3

    DDRD = 0B11100101;
  76:	85 ee       	ldi	r24, 0xE5	; 229
  78:	8a b9       	out	0x0a, r24	; 10
    PORTD= 0B01100001;
  7a:	81 e6       	ldi	r24, 0x61	; 97
  7c:	8b b9       	out	0x0b, r24	; 11
    PIND = 0x00;
  7e:	19 b8       	out	0x09, r1	; 9

    DDRC = 0B00110000;
  80:	80 e3       	ldi	r24, 0x30	; 48
  82:	87 b9       	out	0x07, r24	; 7
    PORTC= 0B00110000;
  84:	88 b9       	out	0x08, r24	; 8
    PINC = 0x00;
  86:	16 b8       	out	0x06, r1	; 6
}
  88:	08 95       	ret

0000008a <T1Init>:

void T1Init(void)
{
	TCCR1B = 1<<ICNC1 | 1<<ICES1 | 1<<CS11;			// rising trigger
  8a:	82 ec       	ldi	r24, 0xC2	; 194
  8c:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = 1<<ICIE1;
  90:	80 e2       	ldi	r24, 0x20	; 32
  92:	80 93 6f 00 	sts	0x006F, r24
	TCNT1 = 0;
  96:	10 92 85 00 	sts	0x0085, r1
  9a:	10 92 84 00 	sts	0x0084, r1
}
  9e:	08 95       	ret

000000a0 <I1Init>:

void I1Init(void)
{
    EICRA = 1<<ISC10 | 1<<ISC11;		// rising init
  a0:	8c e0       	ldi	r24, 0x0C	; 12
  a2:	80 93 69 00 	sts	0x0069, r24
}
  a6:	08 95       	ret

000000a8 <PCInit>:

void PCInit(void)
{
    PCICR |= 1<<PCIE1;			// PCINT[14:8] 
  a8:	e8 e6       	ldi	r30, 0x68	; 104
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	80 83       	st	Z, r24
    PCMSK1 |= 0x07;				//
  b2:	ec e6       	ldi	r30, 0x6C	; 108
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	87 60       	ori	r24, 0x07	; 7
  ba:	80 83       	st	Z, r24
}
  bc:	08 95       	ret

000000be <T0Init>:

void T0Init(void)
{
    TCCR0A = 1<<COM0A1 | 1<<COM0B1 | 1<<WGM00;		// 8bit phase
  be:	81 ea       	ldi	r24, 0xA1	; 161
  c0:	84 bd       	out	0x24, r24	; 36
    TCCR0B = 1<<CS00;			// 0 divide
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	85 bd       	out	0x25, r24	; 37
    OCR0A = OCR0B = 0x00;
  c6:	18 bc       	out	0x28, r1	; 40
  c8:	88 b5       	in	r24, 0x28	; 40
  ca:	87 bd       	out	0x27, r24	; 39
}
  cc:	08 95       	ret

000000ce <T2Init>:

void T2Init(void)
{
    TCCR2A = 1<<COM2A1 | 1<<WGM20;
  ce:	81 e8       	ldi	r24, 0x81	; 129
  d0:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = 1<<CS20;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	80 93 b1 00 	sts	0x00B1, r24
    OCR2A = 0x00;
  da:	10 92 b3 00 	sts	0x00B3, r1
}
  de:	08 95       	ret

000000e0 <__vector_10>:

volatile unsigned char update = 0;
unsigned char times = 0;

ISR(TIMER1_CAPT_vect)
{
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	2f 93       	push	r18
  ec:	3f 93       	push	r19
  ee:	4f 93       	push	r20
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
	if(CaptStat)
  f4:	80 91 01 01 	lds	r24, 0x0101
  f8:	88 23       	and	r24, r24
  fa:	71 f0       	breq	.+28     	; 0x118 <__vector_10+0x38>
	{
		CaptStat = 0;
  fc:	10 92 01 01 	sts	0x0101, r1
		CAPT_T_FALL;
 100:	82 e8       	ldi	r24, 0x82	; 130
 102:	80 93 81 00 	sts	0x0081, r24
 106:	10 92 85 00 	sts	0x0085, r1
 10a:	10 92 84 00 	sts	0x0084, r1
 10e:	10 92 87 00 	sts	0x0087, r1
 112:	10 92 86 00 	sts	0x0086, r1
 116:	45 c0       	rjmp	.+138    	; 0x1a2 <__vector_10+0xc2>
	}
	else			// falling tigger
	{
		CaptStat=1;
 118:	41 e0       	ldi	r20, 0x01	; 1
 11a:	40 93 01 01 	sts	0x0101, r20
		CAPT_T_RIS;
 11e:	82 ec       	ldi	r24, 0xC2	; 194
 120:	80 93 81 00 	sts	0x0081, r24
 124:	10 92 85 00 	sts	0x0085, r1
 128:	10 92 84 00 	sts	0x0084, r1
		D2_BLINK;
 12c:	85 b1       	in	r24, 0x05	; 5
 12e:	94 e0       	ldi	r25, 0x04	; 4
 130:	89 27       	eor	r24, r25
 132:	85 b9       	out	0x05, r24	; 5
		speed = ICR1L;
 134:	80 91 86 00 	lds	r24, 0x0086
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	90 93 27 03 	sts	0x0327, r25
 13e:	80 93 26 03 	sts	0x0326, r24
		if(times++ > 2)
 142:	80 91 2c 03 	lds	r24, 0x032C
 146:	8f 5f       	subi	r24, 0xFF	; 255
 148:	80 93 2c 03 	sts	0x032C, r24
 14c:	81 50       	subi	r24, 0x01	; 1
 14e:	83 30       	cpi	r24, 0x03	; 3
 150:	d0 f0       	brcs	.+52     	; 0x186 <__vector_10+0xa6>
		{
			if(LastValue == VelInte)
 152:	20 91 24 03 	lds	r18, 0x0324
 156:	30 91 25 03 	lds	r19, 0x0325
 15a:	80 91 22 03 	lds	r24, 0x0322
 15e:	90 91 23 03 	lds	r25, 0x0323
 162:	28 17       	cp	r18, r24
 164:	39 07       	cpc	r19, r25
 166:	19 f4       	brne	.+6      	; 0x16e <__vector_10+0x8e>
				stall = 1;
 168:	40 93 00 01 	sts	0x0100, r20
 16c:	0a c0       	rjmp	.+20     	; 0x182 <__vector_10+0xa2>
			else
			{
				LastValue = VelInte;
 16e:	80 91 22 03 	lds	r24, 0x0322
 172:	90 91 23 03 	lds	r25, 0x0323
 176:	90 93 25 03 	sts	0x0325, r25
 17a:	80 93 24 03 	sts	0x0324, r24
				stall = 0;
 17e:	10 92 00 01 	sts	0x0100, r1
			}
			times = 0;
 182:	10 92 2c 03 	sts	0x032C, r1
		}
		if(VelInte > 60000)
 186:	80 91 22 03 	lds	r24, 0x0322
 18a:	90 91 23 03 	lds	r25, 0x0323
 18e:	81 56       	subi	r24, 0x61	; 97
 190:	9a 4e       	sbci	r25, 0xEA	; 234
 192:	20 f0       	brcs	.+8      	; 0x19c <__vector_10+0xbc>
			VelInte = 0;
 194:	10 92 23 03 	sts	0x0323, r1
 198:	10 92 22 03 	sts	0x0322, r1
		update = 1;
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	80 93 2b 03 	sts	0x032B, r24
	}
}
 1a2:	9f 91       	pop	r25
 1a4:	8f 91       	pop	r24
 1a6:	4f 91       	pop	r20
 1a8:	3f 91       	pop	r19
 1aa:	2f 91       	pop	r18
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <commut>:
over:
    return 1;
}

void commut(unsigned char phase)        //  commutation
{
 1b6:	98 2f       	mov	r25, r24
    if(dir)
 1b8:	80 91 28 03 	lds	r24, 0x0328
 1bc:	88 23       	and	r24, r24
 1be:	09 f4       	brne	.+2      	; 0x1c2 <commut+0xc>
 1c0:	96 c0       	rjmp	.+300    	; 0x2ee <commut+0x138>
    {
        switch(phase)
 1c2:	93 30       	cpi	r25, 0x03	; 3
 1c4:	09 f4       	brne	.+2      	; 0x1c8 <commut+0x12>
 1c6:	66 c0       	rjmp	.+204    	; 0x294 <commut+0xde>
 1c8:	94 30       	cpi	r25, 0x04	; 4
 1ca:	38 f4       	brcc	.+14     	; 0x1da <commut+0x24>
 1cc:	91 30       	cpi	r25, 0x01	; 1
 1ce:	09 f4       	brne	.+2      	; 0x1d2 <commut+0x1c>
 1d0:	76 c0       	rjmp	.+236    	; 0x2be <commut+0x108>
 1d2:	92 30       	cpi	r25, 0x02	; 2
 1d4:	09 f0       	breq	.+2      	; 0x1d8 <commut+0x22>
 1d6:	2e c1       	rjmp	.+604    	; 0x434 <__stack+0x135>
 1d8:	48 c0       	rjmp	.+144    	; 0x26a <commut+0xb4>
 1da:	95 30       	cpi	r25, 0x05	; 5
 1dc:	31 f0       	breq	.+12     	; 0x1ea <commut+0x34>
 1de:	95 30       	cpi	r25, 0x05	; 5
 1e0:	c8 f0       	brcs	.+50     	; 0x214 <commut+0x5e>
 1e2:	96 30       	cpi	r25, 0x06	; 6
 1e4:	09 f0       	breq	.+2      	; 0x1e8 <commut+0x32>
 1e6:	26 c1       	rjmp	.+588    	; 0x434 <__stack+0x135>
 1e8:	2a c0       	rjmp	.+84     	; 0x23e <commut+0x88>
        {
        case 5:
            CHBL;
 1ea:	84 b5       	in	r24, 0x24	; 36
 1ec:	8f 70       	andi	r24, 0x0F	; 15
 1ee:	84 bd       	out	0x24, r24	; 36
 1f0:	80 91 b0 00 	lds	r24, 0x00B0
 1f4:	8f 73       	andi	r24, 0x3F	; 63
 1f6:	80 93 b0 00 	sts	0x00B0, r24
 1fa:	58 9a       	sbi	0x0b, 0	; 11
 1fc:	88 b1       	in	r24, 0x08	; 8
 1fe:	80 63       	ori	r24, 0x30	; 48
 200:	88 b9       	out	0x08, r24	; 8
 202:	00 00       	nop
 204:	00 00       	nop
 206:	00 00       	nop
 208:	00 00       	nop
 20a:	00 00       	nop
 20c:	00 00       	nop
 20e:	00 00       	nop
 210:	00 00       	nop
 212:	db c0       	rjmp	.+438    	; 0x3ca <__stack+0xcb>
            break;
        case 4:
            AHBL;
 214:	84 b5       	in	r24, 0x24	; 36
 216:	8f 70       	andi	r24, 0x0F	; 15
 218:	84 bd       	out	0x24, r24	; 36
 21a:	80 91 b0 00 	lds	r24, 0x00B0
 21e:	8f 73       	andi	r24, 0x3F	; 63
 220:	80 93 b0 00 	sts	0x00B0, r24
 224:	58 9a       	sbi	0x0b, 0	; 11
 226:	88 b1       	in	r24, 0x08	; 8
 228:	80 63       	ori	r24, 0x30	; 48
 22a:	88 b9       	out	0x08, r24	; 8
 22c:	00 00       	nop
 22e:	00 00       	nop
 230:	00 00       	nop
 232:	00 00       	nop
 234:	00 00       	nop
 236:	00 00       	nop
 238:	00 00       	nop
 23a:	00 00       	nop
 23c:	dc c0       	rjmp	.+440    	; 0x3f6 <__stack+0xf7>
            break;
        case 6:
            AHCL;
 23e:	84 b5       	in	r24, 0x24	; 36
 240:	8f 70       	andi	r24, 0x0F	; 15
 242:	84 bd       	out	0x24, r24	; 36
 244:	80 91 b0 00 	lds	r24, 0x00B0
 248:	8f 73       	andi	r24, 0x3F	; 63
 24a:	80 93 b0 00 	sts	0x00B0, r24
 24e:	58 9a       	sbi	0x0b, 0	; 11
 250:	88 b1       	in	r24, 0x08	; 8
 252:	80 63       	ori	r24, 0x30	; 48
 254:	88 b9       	out	0x08, r24	; 8
 256:	00 00       	nop
 258:	00 00       	nop
 25a:	00 00       	nop
 25c:	00 00       	nop
 25e:	00 00       	nop
 260:	00 00       	nop
 262:	00 00       	nop
 264:	00 00       	nop
 266:	58 98       	cbi	0x0b, 0	; 11
 268:	6b c0       	rjmp	.+214    	; 0x340 <__stack+0x41>
            break;
        case 2:
            BHCL;
 26a:	84 b5       	in	r24, 0x24	; 36
 26c:	8f 70       	andi	r24, 0x0F	; 15
 26e:	84 bd       	out	0x24, r24	; 36
 270:	80 91 b0 00 	lds	r24, 0x00B0
 274:	8f 73       	andi	r24, 0x3F	; 63
 276:	80 93 b0 00 	sts	0x00B0, r24
 27a:	58 9a       	sbi	0x0b, 0	; 11
 27c:	88 b1       	in	r24, 0x08	; 8
 27e:	80 63       	ori	r24, 0x30	; 48
 280:	88 b9       	out	0x08, r24	; 8
 282:	00 00       	nop
 284:	00 00       	nop
 286:	00 00       	nop
 288:	00 00       	nop
 28a:	00 00       	nop
 28c:	00 00       	nop
 28e:	00 00       	nop
 290:	00 00       	nop
 292:	55 c0       	rjmp	.+170    	; 0x33e <__stack+0x3f>
            break;
        case 3:
            BHAL;
 294:	84 b5       	in	r24, 0x24	; 36
 296:	8f 70       	andi	r24, 0x0F	; 15
 298:	84 bd       	out	0x24, r24	; 36
 29a:	80 91 b0 00 	lds	r24, 0x00B0
 29e:	8f 73       	andi	r24, 0x3F	; 63
 2a0:	80 93 b0 00 	sts	0x00B0, r24
 2a4:	58 9a       	sbi	0x0b, 0	; 11
 2a6:	88 b1       	in	r24, 0x08	; 8
 2a8:	80 63       	ori	r24, 0x30	; 48
 2aa:	88 b9       	out	0x08, r24	; 8
 2ac:	00 00       	nop
 2ae:	00 00       	nop
 2b0:	00 00       	nop
 2b2:	00 00       	nop
 2b4:	00 00       	nop
 2b6:	00 00       	nop
 2b8:	00 00       	nop
 2ba:	00 00       	nop
 2bc:	5b c0       	rjmp	.+182    	; 0x374 <__stack+0x75>
            break;
        case 1:
            CHAL;
 2be:	84 b5       	in	r24, 0x24	; 36
 2c0:	8f 70       	andi	r24, 0x0F	; 15
 2c2:	84 bd       	out	0x24, r24	; 36
 2c4:	80 91 b0 00 	lds	r24, 0x00B0
 2c8:	8f 73       	andi	r24, 0x3F	; 63
 2ca:	80 93 b0 00 	sts	0x00B0, r24
 2ce:	58 9a       	sbi	0x0b, 0	; 11
 2d0:	88 b1       	in	r24, 0x08	; 8
 2d2:	80 63       	ori	r24, 0x30	; 48
 2d4:	88 b9       	out	0x08, r24	; 8
 2d6:	00 00       	nop
 2d8:	00 00       	nop
 2da:	00 00       	nop
 2dc:	00 00       	nop
 2de:	00 00       	nop
 2e0:	00 00       	nop
 2e2:	00 00       	nop
 2e4:	00 00       	nop
 2e6:	44 98       	cbi	0x08, 4	; 8
 2e8:	84 b5       	in	r24, 0x24	; 36
 2ea:	80 68       	ori	r24, 0x80	; 128
 2ec:	87 c0       	rjmp	.+270    	; 0x3fc <__stack+0xfd>
            break;
        }
    }
    else
    {
        switch(phase)
 2ee:	93 30       	cpi	r25, 0x03	; 3
 2f0:	09 f4       	brne	.+2      	; 0x2f4 <commut+0x13e>
 2f2:	6d c0       	rjmp	.+218    	; 0x3ce <__stack+0xcf>
 2f4:	94 30       	cpi	r25, 0x04	; 4
 2f6:	38 f4       	brcc	.+14     	; 0x306 <__stack+0x7>
 2f8:	91 30       	cpi	r25, 0x01	; 1
 2fa:	09 f4       	brne	.+2      	; 0x2fe <commut+0x148>
 2fc:	81 c0       	rjmp	.+258    	; 0x400 <__stack+0x101>
 2fe:	92 30       	cpi	r25, 0x02	; 2
 300:	09 f0       	breq	.+2      	; 0x304 <__stack+0x5>
 302:	98 c0       	rjmp	.+304    	; 0x434 <__stack+0x135>
 304:	4e c0       	rjmp	.+156    	; 0x3a2 <__stack+0xa3>
 306:	95 30       	cpi	r25, 0x05	; 5
 308:	31 f0       	breq	.+12     	; 0x316 <__stack+0x17>
 30a:	95 30       	cpi	r25, 0x05	; 5
 30c:	f8 f0       	brcs	.+62     	; 0x34c <__stack+0x4d>
 30e:	96 30       	cpi	r25, 0x06	; 6
 310:	09 f0       	breq	.+2      	; 0x314 <__stack+0x15>
 312:	90 c0       	rjmp	.+288    	; 0x434 <__stack+0x135>
 314:	31 c0       	rjmp	.+98     	; 0x378 <__stack+0x79>
        {
        case 5:
            BHCL;
 316:	84 b5       	in	r24, 0x24	; 36
 318:	8f 70       	andi	r24, 0x0F	; 15
 31a:	84 bd       	out	0x24, r24	; 36
 31c:	80 91 b0 00 	lds	r24, 0x00B0
 320:	8f 73       	andi	r24, 0x3F	; 63
 322:	80 93 b0 00 	sts	0x00B0, r24
 326:	58 9a       	sbi	0x0b, 0	; 11
 328:	88 b1       	in	r24, 0x08	; 8
 32a:	80 63       	ori	r24, 0x30	; 48
 32c:	88 b9       	out	0x08, r24	; 8
 32e:	00 00       	nop
 330:	00 00       	nop
 332:	00 00       	nop
 334:	00 00       	nop
 336:	00 00       	nop
 338:	00 00       	nop
 33a:	00 00       	nop
 33c:	00 00       	nop
 33e:	45 98       	cbi	0x08, 5	; 8
 340:	80 91 b0 00 	lds	r24, 0x00B0
 344:	80 68       	ori	r24, 0x80	; 128
 346:	80 93 b0 00 	sts	0x00B0, r24
 34a:	08 95       	ret
            break;
        case 4:
            BHAL;
 34c:	84 b5       	in	r24, 0x24	; 36
 34e:	8f 70       	andi	r24, 0x0F	; 15
 350:	84 bd       	out	0x24, r24	; 36
 352:	80 91 b0 00 	lds	r24, 0x00B0
 356:	8f 73       	andi	r24, 0x3F	; 63
 358:	80 93 b0 00 	sts	0x00B0, r24
 35c:	58 9a       	sbi	0x0b, 0	; 11
 35e:	88 b1       	in	r24, 0x08	; 8
 360:	80 63       	ori	r24, 0x30	; 48
 362:	88 b9       	out	0x08, r24	; 8
 364:	00 00       	nop
 366:	00 00       	nop
 368:	00 00       	nop
 36a:	00 00       	nop
 36c:	00 00       	nop
 36e:	00 00       	nop
 370:	00 00       	nop
 372:	00 00       	nop
 374:	45 98       	cbi	0x08, 5	; 8
 376:	b8 cf       	rjmp	.-144    	; 0x2e8 <commut+0x132>
            break;
        case 6:
            CHAL;
 378:	84 b5       	in	r24, 0x24	; 36
 37a:	8f 70       	andi	r24, 0x0F	; 15
 37c:	84 bd       	out	0x24, r24	; 36
 37e:	80 91 b0 00 	lds	r24, 0x00B0
 382:	8f 73       	andi	r24, 0x3F	; 63
 384:	80 93 b0 00 	sts	0x00B0, r24
 388:	58 9a       	sbi	0x0b, 0	; 11
 38a:	88 b1       	in	r24, 0x08	; 8
 38c:	80 63       	ori	r24, 0x30	; 48
 38e:	88 b9       	out	0x08, r24	; 8
 390:	00 00       	nop
 392:	00 00       	nop
 394:	00 00       	nop
 396:	00 00       	nop
 398:	00 00       	nop
 39a:	00 00       	nop
 39c:	00 00       	nop
 39e:	00 00       	nop
 3a0:	a2 cf       	rjmp	.-188    	; 0x2e6 <commut+0x130>
            break;
        case 2:
            CHBL;
 3a2:	84 b5       	in	r24, 0x24	; 36
 3a4:	8f 70       	andi	r24, 0x0F	; 15
 3a6:	84 bd       	out	0x24, r24	; 36
 3a8:	80 91 b0 00 	lds	r24, 0x00B0
 3ac:	8f 73       	andi	r24, 0x3F	; 63
 3ae:	80 93 b0 00 	sts	0x00B0, r24
 3b2:	58 9a       	sbi	0x0b, 0	; 11
 3b4:	88 b1       	in	r24, 0x08	; 8
 3b6:	80 63       	ori	r24, 0x30	; 48
 3b8:	88 b9       	out	0x08, r24	; 8
 3ba:	00 00       	nop
 3bc:	00 00       	nop
 3be:	00 00       	nop
 3c0:	00 00       	nop
 3c2:	00 00       	nop
 3c4:	00 00       	nop
 3c6:	00 00       	nop
 3c8:	00 00       	nop
 3ca:	44 98       	cbi	0x08, 4	; 8
 3cc:	15 c0       	rjmp	.+42     	; 0x3f8 <__stack+0xf9>
            break;
        case 3:
            AHBL;
 3ce:	84 b5       	in	r24, 0x24	; 36
 3d0:	8f 70       	andi	r24, 0x0F	; 15
 3d2:	84 bd       	out	0x24, r24	; 36
 3d4:	80 91 b0 00 	lds	r24, 0x00B0
 3d8:	8f 73       	andi	r24, 0x3F	; 63
 3da:	80 93 b0 00 	sts	0x00B0, r24
 3de:	58 9a       	sbi	0x0b, 0	; 11
 3e0:	88 b1       	in	r24, 0x08	; 8
 3e2:	80 63       	ori	r24, 0x30	; 48
 3e4:	88 b9       	out	0x08, r24	; 8
 3e6:	00 00       	nop
 3e8:	00 00       	nop
 3ea:	00 00       	nop
 3ec:	00 00       	nop
 3ee:	00 00       	nop
 3f0:	00 00       	nop
 3f2:	00 00       	nop
 3f4:	00 00       	nop
 3f6:	58 98       	cbi	0x0b, 0	; 11
 3f8:	84 b5       	in	r24, 0x24	; 36
 3fa:	80 62       	ori	r24, 0x20	; 32
 3fc:	84 bd       	out	0x24, r24	; 36
 3fe:	08 95       	ret
            break;
        case 1:
            AHCL;
 400:	84 b5       	in	r24, 0x24	; 36
 402:	8f 70       	andi	r24, 0x0F	; 15
 404:	84 bd       	out	0x24, r24	; 36
 406:	80 91 b0 00 	lds	r24, 0x00B0
 40a:	8f 73       	andi	r24, 0x3F	; 63
 40c:	80 93 b0 00 	sts	0x00B0, r24
 410:	58 9a       	sbi	0x0b, 0	; 11
 412:	88 b1       	in	r24, 0x08	; 8
 414:	80 63       	ori	r24, 0x30	; 48
 416:	88 b9       	out	0x08, r24	; 8
 418:	00 00       	nop
 41a:	00 00       	nop
 41c:	00 00       	nop
 41e:	00 00       	nop
 420:	00 00       	nop
 422:	00 00       	nop
 424:	00 00       	nop
 426:	00 00       	nop
 428:	58 98       	cbi	0x0b, 0	; 11
 42a:	80 91 b0 00 	lds	r24, 0x00B0
 42e:	80 68       	ori	r24, 0x80	; 128
 430:	80 93 b0 00 	sts	0x00B0, r24
 434:	08 95       	ret

00000436 <StartFun>:
    VelInte++;
    commut(PINC&0x07);
}

int StartFun(unsigned char SetSpeed)
{
 436:	0f 93       	push	r16
 438:	1f 93       	push	r17
 43a:	cf 93       	push	r28
 43c:	df 93       	push	r29
    unsigned char i = 0;
    unsigned char temp = 0xE0;
	stall = times = 0;
 43e:	10 92 2c 03 	sts	0x032C, r1
 442:	10 92 00 01 	sts	0x0100, r1
    DIS_PCINT;
 446:	80 91 68 00 	lds	r24, 0x0068
 44a:	8c 7f       	andi	r24, 0xFC	; 252
 44c:	80 93 68 00 	sts	0x0068, r24
    T1_OFF;
 450:	10 92 81 00 	sts	0x0081, r1
 454:	80 91 6f 00 	lds	r24, 0x006F
 458:	8e 7f       	andi	r24, 0xFE	; 254
 45a:	80 93 6f 00 	sts	0x006F, r24
    I1_OFF;
 45e:	e9 98       	cbi	0x1d, 1	; 29
    OCR0A = OCR0B = OCR2A = temp;
 460:	80 ee       	ldi	r24, 0xE0	; 224
 462:	80 93 b3 00 	sts	0x00B3, r24
 466:	80 91 b3 00 	lds	r24, 0x00B3
 46a:	88 bd       	out	0x28, r24	; 40
 46c:	88 b5       	in	r24, 0x28	; 40
 46e:	87 bd       	out	0x27, r24	; 39
    ENB_PCINT;				// Enable PC interrupt
 470:	80 91 68 00 	lds	r24, 0x0068
 474:	82 60       	ori	r24, 0x02	; 2
 476:	80 93 68 00 	sts	0x0068, r24
 47a:	00 ee       	ldi	r16, 0xE0	; 224
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 47c:	c0 e2       	ldi	r28, 0x20	; 32
 47e:	de e4       	ldi	r29, 0x4E	; 78
 480:	10 e0       	ldi	r17, 0x00	; 0
    while(1)
    {
        for(i=0; i<8; i++)
        {
            if(VelInte > 4)     // motor start success
 482:	80 91 22 03 	lds	r24, 0x0322
 486:	90 91 23 03 	lds	r25, 0x0323
 48a:	05 97       	sbiw	r24, 0x05	; 5
 48c:	f0 f4       	brcc	.+60     	; 0x4ca <StartFun+0x94>
                goto over;
            commut(i);
 48e:	81 2f       	mov	r24, r17
 490:	92 de       	rcall	.-732    	; 0x1b6 <commut>
 492:	ce 01       	movw	r24, r28
 494:	01 97       	sbiw	r24, 0x01	; 1
 496:	f1 f7       	brne	.-4      	; 0x494 <StartFun+0x5e>
    I1_OFF;
    OCR0A = OCR0B = OCR2A = temp;
    ENB_PCINT;				// Enable PC interrupt
    while(1)
    {
        for(i=0; i<8; i++)
 498:	1f 5f       	subi	r17, 0xFF	; 255
 49a:	18 30       	cpi	r17, 0x08	; 8
 49c:	91 f7       	brne	.-28     	; 0x482 <StartFun+0x4c>
            if(VelInte > 4)     // motor start success
                goto over;
            commut(i);
            _delay_ms(10);
        }
        temp -= 8;
 49e:	08 50       	subi	r16, 0x08	; 8
        if(temp < 24)
 4a0:	00 31       	cpi	r16, 0x10	; 16
 4a2:	59 f4       	brne	.+22     	; 0x4ba <StartFun+0x84>
        {
            OCR0A = OCR0B = OCR2A = 0xFF;
 4a4:	8f ef       	ldi	r24, 0xFF	; 255
 4a6:	80 93 b3 00 	sts	0x00B3, r24
 4aa:	80 91 b3 00 	lds	r24, 0x00B3
 4ae:	88 bd       	out	0x28, r24	; 40
 4b0:	88 b5       	in	r24, 0x28	; 40
 4b2:	87 bd       	out	0x27, r24	; 39
 4b4:	20 e0       	ldi	r18, 0x00	; 0
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	0a c0       	rjmp	.+20     	; 0x4ce <StartFun+0x98>
            return 0;
        }
        else
            OCR0A = OCR0B = OCR2A = temp;
 4ba:	00 93 b3 00 	sts	0x00B3, r16
 4be:	80 91 b3 00 	lds	r24, 0x00B3
 4c2:	88 bd       	out	0x28, r24	; 40
 4c4:	88 b5       	in	r24, 0x28	; 40
 4c6:	87 bd       	out	0x27, r24	; 39
 4c8:	db cf       	rjmp	.-74     	; 0x480 <StartFun+0x4a>
    }
 4ca:	21 e0       	ldi	r18, 0x01	; 1
 4cc:	30 e0       	ldi	r19, 0x00	; 0
over:
    return 1;
}
 4ce:	c9 01       	movw	r24, r18
 4d0:	df 91       	pop	r29
 4d2:	cf 91       	pop	r28
 4d4:	1f 91       	pop	r17
 4d6:	0f 91       	pop	r16
 4d8:	08 95       	ret

000004da <__vector_4>:
		update = 1;
	}
}

ISR(PCINT1_vect)
{
 4da:	1f 92       	push	r1
 4dc:	0f 92       	push	r0
 4de:	0f b6       	in	r0, 0x3f	; 63
 4e0:	0f 92       	push	r0
 4e2:	11 24       	eor	r1, r1
 4e4:	2f 93       	push	r18
 4e6:	3f 93       	push	r19
 4e8:	4f 93       	push	r20
 4ea:	5f 93       	push	r21
 4ec:	6f 93       	push	r22
 4ee:	7f 93       	push	r23
 4f0:	8f 93       	push	r24
 4f2:	9f 93       	push	r25
 4f4:	af 93       	push	r26
 4f6:	bf 93       	push	r27
 4f8:	ef 93       	push	r30
 4fa:	ff 93       	push	r31
    VelInte++;
 4fc:	80 91 22 03 	lds	r24, 0x0322
 500:	90 91 23 03 	lds	r25, 0x0323
 504:	01 96       	adiw	r24, 0x01	; 1
 506:	90 93 23 03 	sts	0x0323, r25
 50a:	80 93 22 03 	sts	0x0322, r24
    commut(PINC&0x07);
 50e:	86 b1       	in	r24, 0x06	; 6
 510:	87 70       	andi	r24, 0x07	; 7
 512:	51 de       	rcall	.-862    	; 0x1b6 <commut>
}
 514:	ff 91       	pop	r31
 516:	ef 91       	pop	r30
 518:	bf 91       	pop	r27
 51a:	af 91       	pop	r26
 51c:	9f 91       	pop	r25
 51e:	8f 91       	pop	r24
 520:	7f 91       	pop	r23
 522:	6f 91       	pop	r22
 524:	5f 91       	pop	r21
 526:	4f 91       	pop	r20
 528:	3f 91       	pop	r19
 52a:	2f 91       	pop	r18
 52c:	0f 90       	pop	r0
 52e:	0f be       	out	0x3f, r0	; 63
 530:	0f 90       	pop	r0
 532:	1f 90       	pop	r1
 534:	18 95       	reti

00000536 <main>:
        }
    }
}

int main(void)
{
 536:	1f 93       	push	r17
 538:	cf 93       	push	r28
 53a:	df 93       	push	r29
	cli();
 53c:	f8 94       	cli
    PortInit();
 53e:	96 dd       	rcall	.-1236   	; 0x6c <PortInit>
    D1_BLINK;
 540:	85 b1       	in	r24, 0x05	; 5
 542:	92 e0       	ldi	r25, 0x02	; 2
 544:	89 27       	eor	r24, r25
 546:	85 b9       	out	0x05, r24	; 5
 548:	88 e8       	ldi	r24, 0x88	; 136
 54a:	93 e1       	ldi	r25, 0x13	; 19
 54c:	28 ec       	ldi	r18, 0xC8	; 200
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	f9 01       	movw	r30, r18
 552:	31 97       	sbiw	r30, 0x01	; 1
 554:	f1 f7       	brne	.-4      	; 0x552 <main+0x1c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 556:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 558:	d9 f7       	brne	.-10     	; 0x550 <main+0x1a>
    _delay_ms(500);
    D1_BLINK;
 55a:	85 b1       	in	r24, 0x05	; 5
 55c:	92 e0       	ldi	r25, 0x02	; 2
 55e:	89 27       	eor	r24, r25
 560:	85 b9       	out	0x05, r24	; 5
    EICRA = 1<<ISC10 | 1<<ISC11;		// rising init
}

void PCInit(void)
{
    PCICR |= 1<<PCIE1;			// PCINT[14:8] 
 562:	80 91 68 00 	lds	r24, 0x0068
 566:	82 60       	ori	r24, 0x02	; 2
 568:	80 93 68 00 	sts	0x0068, r24
    PCMSK1 |= 0x07;				//
 56c:	80 91 6c 00 	lds	r24, 0x006C
 570:	87 60       	ori	r24, 0x07	; 7
 572:	80 93 6c 00 	sts	0x006C, r24
}

void T0Init(void)
{
    TCCR0A = 1<<COM0A1 | 1<<COM0B1 | 1<<WGM00;		// 8bit phase
 576:	81 ea       	ldi	r24, 0xA1	; 161
 578:	84 bd       	out	0x24, r24	; 36
    TCCR0B = 1<<CS00;			// 0 divide
 57a:	91 e0       	ldi	r25, 0x01	; 1
 57c:	95 bd       	out	0x25, r25	; 37
    OCR0A = OCR0B = 0x00;
 57e:	18 bc       	out	0x28, r1	; 40
 580:	88 b5       	in	r24, 0x28	; 40
 582:	87 bd       	out	0x27, r24	; 39
}

void T2Init(void)
{
    TCCR2A = 1<<COM2A1 | 1<<WGM20;
 584:	81 e8       	ldi	r24, 0x81	; 129
 586:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = 1<<CS20;
 58a:	90 93 b1 00 	sts	0x00B1, r25
    OCR2A = 0x00;
 58e:	10 92 b3 00 	sts	0x00B3, r1
    PINC = 0x00;
}

void T1Init(void)
{
	TCCR1B = 1<<ICNC1 | 1<<ICES1 | 1<<CS11;			// rising trigger
 592:	82 ec       	ldi	r24, 0xC2	; 194
 594:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = 1<<ICIE1;
 598:	80 e2       	ldi	r24, 0x20	; 32
 59a:	80 93 6f 00 	sts	0x006F, r24
	TCNT1 = 0;
 59e:	10 92 85 00 	sts	0x0085, r1
 5a2:	10 92 84 00 	sts	0x0084, r1
    D1_BLINK;
	PCInit();
    T0Init();
    T2Init();
	T1Init();
	sei();
 5a6:	78 94       	sei
				value = abs(value);
				value >>= 1;
				if(value > 255)
					value = 255;
				value = porp[value];
				dir = 1;
 5a8:	11 e0       	ldi	r17, 0x01	; 1
			{
				D1_OFF;
				value = abs(value);
				value >>= 1;
				if(value > 255)
					value = 255;
 5aa:	cf ef       	ldi	r28, 0xFF	; 255
 5ac:	d0 e0       	ldi	r29, 0x00	; 0
    T2Init();
	T1Init();
	sei();
    while(1)
    {
		if(update)
 5ae:	80 91 2b 03 	lds	r24, 0x032B
 5b2:	88 23       	and	r24, r24
 5b4:	e1 f3       	breq	.-8      	; 0x5ae <main+0x78>
		{
			update = 0;
 5b6:	10 92 2b 03 	sts	0x032B, r1
			value = speed-1500;
 5ba:	20 91 26 03 	lds	r18, 0x0326
 5be:	30 91 27 03 	lds	r19, 0x0327
 5c2:	2c 5d       	subi	r18, 0xDC	; 220
 5c4:	35 40       	sbci	r19, 0x05	; 5
 5c6:	30 93 2a 03 	sts	0x032A, r19
 5ca:	20 93 29 03 	sts	0x0329, r18
			if(value >= 0)
 5ce:	37 fd       	sbrc	r19, 7
 5d0:	21 c0       	rjmp	.+66     	; 0x614 <main+0xde>
			{
				D1_ON;
 5d2:	29 9a       	sbi	0x05, 1	; 5
				dir = 0;
 5d4:	10 92 28 03 	sts	0x0328, r1
				value >>= 1;
 5d8:	c9 01       	movw	r24, r18
 5da:	95 95       	asr	r25
 5dc:	87 95       	ror	r24
 5de:	90 93 2a 03 	sts	0x032A, r25
 5e2:	80 93 29 03 	sts	0x0329, r24
				if(value > 255)
 5e6:	8f 3f       	cpi	r24, 0xFF	; 255
 5e8:	91 05       	cpc	r25, r1
 5ea:	29 f0       	breq	.+10     	; 0x5f6 <main+0xc0>
 5ec:	24 f0       	brlt	.+8      	; 0x5f6 <main+0xc0>
					value = 255;
 5ee:	d0 93 2a 03 	sts	0x032A, r29
 5f2:	c0 93 29 03 	sts	0x0329, r28
				value = porp[value];
 5f6:	e0 91 29 03 	lds	r30, 0x0329
 5fa:	f0 91 2a 03 	lds	r31, 0x032A
 5fe:	ee 0f       	add	r30, r30
 600:	ff 1f       	adc	r31, r31
 602:	ee 5f       	subi	r30, 0xFE	; 254
 604:	fe 4f       	sbci	r31, 0xFE	; 254
 606:	80 81       	ld	r24, Z
 608:	91 81       	ldd	r25, Z+1	; 0x01
 60a:	90 93 2a 03 	sts	0x032A, r25
 60e:	80 93 29 03 	sts	0x0329, r24
 612:	23 c0       	rjmp	.+70     	; 0x65a <main+0x124>
			}
			else
			{
				D1_OFF;
 614:	29 98       	cbi	0x05, 1	; 5
				value = abs(value);
				value >>= 1;
 616:	88 27       	eor	r24, r24
 618:	99 27       	eor	r25, r25
 61a:	82 1b       	sub	r24, r18
 61c:	93 0b       	sbc	r25, r19
 61e:	95 95       	asr	r25
 620:	87 95       	ror	r24
 622:	90 93 2a 03 	sts	0x032A, r25
 626:	80 93 29 03 	sts	0x0329, r24
				if(value > 255)
 62a:	8f 3f       	cpi	r24, 0xFF	; 255
 62c:	91 05       	cpc	r25, r1
 62e:	29 f0       	breq	.+10     	; 0x63a <main+0x104>
 630:	24 f0       	brlt	.+8      	; 0x63a <main+0x104>
					value = 255;
 632:	d0 93 2a 03 	sts	0x032A, r29
 636:	c0 93 29 03 	sts	0x0329, r28
				value = porp[value];
 63a:	e0 91 29 03 	lds	r30, 0x0329
 63e:	f0 91 2a 03 	lds	r31, 0x032A
 642:	ee 0f       	add	r30, r30
 644:	ff 1f       	adc	r31, r31
 646:	ee 5f       	subi	r30, 0xFE	; 254
 648:	fe 4f       	sbci	r31, 0xFE	; 254
 64a:	80 81       	ld	r24, Z
 64c:	91 81       	ldd	r25, Z+1	; 0x01
 64e:	90 93 2a 03 	sts	0x032A, r25
 652:	80 93 29 03 	sts	0x0329, r24
				dir = 1;
 656:	10 93 28 03 	sts	0x0328, r17
			}
			if(stall && value>1)
 65a:	80 91 00 01 	lds	r24, 0x0100
 65e:	88 23       	and	r24, r24
 660:	99 f0       	breq	.+38     	; 0x688 <main+0x152>
 662:	80 91 29 03 	lds	r24, 0x0329
 666:	90 91 2a 03 	lds	r25, 0x032A
 66a:	02 97       	sbiw	r24, 0x02	; 2
 66c:	6c f0       	brlt	.+26     	; 0x688 <main+0x152>
			{
				while(!StartFun(0x80));
 66e:	80 e8       	ldi	r24, 0x80	; 128
 670:	e2 de       	rcall	.-572    	; 0x436 <StartFun>
 672:	89 2b       	or	r24, r25
 674:	e1 f3       	breq	.-8      	; 0x66e <main+0x138>
				OCR0A = OCR0B = OCR2A = value;
 676:	80 91 29 03 	lds	r24, 0x0329
 67a:	80 93 b3 00 	sts	0x00B3, r24
 67e:	80 91 b3 00 	lds	r24, 0x00B3
 682:	88 bd       	out	0x28, r24	; 40
 684:	88 b5       	in	r24, 0x28	; 40
 686:	87 bd       	out	0x27, r24	; 39
			}
			OCR0A = OCR0B = OCR2A = value;
 688:	80 91 29 03 	lds	r24, 0x0329
 68c:	80 93 b3 00 	sts	0x00B3, r24
 690:	80 91 b3 00 	lds	r24, 0x00B3
 694:	88 bd       	out	0x28, r24	; 40
 696:	88 b5       	in	r24, 0x28	; 40
 698:	87 bd       	out	0x27, r24	; 39
 69a:	89 cf       	rjmp	.-238    	; 0x5ae <main+0x78>

0000069c <_exit>:
 69c:	f8 94       	cli

0000069e <__stop_program>:
 69e:	ff cf       	rjmp	.-2      	; 0x69e <__stop_program>
