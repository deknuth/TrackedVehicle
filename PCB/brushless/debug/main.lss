
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000102  00800100  000005a6  0000063a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800202  00800202  0000073c  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000e1  00000000  00000000  0000075c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000046c  00000000  00000000  0000083d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001d6  00000000  00000000  00000ca9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000407  00000000  00000000  00000e7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00001288  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000159  00000000  00000000  00001318  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000148  00000000  00000000  00001471  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000015b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	3e c2       	rjmp	.+1148   	; 0x486 <__vector_4>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	12 e0       	ldi	r17, 0x02	; 2
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e6 ea       	ldi	r30, 0xA6	; 166
  48:	f5 e0       	ldi	r31, 0x05	; 5
  4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
  50:	a2 30       	cpi	r26, 0x02	; 2
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>

00000056 <__do_clear_bss>:
  56:	12 e0       	ldi	r17, 0x02	; 2
  58:	a2 e0       	ldi	r26, 0x02	; 2
  5a:	b2 e0       	ldi	r27, 0x02	; 2
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	ad 31       	cpi	r26, 0x1D	; 29
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	3d d2       	rcall	.+1146   	; 0x4e2 <main>
  68:	9c c2       	rjmp	.+1336   	; 0x5a2 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <PortInit>:

static void commut(unsigned char phase);        //  commutation

void PortInit(void)
{
    DDRB = 0B00001110;
  6c:	8e e0       	ldi	r24, 0x0E	; 14
  6e:	84 b9       	out	0x04, r24	; 4
    PORTB= 0B00001000;
  70:	88 e0       	ldi	r24, 0x08	; 8
  72:	85 b9       	out	0x05, r24	; 5
    PINB = 0x00;
  74:	13 b8       	out	0x03, r1	; 3

    DDRD = 0B11100101;
  76:	85 ee       	ldi	r24, 0xE5	; 229
  78:	8a b9       	out	0x0a, r24	; 10
    PORTD= 0B01100001;
  7a:	81 e6       	ldi	r24, 0x61	; 97
  7c:	8b b9       	out	0x0b, r24	; 11
    PIND = 0x00;
  7e:	19 b8       	out	0x09, r1	; 9

    DDRC = 0B00110000;
  80:	80 e3       	ldi	r24, 0x30	; 48
  82:	87 b9       	out	0x07, r24	; 7
    PORTC= 0B00110000;
  84:	88 b9       	out	0x08, r24	; 8
    PINC = 0x00;
  86:	16 b8       	out	0x06, r1	; 6
}
  88:	08 95       	ret

0000008a <PCInit>:

void PCInit(void)
{
    PCICR |= 1<<PCIE1;			// PCINT[14:8] 
  8a:	e8 e6       	ldi	r30, 0x68	; 104
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	82 60       	ori	r24, 0x02	; 2
  92:	80 83       	st	Z, r24
    PCMSK1 |= 0x07;				//
  94:	ec e6       	ldi	r30, 0x6C	; 108
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	87 60       	ori	r24, 0x07	; 7
  9c:	80 83       	st	Z, r24
}
  9e:	08 95       	ret

000000a0 <T0Init>:

void T0Init(void)
{
    TCCR0A = 1<<COM0A1 | 1<<COM0B1 | 1<<WGM00;		// 8bit phase
  a0:	81 ea       	ldi	r24, 0xA1	; 161
  a2:	84 bd       	out	0x24, r24	; 36
    TCCR0B = 1<<CS00;			// 0 divide
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	85 bd       	out	0x25, r24	; 37
    OCR0A = OCR0B = 0x00;
  a8:	18 bc       	out	0x28, r1	; 40
  aa:	88 b5       	in	r24, 0x28	; 40
  ac:	87 bd       	out	0x27, r24	; 39
}
  ae:	08 95       	ret

000000b0 <T2Init>:

void T2Init(void)
{
    TCCR2A = 1<<COM2A1 | 1<<WGM20;
  b0:	81 e8       	ldi	r24, 0x81	; 129
  b2:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = 1<<CS20;
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	80 93 b1 00 	sts	0x00B1, r24
    OCR2A = 0x00;
  bc:	10 92 b3 00 	sts	0x00B3, r1
}
  c0:	08 95       	ret

000000c2 <commut>:
            OCR1A = OCR1B = OCR2A = temp;
    }
}

void commut(unsigned char phase)        //  commutation
{
  c2:	98 2f       	mov	r25, r24
    if(dir)
  c4:	80 91 18 02 	lds	r24, 0x0218
  c8:	88 23       	and	r24, r24
  ca:	09 f4       	brne	.+2      	; 0xce <commut+0xc>
  cc:	ae c0       	rjmp	.+348    	; 0x22a <commut+0x168>
    {
        switch(phase)
  ce:	93 30       	cpi	r25, 0x03	; 3
  d0:	09 f4       	brne	.+2      	; 0xd4 <commut+0x12>
  d2:	76 c0       	rjmp	.+236    	; 0x1c0 <commut+0xfe>
  d4:	94 30       	cpi	r25, 0x04	; 4
  d6:	38 f4       	brcc	.+14     	; 0xe6 <commut+0x24>
  d8:	91 30       	cpi	r25, 0x01	; 1
  da:	09 f4       	brne	.+2      	; 0xde <commut+0x1c>
  dc:	8a c0       	rjmp	.+276    	; 0x1f2 <commut+0x130>
  de:	92 30       	cpi	r25, 0x02	; 2
  e0:	09 f0       	breq	.+2      	; 0xe4 <commut+0x22>
  e2:	5e c1       	rjmp	.+700    	; 0x3a0 <__stack+0xa1>
  e4:	54 c0       	rjmp	.+168    	; 0x18e <commut+0xcc>
  e6:	95 30       	cpi	r25, 0x05	; 5
  e8:	31 f0       	breq	.+12     	; 0xf6 <commut+0x34>
  ea:	95 30       	cpi	r25, 0x05	; 5
  ec:	e8 f0       	brcs	.+58     	; 0x128 <commut+0x66>
  ee:	96 30       	cpi	r25, 0x06	; 6
  f0:	09 f0       	breq	.+2      	; 0xf4 <commut+0x32>
  f2:	56 c1       	rjmp	.+684    	; 0x3a0 <__stack+0xa1>
  f4:	32 c0       	rjmp	.+100    	; 0x15a <commut+0x98>
        {
        case 5:
            CHBL;
  f6:	84 b5       	in	r24, 0x24	; 36
  f8:	8f 70       	andi	r24, 0x0F	; 15
  fa:	84 bd       	out	0x24, r24	; 36
  fc:	80 91 b0 00 	lds	r24, 0x00B0
 100:	8f 73       	andi	r24, 0x3F	; 63
 102:	80 93 b0 00 	sts	0x00B0, r24
 106:	2a 9a       	sbi	0x05, 2	; 5
 108:	8b b1       	in	r24, 0x0b	; 11
 10a:	80 66       	ori	r24, 0x60	; 96
 10c:	8b b9       	out	0x0b, r24	; 11
 10e:	58 9a       	sbi	0x0b, 0	; 11
 110:	88 b1       	in	r24, 0x08	; 8
 112:	80 63       	ori	r24, 0x30	; 48
 114:	88 b9       	out	0x08, r24	; 8
 116:	00 00       	nop
 118:	00 00       	nop
 11a:	00 00       	nop
 11c:	00 00       	nop
 11e:	00 00       	nop
 120:	00 00       	nop
 122:	00 00       	nop
 124:	00 00       	nop
 126:	ff c0       	rjmp	.+510    	; 0x326 <__stack+0x27>
            break;
        case 4:
            AHBL;
 128:	84 b5       	in	r24, 0x24	; 36
 12a:	8f 70       	andi	r24, 0x0F	; 15
 12c:	84 bd       	out	0x24, r24	; 36
 12e:	80 91 b0 00 	lds	r24, 0x00B0
 132:	8f 73       	andi	r24, 0x3F	; 63
 134:	80 93 b0 00 	sts	0x00B0, r24
 138:	2a 9a       	sbi	0x05, 2	; 5
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	80 66       	ori	r24, 0x60	; 96
 13e:	8b b9       	out	0x0b, r24	; 11
 140:	58 9a       	sbi	0x0b, 0	; 11
 142:	88 b1       	in	r24, 0x08	; 8
 144:	80 63       	ori	r24, 0x30	; 48
 146:	88 b9       	out	0x08, r24	; 8
 148:	00 00       	nop
 14a:	00 00       	nop
 14c:	00 00       	nop
 14e:	00 00       	nop
 150:	00 00       	nop
 152:	00 00       	nop
 154:	00 00       	nop
 156:	00 00       	nop
 158:	00 c1       	rjmp	.+512    	; 0x35a <__stack+0x5b>
            break;
        case 6:
            AHCL;
 15a:	84 b5       	in	r24, 0x24	; 36
 15c:	8f 70       	andi	r24, 0x0F	; 15
 15e:	84 bd       	out	0x24, r24	; 36
 160:	80 91 b0 00 	lds	r24, 0x00B0
 164:	8f 73       	andi	r24, 0x3F	; 63
 166:	80 93 b0 00 	sts	0x00B0, r24
 16a:	2a 9a       	sbi	0x05, 2	; 5
 16c:	8b b1       	in	r24, 0x0b	; 11
 16e:	80 66       	ori	r24, 0x60	; 96
 170:	8b b9       	out	0x0b, r24	; 11
 172:	58 9a       	sbi	0x0b, 0	; 11
 174:	88 b1       	in	r24, 0x08	; 8
 176:	80 63       	ori	r24, 0x30	; 48
 178:	88 b9       	out	0x08, r24	; 8
 17a:	00 00       	nop
 17c:	00 00       	nop
 17e:	00 00       	nop
 180:	00 00       	nop
 182:	00 00       	nop
 184:	00 00       	nop
 186:	00 00       	nop
 188:	00 00       	nop
 18a:	58 98       	cbi	0x0b, 0	; 11
 18c:	7b c0       	rjmp	.+246    	; 0x284 <commut+0x1c2>
            break;
        case 2:
            BHCL;
 18e:	84 b5       	in	r24, 0x24	; 36
 190:	8f 70       	andi	r24, 0x0F	; 15
 192:	84 bd       	out	0x24, r24	; 36
 194:	80 91 b0 00 	lds	r24, 0x00B0
 198:	8f 73       	andi	r24, 0x3F	; 63
 19a:	80 93 b0 00 	sts	0x00B0, r24
 19e:	2a 9a       	sbi	0x05, 2	; 5
 1a0:	8b b1       	in	r24, 0x0b	; 11
 1a2:	80 66       	ori	r24, 0x60	; 96
 1a4:	8b b9       	out	0x0b, r24	; 11
 1a6:	58 9a       	sbi	0x0b, 0	; 11
 1a8:	88 b1       	in	r24, 0x08	; 8
 1aa:	80 63       	ori	r24, 0x30	; 48
 1ac:	88 b9       	out	0x08, r24	; 8
 1ae:	00 00       	nop
 1b0:	00 00       	nop
 1b2:	00 00       	nop
 1b4:	00 00       	nop
 1b6:	00 00       	nop
 1b8:	00 00       	nop
 1ba:	00 00       	nop
 1bc:	00 00       	nop
 1be:	61 c0       	rjmp	.+194    	; 0x282 <commut+0x1c0>
            break;
        case 3:
            BHAL;
 1c0:	84 b5       	in	r24, 0x24	; 36
 1c2:	8f 70       	andi	r24, 0x0F	; 15
 1c4:	84 bd       	out	0x24, r24	; 36
 1c6:	80 91 b0 00 	lds	r24, 0x00B0
 1ca:	8f 73       	andi	r24, 0x3F	; 63
 1cc:	80 93 b0 00 	sts	0x00B0, r24
 1d0:	2a 9a       	sbi	0x05, 2	; 5
 1d2:	8b b1       	in	r24, 0x0b	; 11
 1d4:	80 66       	ori	r24, 0x60	; 96
 1d6:	8b b9       	out	0x0b, r24	; 11
 1d8:	58 9a       	sbi	0x0b, 0	; 11
 1da:	88 b1       	in	r24, 0x08	; 8
 1dc:	80 63       	ori	r24, 0x30	; 48
 1de:	88 b9       	out	0x08, r24	; 8
 1e0:	00 00       	nop
 1e2:	00 00       	nop
 1e4:	00 00       	nop
 1e6:	00 00       	nop
 1e8:	00 00       	nop
 1ea:	00 00       	nop
 1ec:	00 00       	nop
 1ee:	00 00       	nop
 1f0:	67 c0       	rjmp	.+206    	; 0x2c0 <commut+0x1fe>
            break;
        case 1:
            CHAL;
 1f2:	84 b5       	in	r24, 0x24	; 36
 1f4:	8f 70       	andi	r24, 0x0F	; 15
 1f6:	84 bd       	out	0x24, r24	; 36
 1f8:	80 91 b0 00 	lds	r24, 0x00B0
 1fc:	8f 73       	andi	r24, 0x3F	; 63
 1fe:	80 93 b0 00 	sts	0x00B0, r24
 202:	2a 9a       	sbi	0x05, 2	; 5
 204:	8b b1       	in	r24, 0x0b	; 11
 206:	80 66       	ori	r24, 0x60	; 96
 208:	8b b9       	out	0x0b, r24	; 11
 20a:	58 9a       	sbi	0x0b, 0	; 11
 20c:	88 b1       	in	r24, 0x08	; 8
 20e:	80 63       	ori	r24, 0x30	; 48
 210:	88 b9       	out	0x08, r24	; 8
 212:	00 00       	nop
 214:	00 00       	nop
 216:	00 00       	nop
 218:	00 00       	nop
 21a:	00 00       	nop
 21c:	00 00       	nop
 21e:	00 00       	nop
 220:	00 00       	nop
 222:	44 98       	cbi	0x08, 4	; 8
 224:	84 b5       	in	r24, 0x24	; 36
 226:	80 68       	ori	r24, 0x80	; 128
 228:	9b c0       	rjmp	.+310    	; 0x360 <__stack+0x61>
            break;
        }
    }
    else
    {
        switch(phase)
 22a:	93 30       	cpi	r25, 0x03	; 3
 22c:	09 f4       	brne	.+2      	; 0x230 <commut+0x16e>
 22e:	7d c0       	rjmp	.+250    	; 0x32a <__stack+0x2b>
 230:	94 30       	cpi	r25, 0x04	; 4
 232:	38 f4       	brcc	.+14     	; 0x242 <commut+0x180>
 234:	91 30       	cpi	r25, 0x01	; 1
 236:	09 f4       	brne	.+2      	; 0x23a <commut+0x178>
 238:	95 c0       	rjmp	.+298    	; 0x364 <__stack+0x65>
 23a:	92 30       	cpi	r25, 0x02	; 2
 23c:	09 f0       	breq	.+2      	; 0x240 <commut+0x17e>
 23e:	b0 c0       	rjmp	.+352    	; 0x3a0 <__stack+0xa1>
 240:	5a c0       	rjmp	.+180    	; 0x2f6 <commut+0x234>
 242:	95 30       	cpi	r25, 0x05	; 5
 244:	31 f0       	breq	.+12     	; 0x252 <commut+0x190>
 246:	95 30       	cpi	r25, 0x05	; 5
 248:	18 f1       	brcs	.+70     	; 0x290 <commut+0x1ce>
 24a:	96 30       	cpi	r25, 0x06	; 6
 24c:	09 f0       	breq	.+2      	; 0x250 <commut+0x18e>
 24e:	a8 c0       	rjmp	.+336    	; 0x3a0 <__stack+0xa1>
 250:	39 c0       	rjmp	.+114    	; 0x2c4 <commut+0x202>
        {
        case 5:
            BHCL;
 252:	84 b5       	in	r24, 0x24	; 36
 254:	8f 70       	andi	r24, 0x0F	; 15
 256:	84 bd       	out	0x24, r24	; 36
 258:	80 91 b0 00 	lds	r24, 0x00B0
 25c:	8f 73       	andi	r24, 0x3F	; 63
 25e:	80 93 b0 00 	sts	0x00B0, r24
 262:	2a 9a       	sbi	0x05, 2	; 5
 264:	8b b1       	in	r24, 0x0b	; 11
 266:	80 66       	ori	r24, 0x60	; 96
 268:	8b b9       	out	0x0b, r24	; 11
 26a:	58 9a       	sbi	0x0b, 0	; 11
 26c:	88 b1       	in	r24, 0x08	; 8
 26e:	80 63       	ori	r24, 0x30	; 48
 270:	88 b9       	out	0x08, r24	; 8
 272:	00 00       	nop
 274:	00 00       	nop
 276:	00 00       	nop
 278:	00 00       	nop
 27a:	00 00       	nop
 27c:	00 00       	nop
 27e:	00 00       	nop
 280:	00 00       	nop
 282:	45 98       	cbi	0x08, 5	; 8
 284:	80 91 b0 00 	lds	r24, 0x00B0
 288:	80 68       	ori	r24, 0x80	; 128
 28a:	80 93 b0 00 	sts	0x00B0, r24
 28e:	08 95       	ret
            break;
        case 4:
            BHAL;
 290:	84 b5       	in	r24, 0x24	; 36
 292:	8f 70       	andi	r24, 0x0F	; 15
 294:	84 bd       	out	0x24, r24	; 36
 296:	80 91 b0 00 	lds	r24, 0x00B0
 29a:	8f 73       	andi	r24, 0x3F	; 63
 29c:	80 93 b0 00 	sts	0x00B0, r24
 2a0:	2a 9a       	sbi	0x05, 2	; 5
 2a2:	8b b1       	in	r24, 0x0b	; 11
 2a4:	80 66       	ori	r24, 0x60	; 96
 2a6:	8b b9       	out	0x0b, r24	; 11
 2a8:	58 9a       	sbi	0x0b, 0	; 11
 2aa:	88 b1       	in	r24, 0x08	; 8
 2ac:	80 63       	ori	r24, 0x30	; 48
 2ae:	88 b9       	out	0x08, r24	; 8
 2b0:	00 00       	nop
 2b2:	00 00       	nop
 2b4:	00 00       	nop
 2b6:	00 00       	nop
 2b8:	00 00       	nop
 2ba:	00 00       	nop
 2bc:	00 00       	nop
 2be:	00 00       	nop
 2c0:	45 98       	cbi	0x08, 5	; 8
 2c2:	b0 cf       	rjmp	.-160    	; 0x224 <commut+0x162>
            break;
        case 6:
            CHAL;
 2c4:	84 b5       	in	r24, 0x24	; 36
 2c6:	8f 70       	andi	r24, 0x0F	; 15
 2c8:	84 bd       	out	0x24, r24	; 36
 2ca:	80 91 b0 00 	lds	r24, 0x00B0
 2ce:	8f 73       	andi	r24, 0x3F	; 63
 2d0:	80 93 b0 00 	sts	0x00B0, r24
 2d4:	2a 9a       	sbi	0x05, 2	; 5
 2d6:	8b b1       	in	r24, 0x0b	; 11
 2d8:	80 66       	ori	r24, 0x60	; 96
 2da:	8b b9       	out	0x0b, r24	; 11
 2dc:	58 9a       	sbi	0x0b, 0	; 11
 2de:	88 b1       	in	r24, 0x08	; 8
 2e0:	80 63       	ori	r24, 0x30	; 48
 2e2:	88 b9       	out	0x08, r24	; 8
 2e4:	00 00       	nop
 2e6:	00 00       	nop
 2e8:	00 00       	nop
 2ea:	00 00       	nop
 2ec:	00 00       	nop
 2ee:	00 00       	nop
 2f0:	00 00       	nop
 2f2:	00 00       	nop
 2f4:	96 cf       	rjmp	.-212    	; 0x222 <commut+0x160>
            break;
        case 2:
            CHBL;
 2f6:	84 b5       	in	r24, 0x24	; 36
 2f8:	8f 70       	andi	r24, 0x0F	; 15
 2fa:	84 bd       	out	0x24, r24	; 36
 2fc:	80 91 b0 00 	lds	r24, 0x00B0
 300:	8f 73       	andi	r24, 0x3F	; 63
 302:	80 93 b0 00 	sts	0x00B0, r24
 306:	2a 9a       	sbi	0x05, 2	; 5
 308:	8b b1       	in	r24, 0x0b	; 11
 30a:	80 66       	ori	r24, 0x60	; 96
 30c:	8b b9       	out	0x0b, r24	; 11
 30e:	58 9a       	sbi	0x0b, 0	; 11
 310:	88 b1       	in	r24, 0x08	; 8
 312:	80 63       	ori	r24, 0x30	; 48
 314:	88 b9       	out	0x08, r24	; 8
 316:	00 00       	nop
 318:	00 00       	nop
 31a:	00 00       	nop
 31c:	00 00       	nop
 31e:	00 00       	nop
 320:	00 00       	nop
 322:	00 00       	nop
 324:	00 00       	nop
 326:	44 98       	cbi	0x08, 4	; 8
 328:	19 c0       	rjmp	.+50     	; 0x35c <__stack+0x5d>
            break;
        case 3:
            AHBL;
 32a:	84 b5       	in	r24, 0x24	; 36
 32c:	8f 70       	andi	r24, 0x0F	; 15
 32e:	84 bd       	out	0x24, r24	; 36
 330:	80 91 b0 00 	lds	r24, 0x00B0
 334:	8f 73       	andi	r24, 0x3F	; 63
 336:	80 93 b0 00 	sts	0x00B0, r24
 33a:	2a 9a       	sbi	0x05, 2	; 5
 33c:	8b b1       	in	r24, 0x0b	; 11
 33e:	80 66       	ori	r24, 0x60	; 96
 340:	8b b9       	out	0x0b, r24	; 11
 342:	58 9a       	sbi	0x0b, 0	; 11
 344:	88 b1       	in	r24, 0x08	; 8
 346:	80 63       	ori	r24, 0x30	; 48
 348:	88 b9       	out	0x08, r24	; 8
 34a:	00 00       	nop
 34c:	00 00       	nop
 34e:	00 00       	nop
 350:	00 00       	nop
 352:	00 00       	nop
 354:	00 00       	nop
 356:	00 00       	nop
 358:	00 00       	nop
 35a:	58 98       	cbi	0x0b, 0	; 11
 35c:	84 b5       	in	r24, 0x24	; 36
 35e:	80 62       	ori	r24, 0x20	; 32
 360:	84 bd       	out	0x24, r24	; 36
 362:	08 95       	ret
            break;
        case 1:
            AHCL;
 364:	84 b5       	in	r24, 0x24	; 36
 366:	8f 70       	andi	r24, 0x0F	; 15
 368:	84 bd       	out	0x24, r24	; 36
 36a:	80 91 b0 00 	lds	r24, 0x00B0
 36e:	8f 73       	andi	r24, 0x3F	; 63
 370:	80 93 b0 00 	sts	0x00B0, r24
 374:	2a 9a       	sbi	0x05, 2	; 5
 376:	8b b1       	in	r24, 0x0b	; 11
 378:	80 66       	ori	r24, 0x60	; 96
 37a:	8b b9       	out	0x0b, r24	; 11
 37c:	58 9a       	sbi	0x0b, 0	; 11
 37e:	88 b1       	in	r24, 0x08	; 8
 380:	80 63       	ori	r24, 0x30	; 48
 382:	88 b9       	out	0x08, r24	; 8
 384:	00 00       	nop
 386:	00 00       	nop
 388:	00 00       	nop
 38a:	00 00       	nop
 38c:	00 00       	nop
 38e:	00 00       	nop
 390:	00 00       	nop
 392:	00 00       	nop
 394:	58 98       	cbi	0x0b, 0	; 11
 396:	80 91 b0 00 	lds	r24, 0x00B0
 39a:	80 68       	ori	r24, 0x80	; 128
 39c:	80 93 b0 00 	sts	0x00B0, r24
 3a0:	08 95       	ret

000003a2 <StartFun>:
    VelInte++;
	commut(PINC&0x07);
}

int StartFun(unsigned char SetSpeed)
{
 3a2:	0f 93       	push	r16
 3a4:	1f 93       	push	r17
 3a6:	08 2f       	mov	r16, r24
	unsigned char value = 0;
    unsigned char temp = SetSpeed;
	value = ((PINC&0x0E)>>1);
 3a8:	86 b1       	in	r24, 0x06	; 6
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	8e 70       	andi	r24, 0x0E	; 14
 3ae:	90 70       	andi	r25, 0x00	; 0
 3b0:	95 95       	asr	r25
 3b2:	87 95       	ror	r24
 3b4:	18 2f       	mov	r17, r24
	commut(value);
 3b6:	85 de       	rcall	.-758    	; 0xc2 <commut>
    OCR1A = OCR1B = OCR2A = temp;
 3b8:	00 93 b3 00 	sts	0x00B3, r16
 3bc:	80 91 b3 00 	lds	r24, 0x00B3
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	90 93 8b 00 	sts	0x008B, r25
 3c6:	80 93 8a 00 	sts	0x008A, r24
 3ca:	80 91 8a 00 	lds	r24, 0x008A
 3ce:	90 91 8b 00 	lds	r25, 0x008B
 3d2:	90 93 89 00 	sts	0x0089, r25
 3d6:	80 93 88 00 	sts	0x0088, r24
 3da:	40 2f       	mov	r20, r16
    while(1)
    {
     	if(value != (PINC&0x07))
 3dc:	86 b1       	in	r24, 0x06	; 6
 3de:	21 2f       	mov	r18, r17
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	87 70       	andi	r24, 0x07	; 7
 3e6:	90 70       	andi	r25, 0x00	; 0
 3e8:	28 17       	cp	r18, r24
 3ea:	39 07       	cpc	r19, r25
 3ec:	e9 f0       	breq	.+58     	; 0x428 <StartFun+0x86>
		{
			commut(value);
 3ee:	81 2f       	mov	r24, r17
 3f0:	68 de       	rcall	.-816    	; 0xc2 <commut>
           	ENB_PCINT;				// Enable PC interrupt
 3f2:	80 91 68 00 	lds	r24, 0x0068
 3f6:	82 60       	ori	r24, 0x02	; 2
 3f8:	80 93 68 00 	sts	0x0068, r24
			OCR1A = OCR1B = OCR2A = SetSpeed;
 3fc:	00 93 b3 00 	sts	0x00B3, r16
 400:	80 91 b3 00 	lds	r24, 0x00B3
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	90 93 8b 00 	sts	0x008B, r25
 40a:	80 93 8a 00 	sts	0x008A, r24
 40e:	80 91 8a 00 	lds	r24, 0x008A
 412:	90 91 8b 00 	lds	r25, 0x008B
 416:	90 93 89 00 	sts	0x0089, r25
 41a:	80 93 88 00 	sts	0x0088, r24
			stall = 0;
 41e:	10 92 00 01 	sts	0x0100, r1
 422:	21 e0       	ldi	r18, 0x01	; 1
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	2b c0       	rjmp	.+86     	; 0x47e <StartFun+0xdc>
			return 1;
		}
		value = (PINC&0x07);
 428:	26 b1       	in	r18, 0x06	; 6
		temp -= 1;
 42a:	41 50       	subi	r20, 0x01	; 1
        if(temp < 1)
 42c:	a1 f4       	brne	.+40     	; 0x456 <StartFun+0xb4>
        {
            OCR1A = OCR1B = OCR2A = 0xFF;
 42e:	8f ef       	ldi	r24, 0xFF	; 255
 430:	80 93 b3 00 	sts	0x00B3, r24
 434:	8f ef       	ldi	r24, 0xFF	; 255
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	90 93 8b 00 	sts	0x008B, r25
 43c:	80 93 8a 00 	sts	0x008A, r24
 440:	80 91 8a 00 	lds	r24, 0x008A
 444:	90 91 8b 00 	lds	r25, 0x008B
 448:	90 93 89 00 	sts	0x0089, r25
 44c:	80 93 88 00 	sts	0x0088, r24
 450:	20 e0       	ldi	r18, 0x00	; 0
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	14 c0       	rjmp	.+40     	; 0x47e <StartFun+0xdc>
           	ENB_PCINT;				// Enable PC interrupt
			OCR1A = OCR1B = OCR2A = SetSpeed;
			stall = 0;
			return 1;
		}
		value = (PINC&0x07);
 456:	12 2f       	mov	r17, r18
 458:	17 70       	andi	r17, 0x07	; 7
        {
            OCR1A = OCR1B = OCR2A = 0xFF;
			return 0;
        }
        else
            OCR1A = OCR1B = OCR2A = temp;
 45a:	40 93 b3 00 	sts	0x00B3, r20
 45e:	80 91 b3 00 	lds	r24, 0x00B3
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	90 93 8b 00 	sts	0x008B, r25
 468:	80 93 8a 00 	sts	0x008A, r24
 46c:	80 91 8a 00 	lds	r24, 0x008A
 470:	90 91 8b 00 	lds	r25, 0x008B
 474:	90 93 89 00 	sts	0x0089, r25
 478:	80 93 88 00 	sts	0x0088, r24
 47c:	af cf       	rjmp	.-162    	; 0x3dc <StartFun+0x3a>
    }
}
 47e:	c9 01       	movw	r24, r18
 480:	1f 91       	pop	r17
 482:	0f 91       	pop	r16
 484:	08 95       	ret

00000486 <__vector_4>:

volatile unsigned char update = 0;
unsigned char times = 0;

ISR(PCINT1_vect)
{
 486:	1f 92       	push	r1
 488:	0f 92       	push	r0
 48a:	0f b6       	in	r0, 0x3f	; 63
 48c:	0f 92       	push	r0
 48e:	11 24       	eor	r1, r1
 490:	2f 93       	push	r18
 492:	3f 93       	push	r19
 494:	4f 93       	push	r20
 496:	5f 93       	push	r21
 498:	6f 93       	push	r22
 49a:	7f 93       	push	r23
 49c:	8f 93       	push	r24
 49e:	9f 93       	push	r25
 4a0:	af 93       	push	r26
 4a2:	bf 93       	push	r27
 4a4:	ef 93       	push	r30
 4a6:	ff 93       	push	r31
    VelInte++;
 4a8:	80 91 12 02 	lds	r24, 0x0212
 4ac:	90 91 13 02 	lds	r25, 0x0213
 4b0:	01 96       	adiw	r24, 0x01	; 1
 4b2:	90 93 13 02 	sts	0x0213, r25
 4b6:	80 93 12 02 	sts	0x0212, r24
	commut(PINC&0x07);
 4ba:	86 b1       	in	r24, 0x06	; 6
 4bc:	87 70       	andi	r24, 0x07	; 7
 4be:	01 de       	rcall	.-1022   	; 0xc2 <commut>
}
 4c0:	ff 91       	pop	r31
 4c2:	ef 91       	pop	r30
 4c4:	bf 91       	pop	r27
 4c6:	af 91       	pop	r26
 4c8:	9f 91       	pop	r25
 4ca:	8f 91       	pop	r24
 4cc:	7f 91       	pop	r23
 4ce:	6f 91       	pop	r22
 4d0:	5f 91       	pop	r21
 4d2:	4f 91       	pop	r20
 4d4:	3f 91       	pop	r19
 4d6:	2f 91       	pop	r18
 4d8:	0f 90       	pop	r0
 4da:	0f be       	out	0x3f, r0	; 63
 4dc:	0f 90       	pop	r0
 4de:	1f 90       	pop	r1
 4e0:	18 95       	reti

000004e2 <main>:
    }
}

int main(void)
{	
	cli();
 4e2:	f8 94       	cli
    PortInit();
 4e4:	c3 dd       	rcall	.-1146   	; 0x6c <PortInit>
    D11_ON;
 4e6:	29 9a       	sbi	0x05, 1	; 5
 4e8:	88 e8       	ldi	r24, 0x88	; 136
 4ea:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 4ec:	28 ec       	ldi	r18, 0xC8	; 200
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	f9 01       	movw	r30, r18
 4f2:	31 97       	sbiw	r30, 0x01	; 1
 4f4:	f1 f7       	brne	.-4      	; 0x4f2 <main+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4f6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4f8:	d9 f7       	brne	.-10     	; 0x4f0 <main+0xe>
    _delay_ms(500);
    D11_OFF;
 4fa:	29 98       	cbi	0x05, 1	; 5
    FEED_DOG;
 4fc:	8b b1       	in	r24, 0x0b	; 11
 4fe:	80 58       	subi	r24, 0x80	; 128
 500:	8b b9       	out	0x0b, r24	; 11
 502:	88 e8       	ldi	r24, 0x88	; 136
 504:	93 e1       	ldi	r25, 0x13	; 19
 506:	28 ec       	ldi	r18, 0xC8	; 200
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	f9 01       	movw	r30, r18
 50c:	31 97       	sbiw	r30, 0x01	; 1
 50e:	f1 f7       	brne	.-4      	; 0x50c <main+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 510:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 512:	d9 f7       	brne	.-10     	; 0x50a <main+0x28>
	_delay_ms(500);
    D11_ON;
 514:	29 9a       	sbi	0x05, 1	; 5
    FEED_DOG;
 516:	8b b1       	in	r24, 0x0b	; 11
 518:	80 58       	subi	r24, 0x80	; 128
 51a:	8b b9       	out	0x0b, r24	; 11
 51c:	88 e8       	ldi	r24, 0x88	; 136
 51e:	93 e1       	ldi	r25, 0x13	; 19
 520:	28 ec       	ldi	r18, 0xC8	; 200
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	f9 01       	movw	r30, r18
 526:	31 97       	sbiw	r30, 0x01	; 1
 528:	f1 f7       	brne	.-4      	; 0x526 <main+0x44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 52a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 52c:	d9 f7       	brne	.-10     	; 0x524 <main+0x42>
    _delay_ms(500);
    FEED_DOG;
 52e:	8b b1       	in	r24, 0x0b	; 11
 530:	80 58       	subi	r24, 0x80	; 128
 532:	8b b9       	out	0x0b, r24	; 11
    D11_OFF;
 534:	29 98       	cbi	0x05, 1	; 5
    PINC = 0x00;
}

void PCInit(void)
{
    PCICR |= 1<<PCIE1;			// PCINT[14:8] 
 536:	80 91 68 00 	lds	r24, 0x0068
 53a:	82 60       	ori	r24, 0x02	; 2
 53c:	80 93 68 00 	sts	0x0068, r24
    PCMSK1 |= 0x07;				//
 540:	80 91 6c 00 	lds	r24, 0x006C
 544:	87 60       	ori	r24, 0x07	; 7
 546:	80 93 6c 00 	sts	0x006C, r24
}

void T0Init(void)
{
    TCCR0A = 1<<COM0A1 | 1<<COM0B1 | 1<<WGM00;		// 8bit phase
 54a:	81 ea       	ldi	r24, 0xA1	; 161
 54c:	84 bd       	out	0x24, r24	; 36
    TCCR0B = 1<<CS00;			// 0 divide
 54e:	91 e0       	ldi	r25, 0x01	; 1
 550:	95 bd       	out	0x25, r25	; 37
    OCR0A = OCR0B = 0x00;
 552:	18 bc       	out	0x28, r1	; 40
 554:	88 b5       	in	r24, 0x28	; 40
 556:	87 bd       	out	0x27, r24	; 39
}

void T2Init(void)
{
    TCCR2A = 1<<COM2A1 | 1<<WGM20;
 558:	81 e8       	ldi	r24, 0x81	; 129
 55a:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = 1<<CS20;
 55e:	90 93 b1 00 	sts	0x00B1, r25
    OCR2A = 0x00;
 562:	10 92 b3 00 	sts	0x00B3, r1
    FEED_DOG;
    D11_OFF;
	PCInit();
    T0Init();
    T2Init();
	sei();
 566:	78 94       	sei
	unsigned char value = 0x80;
	
	//OCR0A = OCR0B = OCR2A = value;
	LMOS_OFF;
 568:	84 b5       	in	r24, 0x24	; 36
 56a:	8f 70       	andi	r24, 0x0F	; 15
 56c:	84 bd       	out	0x24, r24	; 36
 56e:	80 91 b0 00 	lds	r24, 0x00B0
 572:	8f 73       	andi	r24, 0x3F	; 63
 574:	80 93 b0 00 	sts	0x00B0, r24
 578:	2a 9a       	sbi	0x05, 2	; 5
 57a:	8b b1       	in	r24, 0x0b	; 11
 57c:	80 66       	ori	r24, 0x60	; 96
 57e:	8b b9       	out	0x0b, r24	; 11
 580:	20 e4       	ldi	r18, 0x40	; 64
 582:	3c e9       	ldi	r19, 0x9C	; 156
	
	while(1)
	{
		HMOS_ON;
 584:	58 98       	cbi	0x0b, 0	; 11
 586:	88 b1       	in	r24, 0x08	; 8
 588:	8f 7c       	andi	r24, 0xCF	; 207
 58a:	88 b9       	out	0x08, r24	; 8
 58c:	c9 01       	movw	r24, r18
 58e:	01 97       	sbiw	r24, 0x01	; 1
 590:	f1 f7       	brne	.-4      	; 0x58e <main+0xac>
		_delay_ms(20);
		HMOS_OFF;
 592:	58 9a       	sbi	0x0b, 0	; 11
 594:	88 b1       	in	r24, 0x08	; 8
 596:	80 63       	ori	r24, 0x30	; 48
 598:	88 b9       	out	0x08, r24	; 8
 59a:	c9 01       	movw	r24, r18
 59c:	01 97       	sbiw	r24, 0x01	; 1
 59e:	f1 f7       	brne	.-4      	; 0x59c <main+0xba>
 5a0:	f1 cf       	rjmp	.-30     	; 0x584 <main+0xa2>

000005a2 <_exit>:
 5a2:	f8 94       	cli

000005a4 <__stop_program>:
 5a4:	ff cf       	rjmp	.-2      	; 0x5a4 <__stop_program>
